
stm32_f401cc_hlw8032_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  0800abe4  0800abe4  0000bbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b750  0800b750  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800b750  0800b750  0000c750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b758  0800b758  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b758  0800b758  0000c758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b75c  0800b75c  0000c75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b760  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  0800b7c8  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800b7c8  0000d398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de98  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234d  00000000  00000000  0001af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  0001d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c99  00000000  00000000  0001e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017520  00000000  00000000  0001edb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2b5  00000000  00000000  000362d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089646  00000000  00000000  00045586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cebcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f8  00000000  00000000  000cec10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d3308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800abcc 	.word	0x0800abcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800abcc 	.word	0x0800abcc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f81a 	bl	80002e8 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__popcountsi2>:
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002ce:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002d2:	4418      	add	r0, r3
 80002d4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002d8:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002dc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002e0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002e4:	0e00      	lsrs	r0, r0, #24
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d003      	beq.n	80005d4 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 80005cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	e002      	b.n	80005da <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005d6:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <SPI_flash_reg_cb+0x54>)
 80005d8:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 80005e0:	4a09      	ldr	r2, [pc, #36]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	e002      	b.n	80005ee <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005ea:	4a08      	ldr	r2, [pc, #32]	@ (800060c <SPI_flash_reg_cb+0x54>)
 80005ec:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 80005ee:	4a06      	ldr	r2, [pc, #24]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	6093      	str	r3, [r2, #8]

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084
 800060c:	080005a9 	.word	0x080005a9

08000610 <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8000614:	f000 f8c2 	bl	800079c <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8000618:	2066      	movs	r0, #102	@ 0x66
 800061a:	f000 fa45 	bl	8000aa8 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 800061e:	2099      	movs	r0, #153	@ 0x99
 8000620:	f000 fa42 	bl	8000aa8 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8000624:	f000 f8c4 	bl	80007b0 <sFLASH_CS_HIGH>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 8000634:	f7ff ffec 	bl	8000610 <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 8000638:	f000 f9f8 	bl	8000a2c <sFLASH_ReadID>
 800063c:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	4a4f      	ldr	r2, [pc, #316]	@ (8000780 <sFLASH_GetInfo+0x154>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d076      	beq.n	8000734 <sFLASH_GetInfo+0x108>
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4a4d      	ldr	r2, [pc, #308]	@ (8000780 <sFLASH_GetInfo+0x154>)
 800064a:	4293      	cmp	r3, r2
 800064c:	f0c0 8088 	bcc.w	8000760 <sFLASH_GetInfo+0x134>
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4a4c      	ldr	r2, [pc, #304]	@ (8000784 <sFLASH_GetInfo+0x158>)
 8000654:	4293      	cmp	r3, r2
 8000656:	f200 8083 	bhi.w	8000760 <sFLASH_GetInfo+0x134>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4a4a      	ldr	r2, [pc, #296]	@ (8000788 <sFLASH_GetInfo+0x15c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d37e      	bcc.n	8000760 <sFLASH_GetInfo+0x134>
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4b49      	ldr	r3, [pc, #292]	@ (800078c <sFLASH_GetInfo+0x160>)
 8000666:	4413      	add	r3, r2
 8000668:	2b03      	cmp	r3, #3
 800066a:	d879      	bhi.n	8000760 <sFLASH_GetInfo+0x134>
 800066c:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <sFLASH_GetInfo+0x48>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000685 	.word	0x08000685
 8000678:	080006b1 	.word	0x080006b1
 800067c:	080006dd 	.word	0x080006dd
 8000680:	08000709 	.word	0x08000709
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8000684:	4b42      	ldr	r3, [pc, #264]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000686:	4a40      	ldr	r2, [pc, #256]	@ (8000788 <sFLASH_GetInfo+0x15c>)
 8000688:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 800068a:	4b41      	ldr	r3, [pc, #260]	@ (8000790 <sFLASH_GetInfo+0x164>)
 800068c:	2201      	movs	r2, #1
 800068e:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8000690:	4b3f      	ldr	r3, [pc, #252]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000692:	2201      	movs	r2, #1
 8000694:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8000696:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000698:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800069c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800069e:	4b3c      	ldr	r3, [pc, #240]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006a4:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 80006a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	819a      	strh	r2, [r3, #12]
			break;
 80006ae:	e05b      	b.n	8000768 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80006b0:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006b2:	4a38      	ldr	r2, [pc, #224]	@ (8000794 <sFLASH_GetInfo+0x168>)
 80006b4:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80006b6:	4b36      	ldr	r3, [pc, #216]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80006bc:	4b34      	ldr	r3, [pc, #208]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006be:	2201      	movs	r2, #1
 80006c0:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80006c2:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006c8:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80006ca:	4b31      	ldr	r3, [pc, #196]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006d0:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d8:	819a      	strh	r2, [r3, #12]
			break;
 80006da:	e045      	b.n	8000768 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80006dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006de:	4a2e      	ldr	r2, [pc, #184]	@ (8000798 <sFLASH_GetInfo+0x16c>)
 80006e0:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80006ee:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <sFLASH_GetInfo+0x164>)
 80006f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006fc:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 80006fe:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000700:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000704:	819a      	strh	r2, [r3, #12]
			break;
 8000706:	e02f      	b.n	8000768 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <sFLASH_GetInfo+0x164>)
 800070a:	4a1e      	ldr	r2, [pc, #120]	@ (8000784 <sFLASH_GetInfo+0x158>)
 800070c:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000710:	2201      	movs	r2, #1
 8000712:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000716:	2201      	movs	r2, #1
 8000718:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <sFLASH_GetInfo+0x164>)
 800071c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000720:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000728:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <sFLASH_GetInfo+0x164>)
 800072c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000730:	819a      	strh	r2, [r3, #12]
			break;
 8000732:	e019      	b.n	8000768 <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <sFLASH_GetInfo+0x154>)
 8000738:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <sFLASH_GetInfo+0x164>)
 800073c:	2201      	movs	r2, #1
 800073e:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000742:	2201      	movs	r2, #1
 8000744:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000748:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800074c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000754:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000758:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800075c:	819a      	strh	r2, [r3, #12]
			break;
 800075e:	e003      	b.n	8000768 <sFLASH_GetInfo+0x13c>
		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <sFLASH_GetInfo+0x164>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
			break;
 8000766:	bf00      	nop
	}

	return flash_info;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <sFLASH_GetInfo+0x164>)
 800076c:	461c      	mov	r4, r3
 800076e:	4613      	mov	r3, r2
 8000770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bd90      	pop	{r4, r7, pc}
 800077e:	bf00      	nop
 8000780:	00c22016 	.word	0x00c22016
 8000784:	00ef4018 	.word	0x00ef4018
 8000788:	00ef4015 	.word	0x00ef4015
 800078c:	ff10bfeb 	.word	0xff10bfeb
 8000790:	20000098 	.word	0x20000098
 8000794:	00ef4016 	.word	0x00ef4016
 8000798:	00ef4017 	.word	0x00ef4017

0800079c <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80007a0:	4b02      	ldr	r3, [pc, #8]	@ (80007ac <sFLASH_CS_LOW+0x10>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4798      	blx	r3

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000084 	.word	0x20000084

080007b0 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <sFLASH_CS_HIGH+0x10>)
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	4798      	blx	r3
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000084 	.word	0x20000084

080007c4 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 80007cc:	f000 f97c 	bl	8000ac8 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80007d0:	f7ff ffe4 	bl	800079c <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 80007d4:	2020      	movs	r0, #32
 80007d6:	f000 f967 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f961 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f95b 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f956 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80007fc:	f7ff ffd8 	bl	80007b0 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8000800:	f000 f96d 	bl	8000ade <sFLASH_WaitForWriteEnd>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	4613      	mov	r3, r2
 8000818:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 800081a:	f000 f955 	bl	8000ac8 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800081e:	f7ff ffbd 	bl	800079c <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8000822:	2002      	movs	r0, #2
 8000824:	f000 f940 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	0c1b      	lsrs	r3, r3, #16
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f93a 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	0a1b      	lsrs	r3, r3, #8
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f934 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f92f 	bl	8000aa8 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 800084a:	e007      	b.n	800085c <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f929 	bl	8000aa8 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	80fa      	strh	r2, [r7, #6]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f2      	bne.n	800084c <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000866:	f7ff ffa3 	bl	80007b0 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 800086a:	f000 f938 	bl	8000ade <sFLASH_WaitForWriteEnd>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	4613      	mov	r3, r2
 8000882:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	75fb      	strb	r3, [r7, #23]
 8000888:	2300      	movs	r3, #0
 800088a:	75bb      	strb	r3, [r7, #22]
 800088c:	2300      	movs	r3, #0
 800088e:	757b      	strb	r3, [r7, #21]
 8000890:	2300      	movs	r3, #0
 8000892:	753b      	strb	r3, [r7, #20]
 8000894:	2300      	movs	r3, #0
 8000896:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 800089c:	7d7b      	ldrb	r3, [r7, #21]
 800089e:	425b      	negs	r3, r3
 80008a0:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80008ae:	7d7b      	ldrb	r3, [r7, #21]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d124      	bne.n	80008fe <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d114      	bne.n	80008e4 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	461a      	mov	r2, r3
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f7ff ffa3 	bl	800080c <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80008c6:	e07b      	b.n	80009c0 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80008c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f7ff ff9c 	bl	800080c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80008da:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80008e2:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	75fa      	strb	r2, [r7, #23]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1ec      	bne.n	80008c8 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80008ee:	7dbb      	ldrb	r3, [r7, #22]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f7ff ff88 	bl	800080c <sFLASH_WritePage>
}
 80008fc:	e060      	b.n	80009c0 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d125      	bne.n	8000950 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8000904:	7dba      	ldrb	r2, [r7, #22]
 8000906:	7d3b      	ldrb	r3, [r7, #20]
 8000908:	429a      	cmp	r2, r3
 800090a:	d91a      	bls.n	8000942 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 800090c:	7dba      	ldrb	r2, [r7, #22]
 800090e:	7d3b      	ldrb	r3, [r7, #20]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8000914:	7d3b      	ldrb	r3, [r7, #20]
 8000916:	b29b      	uxth	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f7ff ff75 	bl	800080c <sFLASH_WritePage>
        WriteAddr +=  count;
 8000922:	7d3b      	ldrb	r3, [r7, #20]
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 800092a:	7d3b      	ldrb	r3, [r7, #20]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8000932:	7cfb      	ldrb	r3, [r7, #19]
 8000934:	b29b      	uxth	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f7ff ff66 	bl	800080c <sFLASH_WritePage>
}
 8000940:	e03e      	b.n	80009c0 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	461a      	mov	r2, r3
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f7ff ff5f 	bl	800080c <sFLASH_WritePage>
}
 800094e:	e037      	b.n	80009c0 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8000950:	7d3b      	ldrb	r3, [r7, #20]
 8000952:	b29b      	uxth	r3, r3
 8000954:	88fa      	ldrh	r2, [r7, #6]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8000966:	7d3b      	ldrb	r3, [r7, #20]
 8000968:	b29b      	uxth	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ff4c 	bl	800080c <sFLASH_WritePage>
      WriteAddr +=  count;
 8000974:	7d3b      	ldrb	r3, [r7, #20]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	4413      	add	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 800097c:	7d3b      	ldrb	r3, [r7, #20]
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4413      	add	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8000984:	e00d      	b.n	80009a2 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8000986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff ff3d 	bl	800080c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000998:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80009a0:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80009a2:	7dfb      	ldrb	r3, [r7, #23]
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	75fa      	strb	r2, [r7, #23]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1ec      	bne.n	8000986 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80009ac:	7dbb      	ldrb	r3, [r7, #22]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d006      	beq.n	80009c0 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80009b2:	7dbb      	ldrb	r3, [r7, #22]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff26 	bl	800080c <sFLASH_WritePage>
}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80009d6:	f7ff fee1 	bl	800079c <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 f864 	bl	8000aa8 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	0c1b      	lsrs	r3, r3, #16
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f85e 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f858 	bl	8000aa8 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f853 	bl	8000aa8 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 8000a02:	e008      	b.n	8000a16 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 8000a04:	f000 f846 	bl	8000a94 <sFLASH_ReadByte>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	80fa      	strh	r2, [r7, #6]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f1      	bne.n	8000a04 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000a20:	f7ff fec6 	bl	80007b0 <sFLASH_CS_HIGH>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000a42:	f7ff feab 	bl	800079c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8000a46:	f7ff feb3 	bl	80007b0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8000a4a:	f7ff fea7 	bl	800079c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8000a4e:	f7ff feaf 	bl	80007b0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8000a52:	f7ff fea3 	bl	800079c <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8000a56:	209f      	movs	r0, #159	@ 0x9f
 8000a58:	f000 f826 	bl	8000aa8 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8000a5c:	f000 f81a 	bl	8000a94 <sFLASH_ReadByte>
 8000a60:	4603      	mov	r3, r0
 8000a62:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8000a64:	f000 f816 	bl	8000a94 <sFLASH_ReadByte>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8000a6c:	f000 f812 	bl	8000a94 <sFLASH_ReadByte>
 8000a70:	4603      	mov	r3, r0
 8000a72:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000a74:	f7ff fe9c 	bl	80007b0 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	041a      	lsls	r2, r3, #16
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	4313      	orrs	r3, r2
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

  return Temp;
 8000a88:	68fb      	ldr	r3, [r7, #12]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8000a98:	4b02      	ldr	r3, [pc, #8]	@ (8000aa4 <sFLASH_ReadByte+0x10>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4798      	blx	r3
 8000a9e:	4603      	mov	r3, r0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000084 	.word	0x20000084

08000aa8 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8000ab2:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <sFLASH_SendByte+0x1c>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	4610      	mov	r0, r2
 8000aba:	4798      	blx	r3
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000084 	.word	0x20000084

08000ac8 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000acc:	f7ff fe66 	bl	800079c <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8000ad0:	2006      	movs	r0, #6
 8000ad2:	f7ff ffe9 	bl	8000aa8 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000ad6:	f7ff fe6b 	bl	80007b0 <sFLASH_CS_HIGH>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}

08000ade <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000ae8:	f7ff fe58 	bl	800079c <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8000aec:	2005      	movs	r0, #5
 8000aee:	f7ff ffdb 	bl	8000aa8 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 8000af2:	f7ff ffcf 	bl	8000a94 <sFLASH_ReadByte>
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f6      	bne.n	8000af2 <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000b04:	f7ff fe54 	bl	80007b0 <sFLASH_CS_HIGH>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	bf38      	it	cc
 8000b22:	4613      	movcc	r3, r2
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	bf28      	it	cs
 8000b42:	4613      	movcs	r3, r2
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	fb01 f202 	mul.w	r2, r1, r2
 8000b68:	1a9b      	subs	r3, r3, r2
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	1ad3      	subs	r3, r2, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6839      	ldr	r1, [r7, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffde 	bl	8000b50 <lfs_aligndown>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	fab3 f383 	clz	r3, r3
 8000bae:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	fa93 f3a3 	rbit	r3, r3
 8000bcc:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fb6b 	bl	80002c0 <__popcountsi2>
 8000bea:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	1ad3      	subs	r3, r2, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000c18:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffee 	bl	8000c10 <lfs_fromle32>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffed 	bl	8000c3e <lfs_frombe32>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f008 ffc0 	bl	8009bfc <malloc>
 8000c7c:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f008 ffbc 	bl	8009c0c <free>
#else
    (void)p;
#endif
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68d8      	ldr	r0, [r3, #12]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cce:	461a      	mov	r2, r3
 8000cd0:	21ff      	movs	r1, #255	@ 0xff
 8000cd2:	f009 f975 	bl	8009fc0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cdc:	601a      	str	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cf8:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d208      	bcs.n	8000d18 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8000d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d0a:	441a      	add	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d10:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f240 811b 	bls.w	8000f4e <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8000d18:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8000d1c:	e11c      	b.n	8000f58 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d20:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d03f      	beq.n	8000da8 <lfs_bd_read+0xc0>
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d13a      	bne.n	8000da8 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000d3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d232      	bcs.n	8000da8 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d324      	bcc.n	8000d96 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	6859      	ldr	r1, [r3, #4]
 8000d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d56:	1acb      	subs	r3, r1, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	69b8      	ldr	r0, [r7, #24]
 8000d5e:	f7ff fee7 	bl	8000b30 <lfs_min>
 8000d62:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4619      	mov	r1, r3
 8000d76:	69f8      	ldr	r0, [r7, #28]
 8000d78:	f009 f967 	bl	800a04a <memcpy>

                data += diff;
 8000d7c:	69fa      	ldr	r2, [r7, #28]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4413      	add	r3, r2
 8000d82:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4413      	add	r3, r2
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8000d8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8000d94:	e0db      	b.n	8000f4e <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	69b8      	ldr	r0, [r7, #24]
 8000da2:	f7ff fec5 	bl	8000b30 <lfs_min>
 8000da6:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d13a      	bne.n	8000e28 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d232      	bcs.n	8000e28 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d324      	bcc.n	8000e16 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6859      	ldr	r1, [r3, #4]
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd6:	1acb      	subs	r3, r1, r3
 8000dd8:	4413      	add	r3, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	69b8      	ldr	r0, [r7, #24]
 8000dde:	f7ff fea7 	bl	8000b30 <lfs_min>
 8000de2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4619      	mov	r1, r3
 8000df6:	69f8      	ldr	r0, [r7, #28]
 8000df8:	f009 f927 	bl	800a04a <memcpy>

                data += diff;
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4413      	add	r3, r2
 8000e02:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000e04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4413      	add	r3, r2
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8000e0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8000e14:	e09b      	b.n	8000f4e <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	69b8      	ldr	r0, [r7, #24]
 8000e22:	f7ff fe85 	bl	8000b30 <lfs_min>
 8000e26:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000e28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d336      	bcc.n	8000e9e <lfs_bd_read+0x1b6>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e3c:	fb01 f202 	mul.w	r2, r1, r2
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d12b      	bne.n	8000e9e <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e4a:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000e4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d325      	bcc.n	8000e9e <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	69b8      	ldr	r0, [r7, #24]
 8000e5c:	f7ff fe78 	bl	8000b50 <lfs_aligndown>
 8000e60:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e66:	685c      	ldr	r4, [r3, #4]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000e76:	47a0      	blx	r4
 8000e78:	6178      	str	r0, [r7, #20]
            if (err) {
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <lfs_bd_read+0x19c>
                return err;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	e069      	b.n	8000f58 <lfs_bd_read+0x270>
            }

            data += diff;
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4413      	add	r3, r2
 8000e8a:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000e8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4413      	add	r3, r2
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8000e94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8000e9c:	e057      	b.n	8000f4e <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d305      	bcc.n	8000eb6 <lfs_bd_read+0x1ce>
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <lfs_bd_read+0x278>)
 8000eac:	4a2d      	ldr	r2, [pc, #180]	@ (8000f64 <lfs_bd_read+0x27c>)
 8000eae:	216b      	movs	r1, #107	@ 0x6b
 8000eb0:	482d      	ldr	r0, [pc, #180]	@ (8000f68 <lfs_bd_read+0x280>)
 8000eb2:	f008 fe85 	bl	8009bc0 <__assert_func>
        rcache->block = block;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000eba:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ec6:	f7ff fe43 	bl	8000b50 <lfs_aligndown>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000eda:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f7ff fe4b 	bl	8000b7a <lfs_alignup>
 8000ee4:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000eea:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8000eec:	4619      	mov	r1, r3
 8000eee:	4610      	mov	r0, r2
 8000ef0:	f7ff fe1e 	bl	8000b30 <lfs_min>
 8000ef4:	4602      	mov	r2, r0
                - rcache->off,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000efa:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f7ff fe13 	bl	8000b30 <lfs_min>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f14:	685c      	ldr	r4, [r3, #4]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	462b      	mov	r3, r5
 8000f2e:	47a0      	blx	r4
 8000f30:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd05      	ble.n	8000f44 <lfs_bd_read+0x25c>
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <lfs_bd_read+0x284>)
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <lfs_bd_read+0x27c>)
 8000f3c:	2176      	movs	r1, #118	@ 0x76
 8000f3e:	480a      	ldr	r0, [pc, #40]	@ (8000f68 <lfs_bd_read+0x280>)
 8000f40:	f008 fe3e 	bl	8009bc0 <__assert_func>
        if (err) {
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <lfs_bd_read+0x266>
            return err;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	e004      	b.n	8000f58 <lfs_bd_read+0x270>
    while (size > 0) {
 8000f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f aee4 	bne.w	8000d1e <lfs_bd_read+0x36>
        }
    }

    return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f60:	0800abe4 	.word	0x0800abe4
 8000f64:	0800b550 	.word	0x0800b550
 8000f68:	0800ac04 	.word	0x0800ac04
 8000f6c:	0800ac18 	.word	0x0800ac18

08000f70 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	@ 0x38
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f80:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8a:	e039      	b.n	8001000 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000f8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2108      	movs	r1, #8
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fdcb 	bl	8000b30 <lfs_min>
 8000f9a:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	1ad1      	subs	r1, r2, r3
 8000fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa6:	4413      	add	r3, r2
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	9203      	str	r2, [sp, #12]
 8000fac:	f107 0210 	add.w	r2, r7, #16
 8000fb0:	9202      	str	r2, [sp, #8]
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff fe92 	bl	8000ce8 <lfs_bd_read>
 8000fc4:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <lfs_bd_cmp+0x60>
            return res;
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	e01c      	b.n	800100a <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8000fd0:	6a3a      	ldr	r2, [r7, #32]
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	18d1      	adds	r1, r2, r3
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f008 ffdf 	bl	8009fa0 <memcmp>
 8000fe2:	61b8      	str	r0, [r7, #24]
        if (res) {
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d006      	beq.n	8000ff8 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da01      	bge.n	8000ff4 <lfs_bd_cmp+0x84>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e00a      	b.n	800100a <lfs_bd_cmp+0x9a>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e008      	b.n	800100a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001004:	429a      	cmp	r2, r3
 8001006:	d3c1      	bcc.n	8000f8c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3728      	adds	r7, #40	@ 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b08c      	sub	sp, #48	@ 0x30
 8001018:	af04      	add	r7, sp, #16
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800102a:	d061      	beq.n	80010f0 <lfs_bd_flush+0xdc>
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f113 0f02 	cmn.w	r3, #2
 8001034:	d05c      	beq.n	80010f0 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	429a      	cmp	r2, r3
 8001042:	d305      	bcc.n	8001050 <lfs_bd_flush+0x3c>
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <lfs_bd_flush+0xe8>)
 8001046:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <lfs_bd_flush+0xec>)
 8001048:	219e      	movs	r1, #158	@ 0x9e
 800104a:	482e      	ldr	r0, [pc, #184]	@ (8001104 <lfs_bd_flush+0xf0>)
 800104c:	f008 fdb8 	bl	8009bc0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f7ff fd8c 	bl	8000b7a <lfs_alignup>
 8001062:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001068:	689c      	ldr	r4, [r3, #8]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	462b      	mov	r3, r5
 8001080:	47a0      	blx	r4
 8001082:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	dd05      	ble.n	8001096 <lfs_bd_flush+0x82>
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <lfs_bd_flush+0xf4>)
 800108c:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <lfs_bd_flush+0xec>)
 800108e:	21a2      	movs	r1, #162	@ 0xa2
 8001090:	481c      	ldr	r0, [pc, #112]	@ (8001104 <lfs_bd_flush+0xf0>)
 8001092:	f008 fd95 	bl	8009bc0 <__assert_func>
        if (err) {
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <lfs_bd_flush+0x8c>
            return err;
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	e028      	b.n	80010f2 <lfs_bd_flush+0xde>
        }

        if (validate) {
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d020      	beq.n	80010e8 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff fdf7 	bl	8000c9c <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80010ba:	69f8      	ldr	r0, [r7, #28]
 80010bc:	9003      	str	r0, [sp, #12]
 80010be:	9102      	str	r1, [sp, #8]
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	2100      	movs	r1, #0
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff ff50 	bl	8000f70 <lfs_bd_cmp>
 80010d0:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da01      	bge.n	80010dc <lfs_bd_flush+0xc8>
                return res;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	e00a      	b.n	80010f2 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 80010e2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80010e6:	e004      	b.n	80010f2 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff fde5 	bl	8000cba <lfs_cache_zero>
    }

    return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdb0      	pop	{r4, r5, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800ac24 	.word	0x0800ac24
 8001100:	0800b55c 	.word	0x0800b55c
 8001104:	0800ac04 	.word	0x0800ac04
 8001108:	0800ac18 	.word	0x0800ac18

0800110c <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff fdbd 	bl	8000c9c <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff ff73 	bl	8001014 <lfs_bd_flush>
 800112e:	6178      	str	r0, [r7, #20]
    if (err) {
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <lfs_bd_sync+0x2e>
        return err;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	e011      	b.n	800115e <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001144:	4610      	mov	r0, r2
 8001146:	4798      	blx	r3
 8001148:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dd05      	ble.n	800115c <lfs_bd_sync+0x50>
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <lfs_bd_sync+0x5c>)
 8001152:	4a06      	ldr	r2, [pc, #24]	@ (800116c <lfs_bd_sync+0x60>)
 8001154:	21c8      	movs	r1, #200	@ 0xc8
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <lfs_bd_sync+0x64>)
 8001158:	f008 fd32 	bl	8009bc0 <__assert_func>
    return err;
 800115c:	697b      	ldr	r3, [r7, #20]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800ac18 	.word	0x0800ac18
 800116c:	0800b56c 	.word	0x0800b56c
 8001170:	0800ac04 	.word	0x0800ac04

08001174 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001184:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8001186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001188:	f113 0f02 	cmn.w	r3, #2
 800118c:	d00b      	beq.n	80011a6 <lfs_bd_prog+0x32>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001196:	429a      	cmp	r2, r3
 8001198:	d305      	bcc.n	80011a6 <lfs_bd_prog+0x32>
 800119a:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <lfs_bd_prog+0x148>)
 800119c:	4a48      	ldr	r2, [pc, #288]	@ (80012c0 <lfs_bd_prog+0x14c>)
 800119e:	21d3      	movs	r1, #211	@ 0xd3
 80011a0:	4848      	ldr	r0, [pc, #288]	@ (80012c4 <lfs_bd_prog+0x150>)
 80011a2:	f008 fd0d 	bl	8009bc0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80011a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011aa:	441a      	add	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d979      	bls.n	80012aa <lfs_bd_prog+0x136>
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <lfs_bd_prog+0x154>)
 80011b8:	4a41      	ldr	r2, [pc, #260]	@ (80012c0 <lfs_bd_prog+0x14c>)
 80011ba:	21d4      	movs	r1, #212	@ 0xd4
 80011bc:	4841      	ldr	r0, [pc, #260]	@ (80012c4 <lfs_bd_prog+0x150>)
 80011be:	f008 fcff 	bl	8009bc0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d151      	bne.n	8001270 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80011d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d34c      	bcc.n	8001270 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e0:	4413      	add	r3, r2
                off >= pcache->off &&
 80011e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d243      	bcs.n	8001270 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	6859      	ldr	r1, [r3, #4]
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80011f6:	4413      	add	r3, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80011fc:	f7ff fc98 	bl	8000b30 <lfs_min>
 8001200:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800120c:	1acb      	subs	r3, r1, r3
 800120e:	4413      	add	r3, r2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	69f9      	ldr	r1, [r7, #28]
 8001214:	4618      	mov	r0, r3
 8001216:	f008 ff18 	bl	800a04a <memcpy>

            data += diff;
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4413      	add	r3, r2
 8001220:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4413      	add	r3, r2
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800122a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	6898      	ldr	r0, [r3, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc66 	bl	8000b10 <lfs_max>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	429a      	cmp	r2, r3
 8001256:	d127      	bne.n	80012a8 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f7ff fed8 	bl	8001014 <lfs_bd_flush>
 8001264:	6178      	str	r0, [r7, #20]
                if (err) {
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01d      	beq.n	80012a8 <lfs_bd_prog+0x134>
                    return err;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	e020      	b.n	80012b2 <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001278:	d005      	beq.n	8001286 <lfs_bd_prog+0x112>
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <lfs_bd_prog+0x158>)
 800127c:	4a10      	ldr	r2, [pc, #64]	@ (80012c0 <lfs_bd_prog+0x14c>)
 800127e:	21f1      	movs	r1, #241	@ 0xf1
 8001280:	4810      	ldr	r0, [pc, #64]	@ (80012c4 <lfs_bd_prog+0x150>)
 8001282:	f008 fc9d 	bl	8009bc0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800128a:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4619      	mov	r1, r3
 8001294:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001296:	f7ff fc5b 	bl	8000b50 <lfs_aligndown>
 800129a:	4602      	mov	r2, r0
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	e000      	b.n	80012aa <lfs_bd_prog+0x136>
            continue;
 80012a8:	bf00      	nop
    while (size > 0) {
 80012aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d188      	bne.n	80011c2 <lfs_bd_prog+0x4e>
    }

    return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800ac4c 	.word	0x0800ac4c
 80012c0:	0800b578 	.word	0x0800b578
 80012c4:	0800ac04 	.word	0x0800ac04
 80012c8:	0800ac88 	.word	0x0800ac88
 80012cc:	0800acac 	.word	0x0800acac

080012d0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d305      	bcc.n	80012f2 <lfs_bd_erase+0x22>
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <lfs_bd_erase+0x54>)
 80012e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <lfs_bd_erase+0x58>)
 80012ea:	21ff      	movs	r1, #255	@ 0xff
 80012ec:	480f      	ldr	r0, [pc, #60]	@ (800132c <lfs_bd_erase+0x5c>)
 80012ee:	f008 fc67 	bl	8009bc0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	4610      	mov	r0, r2
 8001300:	4798      	blx	r3
 8001302:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	dd06      	ble.n	8001318 <lfs_bd_erase+0x48>
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <lfs_bd_erase+0x60>)
 800130c:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <lfs_bd_erase+0x58>)
 800130e:	f240 1101 	movw	r1, #257	@ 0x101
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <lfs_bd_erase+0x5c>)
 8001314:	f008 fc54 	bl	8009bc0 <__assert_func>
    return err;
 8001318:	68fb      	ldr	r3, [r7, #12]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800abe4 	.word	0x0800abe4
 8001328:	0800b584 	.word	0x0800b584
 800132c:	0800ac04 	.word	0x0800ac04
 8001330:	0800ac18 	.word	0x0800ac18

08001334 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3304      	adds	r3, #4
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800136e:	d005      	beq.n	800137c <lfs_pair_isnull+0x1e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3304      	adds	r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800137a:	d101      	bne.n	8001380 <lfs_pair_isnull+0x22>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <lfs_pair_isnull+0x24>
 8001380:	2300      	movs	r3, #0
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d017      	beq.n	80013da <lfs_pair_cmp+0x46>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d00f      	beq.n	80013da <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3304      	adds	r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d008      	beq.n	80013da <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3304      	adds	r3, #4
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d001      	beq.n	80013da <lfs_pair_cmp+0x46>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <lfs_pair_cmp+0x48>
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d107      	bne.n	800140e <lfs_pair_sync+0x26>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d00d      	beq.n	800142a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	3304      	adds	r3, #4
 8001416:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d108      	bne.n	800142e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3304      	adds	r3, #4
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d101      	bne.n	800142e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <lfs_pair_sync+0x48>
 800142e:	2300      	movs	r3, #0
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8001442:	b590      	push	{r4, r7, lr}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbde 	bl	8000c10 <lfs_fromle32>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3304      	adds	r3, #4
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1d1c      	adds	r4, r3, #4
 8001464:	4610      	mov	r0, r2
 8001466:	f7ff fbd3 	bl	8000c10 <lfs_fromle32>
 800146a:	4603      	mov	r3, r0
 800146c:	6023      	str	r3, [r4, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}

08001476 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8001476:	b590      	push	{r4, r7, lr}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fbcf 	bl	8000c26 <lfs_tole32>
 8001488:	4602      	mov	r2, r0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1d1c      	adds	r4, r3, #4
 8001498:	4610      	mov	r0, r2
 800149a:	f7ff fbc4 	bl	8000c26 <lfs_tole32>
 800149e:	4603      	mov	r3, r0
 80014a0:	6023      	str	r3, [r4, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	0fdb      	lsrs	r3, r3, #31
 80014b8:	b2db      	uxtb	r3, r3
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	059b      	lsls	r3, r3, #22
 80014d2:	159b      	asrs	r3, r3, #22
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0d1b      	lsrs	r3, r3, #20
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80014fe:	b29b      	uxth	r3, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	0d1b      	lsrs	r3, r3, #20
 8001518:	b29b      	uxth	r3, r3
 800151a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151e:	b29b      	uxth	r3, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0d1b      	lsrs	r3, r3, #20
 8001538:	b2db      	uxtb	r3, r3
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffec 	bl	800152c <lfs_tag_chunk>
 8001554:	4603      	mov	r3, r0
 8001556:	b25b      	sxtb	r3, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0a9b      	lsrs	r3, r3, #10
 800156c:	b29b      	uxth	r3, r3
 800156e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001572:	b29b      	uxth	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff8f 	bl	80014c6 <lfs_tag_isdelete>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ffe5 	bl	8001580 <lfs_tag_size>
 80015b6:	4603      	mov	r3, r0
 80015b8:	3304      	adds	r3, #4
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e012      	b.n	80015f8 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	6819      	ldr	r1, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4403      	add	r3, r0
 80015ee:	404a      	eors	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	dde9      	ble.n	80015d2 <lfs_gstate_xor+0x10>
    }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e00b      	b.n	8001632 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <lfs_gstate_iszero+0x20>
            return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e006      	b.n	800163a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b02      	cmp	r3, #2
 8001636:	ddf0      	ble.n	800161a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff94 	bl	8001580 <lfs_tag_size>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff81 	bl	8001580 <lfs_tag_size>
 800167e:	4603      	mov	r3, r0
 8001680:	b2db      	uxtb	r3, r3
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff28 	bl	80014ec <lfs_tag_type1>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff14 	bl	80014ec <lfs_tag_type1>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <lfs_gstate_hasmovehere+0x30>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fe5f 	bl	8001394 <lfs_pair_cmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <lfs_gstate_hasmovehere+0x30>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <lfs_gstate_hasmovehere+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fa87 	bl	8000c10 <lfs_fromle32>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fa7f 	bl	8000c10 <lfs_fromle32>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa77 	bl	8000c10 <lfs_fromle32>
 8001722:	4602      	mov	r2, r0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	609a      	str	r2, [r3, #8]
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa72 	bl	8000c26 <lfs_tole32>
 8001742:	4602      	mov	r2, r0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fa6a 	bl	8000c26 <lfs_tole32>
 8001752:	4602      	mov	r2, r0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fa62 	bl	8000c26 <lfs_tole32>
 8001762:	4602      	mov	r2, r0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fa47 	bl	8000c10 <lfs_fromle32>
 8001782:	4602      	mov	r2, r0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fa3f 	bl	8000c10 <lfs_fromle32>
 8001792:	4602      	mov	r2, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fa3a 	bl	8000c26 <lfs_tole32>
 80017b2:	4602      	mov	r2, r0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fa32 	bl	8000c26 <lfs_tole32>
 80017c2:	4602      	mov	r2, r0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fa17 	bl	8000c10 <lfs_fromle32>
 80017e2:	4602      	mov	r2, r0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa0f 	bl	8000c10 <lfs_fromle32>
 80017f2:	4602      	mov	r2, r0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fa07 	bl	8000c10 <lfs_fromle32>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f9ff 	bl	8000c10 <lfs_fromle32>
 8001812:	4602      	mov	r2, r0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff f9f7 	bl	8000c10 <lfs_fromle32>
 8001822:	4602      	mov	r2, r0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f9ef 	bl	8000c10 <lfs_fromle32>
 8001832:	4602      	mov	r2, r0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	615a      	str	r2, [r3, #20]
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	e009      	b.n	8001864 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d101      	bne.n	800185e <lfs_mlist_isopen+0x1e>
            return true;
 800185a:	2301      	movs	r3, #1
 800185c:	e007      	b.n	800186e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f1      	bne.n	8001850 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3328      	adds	r3, #40	@ 0x28
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e00d      	b.n	80018a8 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d105      	bne.n	80018a2 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]
            break;
 80018a0:	e007      	b.n	80018b2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ed      	bne.n	800188c <lfs_mlist_remove+0x12>
        }
    }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4413      	add	r3, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001904:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8001906:	fbb3 f1f2 	udiv	r1, r3, r2
 800190a:	fb01 f202 	mul.w	r2, r1, r2
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	429a      	cmp	r2, r3
 800191a:	d212      	bcs.n	8001942 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	009a      	lsls	r2, r3, #2
 8001926:	440a      	add	r2, r1
 8001928:	6811      	ldr	r1, [r2, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4403      	add	r3, r0
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->free.i = 0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ack(lfs);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffe4 	bl	8001950 <lfs_alloc_ack>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800199a:	e04f      	b.n	8001a3c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->free.ack -= 1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	661a      	str	r2, [r3, #96]	@ 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d132      	bne.n	8001a3c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4413      	add	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019e2:	6a12      	ldr	r2, [r2, #32]
 80019e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019e8:	fb01 f202 	mul.w	r2, r1, r2
 80019ec:	1a9a      	subs	r2, r3, r2
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80019f2:	e009      	b.n	8001a08 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->free.ack -= 1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	661a      	str	r2, [r3, #96]	@ 0x60
                while (lfs->free.i != lfs->free.size &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d011      	beq.n	8001a38 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1dd      	bne.n	80019f4 <lfs_alloc+0x64>
                }

                return 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e050      	b.n	8001ade <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1a9      	bne.n	800199c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10f      	bne.n	8001a70 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <lfs_alloc+0x158>)
 8001a5c:	9200      	str	r2, [sp, #0]
 8001a5e:	f240 2247 	movw	r2, #583	@ 0x247
 8001a62:	4922      	ldr	r1, [pc, #136]	@ (8001aec <lfs_alloc+0x15c>)
 8001a64:	4822      	ldr	r0, [pc, #136]	@ (8001af0 <lfs_alloc+0x160>)
 8001a66:	f008 fa5b 	bl	8009f20 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001a6a:	f06f 031b 	mvn.w	r3, #27
 8001a6e:	e036      	b.n	8001ade <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a7e:	6a12      	ldr	r2, [r2, #32]
 8001a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a84:	fb01 f202 	mul.w	r2, r1, r2
 8001a88:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	00da      	lsls	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	f7ff f847 	bl	8000b30 <lfs_min>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	659a      	str	r2, [r3, #88]	@ 0x58
        lfs->free.i = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	65da      	str	r2, [r3, #92]	@ 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2100      	movs	r1, #0
 8001abc:	f008 fa80 	bl	8009fc0 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	490b      	ldr	r1, [pc, #44]	@ (8001af4 <lfs_alloc+0x164>)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f004 fd30 	bl	800652c <lfs_fs_rawtraverse>
 8001acc:	60f8      	str	r0, [r7, #12]
        if (err) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f43f af62 	beq.w	800199a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff49 	bl	800196e <lfs_alloc_drop>
            return err;
 8001adc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	0800acf8 	.word	0x0800acf8
 8001aec:	0800ac04 	.word	0x0800ac04
 8001af0:	0800acd0 	.word	0x0800acd0
 8001af4:	080018e3 	.word	0x080018e3

08001af8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b08f      	sub	sp, #60	@ 0x3c
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	333c      	adds	r3, #60	@ 0x3c
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fdc6 	bl	80016b0 <lfs_gstate_hasmovehere>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80ba 	beq.w	8001ca0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fd17 	bl	8001560 <lfs_tag_id>
 8001b32:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80b3 	beq.w	8001ca0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fd0e 	bl	8001560 <lfs_tag_id>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461c      	mov	r4, r3
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff fd09 	bl	8001560 <lfs_tag_id>
 8001b4e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001b50:	429c      	cmp	r4, r3
 8001b52:	f200 80a5 	bhi.w	8001ca0 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001b5c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001b5e:	e09f      	b.n	8001ca0 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fd19 	bl	800159a <lfs_tag_dsize>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001b74:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	9203      	str	r2, [sp, #12]
 8001b7e:	f107 0210 	add.w	r2, r7, #16
 8001b82:	9202      	str	r2, [sp, #8]
 8001b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b86:	9201      	str	r2, [sp, #4]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	2100      	movs	r1, #0
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff f8a9 	bl	8000ce8 <lfs_bd_read>
 8001b96:	61b8      	str	r0, [r7, #24]
        if (err) {
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <lfs_dir_getslice+0xaa>
            return err;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	e08a      	b.n	8001cb8 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f84a 	bl	8000c3e <lfs_frombe32>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	4053      	eors	r3, r2
 8001bb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bb4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fcd2 	bl	8001560 <lfs_tag_id>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d02b      	beq.n	8001c1a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bc2:	69f8      	ldr	r0, [r7, #28]
 8001bc4:	f7ff fc92 	bl	80014ec <lfs_tag_type1>
 8001bc8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bce:	d124      	bne.n	8001c1a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001bd0:	69f8      	ldr	r0, [r7, #28]
 8001bd2:	f7ff fcc5 	bl	8001560 <lfs_tag_id>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461c      	mov	r4, r3
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fcbd 	bl	8001560 <lfs_tag_id>
 8001be6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001be8:	429c      	cmp	r4, r3
 8001bea:	d816      	bhi.n	8001c1a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	1ad2      	subs	r2, r2, r3
 8001bf2:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <lfs_dir_getslice+0x1c8>)
 8001bf4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001bf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d102      	bne.n	8001c0a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001c04:	f06f 0301 	mvn.w	r3, #1
 8001c08:	e056      	b.n	8001cb8 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001c0a:	69f8      	ldr	r0, [r7, #28]
 8001c0c:	f7ff fc9b 	bl	8001546 <lfs_tag_splice>
 8001c10:	4603      	mov	r3, r0
 8001c12:	029a      	lsls	r2, r3, #10
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	4413      	add	r3, r2
 8001c18:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	1ac9      	subs	r1, r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	400b      	ands	r3, r1
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d138      	bne.n	8001ca0 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8001c2e:	69f8      	ldr	r0, [r7, #28]
 8001c30:	f7ff fc49 	bl	80014c6 <lfs_tag_isdelete>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8001c3a:	f06f 0301 	mvn.w	r3, #1
 8001c3e:	e03b      	b.n	8001cb8 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001c40:	69f8      	ldr	r0, [r7, #28]
 8001c42:	f7ff fc9d 	bl	8001580 <lfs_tag_size>
 8001c46:	4603      	mov	r3, r0
 8001c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe ff70 	bl	8000b30 <lfs_min>
 8001c50:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001c52:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c5c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001c5e:	3204      	adds	r2, #4
 8001c60:	6979      	ldr	r1, [r7, #20]
 8001c62:	9103      	str	r1, [sp, #12]
 8001c64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c66:	9102      	str	r1, [sp, #8]
 8001c68:	9201      	str	r2, [sp, #4]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	4602      	mov	r2, r0
 8001c70:	2100      	movs	r1, #0
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7ff f838 	bl	8000ce8 <lfs_bd_read>
 8001c78:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <lfs_dir_getslice+0x18c>
                return err;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	e019      	b.n	8001cb8 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001c84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	18d0      	adds	r0, r2, r3
 8001c8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	f008 f994 	bl	8009fc0 <memset>

            return tag + gdiff;
 8001c98:	6a3a      	ldr	r2, [r7, #32]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	e00b      	b.n	8001cb8 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fc79 	bl	800159a <lfs_tag_dsize>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	3304      	adds	r3, #4
 8001cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	f4bf af56 	bcs.w	8001b60 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001cb4:	f06f 0301 	mvn.w	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	372c      	adds	r7, #44	@ 0x2c
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	000ffc00 	.word	0x000ffc00

08001cc4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af04      	add	r7, sp, #16
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f7ff fc54 	bl	8001580 <lfs_tag_size>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7ff ff04 	bl	8001af8 <lfs_dir_getslice>
 8001cf0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b08c      	sub	sp, #48	@ 0x30
 8001cfe:	af04      	add	r7, sp, #16
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d10:	441a      	add	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f240 80c0 	bls.w	8001e9e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001d1e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8001d22:	e0c1      	b.n	8001ea8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d26:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03f      	beq.n	8001dae <lfs_dir_getread+0xb4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f113 0f02 	cmn.w	r3, #2
 8001d36:	d13a      	bne.n	8001dae <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d232      	bcs.n	8001dae <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d324      	bcc.n	8001d9c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5c:	1acb      	subs	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	69b8      	ldr	r0, [r7, #24]
 8001d64:	f7fe fee4 	bl	8000b30 <lfs_min>
 8001d68:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d74:	1acb      	subs	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	69f8      	ldr	r0, [r7, #28]
 8001d7e:	f008 f964 	bl	800a04a <memcpy>

                data += diff;
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	4413      	add	r3, r2
 8001d88:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001d8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001d92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001d9a:	e080      	b.n	8001e9e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	4619      	mov	r1, r3
 8001da6:	69b8      	ldr	r0, [r7, #24]
 8001da8:	f7fe fec2 	bl	8000b30 <lfs_min>
 8001dac:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f113 0f02 	cmn.w	r3, #2
 8001db6:	d13a      	bne.n	8001e2e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001dc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d232      	bcs.n	8001e2e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d324      	bcc.n	8001e1c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6859      	ldr	r1, [r3, #4]
 8001dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ddc:	1acb      	subs	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	69b8      	ldr	r0, [r7, #24]
 8001de4:	f7fe fea4 	bl	8000b30 <lfs_min>
 8001de8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001df4:	1acb      	subs	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	69f8      	ldr	r0, [r7, #28]
 8001dfe:	f008 f924 	bl	800a04a <memcpy>

                data += diff;
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	4413      	add	r3, r2
 8001e08:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001e0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	4413      	add	r3, r2
 8001e10:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001e12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001e1a:	e040      	b.n	8001e9e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	69b8      	ldr	r0, [r7, #24]
 8001e28:	f7fe fe82 	bl	8000b30 <lfs_min>
 8001e2c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f06f 0201 	mvn.w	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e40:	f7fe fe86 	bl	8000b50 <lfs_aligndown>
 8001e44:	4602      	mov	r2, r0
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4e:	441a      	add	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f7fe fe8e 	bl	8000b7a <lfs_alignup>
 8001e5e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f7fe fe61 	bl	8000b30 <lfs_min>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	6889      	ldr	r1, [r1, #8]
 8001e80:	9102      	str	r1, [sp, #8]
 8001e82:	9201      	str	r2, [sp, #4]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7ff fe33 	bl	8001af8 <lfs_dir_getslice>
 8001e92:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da01      	bge.n	8001e9e <lfs_dir_getread+0x1a4>
            return err;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	e004      	b.n	8001ea8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f47f af3f 	bne.w	8001d24 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <lfs_dir_traverse_filter+0x1e>
 8001eca:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <lfs_dir_traverse_filter+0xac>)
 8001ecc:	e000      	b.n	8001ed0 <lfs_dir_traverse_filter+0x20>
 8001ece:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ed0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	405a      	eors	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d014      	beq.n	8001f0c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff faed 	bl	80014c6 <lfs_tag_isdelete>
 8001eec:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	@ (8001f5c <lfs_dir_traverse_filter+0xac>)
 8001ef6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <lfs_dir_traverse_filter+0xb4>)
 8001efe:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001f00:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8001f04:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d104      	bne.n	8001f16 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
        return true;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01e      	b.n	8001f54 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f7ff fae8 	bl	80014ec <lfs_tag_type1>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f22:	d116      	bne.n	8001f52 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001f24:	68b8      	ldr	r0, [r7, #8]
 8001f26:	f7ff fb1b 	bl	8001560 <lfs_tag_id>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fb14 	bl	8001560 <lfs_tag_id>
 8001f38:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f3a:	429c      	cmp	r4, r3
 8001f3c:	d809      	bhi.n	8001f52 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001f3e:	68b8      	ldr	r0, [r7, #8]
 8001f40:	f7ff fb01 	bl	8001546 <lfs_tag_splice>
 8001f44:	4603      	mov	r3, r0
 8001f46:	029a      	lsls	r2, r3, #10
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	441a      	add	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd90      	pop	{r4, r7, pc}
 8001f5c:	7ffffc00 	.word	0x7ffffc00
 8001f60:	700ffc00 	.word	0x700ffc00
 8001f64:	000ffc00 	.word	0x000ffc00

08001f68 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b0c1      	sub	sp, #260	@ 0x104
 8001f6c:	af04      	add	r7, sp, #16
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001f7c:	6838      	ldr	r0, [r7, #0]
 8001f7e:	f7ff fb0c 	bl	800159a <lfs_tag_dsize>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	441a      	add	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d237      	bcs.n	8002000 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8001f90:	6838      	ldr	r0, [r7, #0]
 8001f92:	f7ff fb02 	bl	800159a <lfs_tag_dsize>
 8001f96:	4602      	mov	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001f9e:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	9203      	str	r2, [sp, #12]
 8001fa8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001fac:	9202      	str	r2, [sp, #8]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	2100      	movs	r1, #0
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fe94 	bl	8000ce8 <lfs_bd_read>
 8001fc0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8001fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <lfs_dir_traverse+0x6a>
                    return err;
 8001fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fd0:	e3a6      	b.n	8002720 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fe32 	bl	8000c3e <lfs_frombe32>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4053      	eors	r3, r2
 8001fe0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fe4:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8001ff2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	e01b      	b.n	8002038 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8002000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002004:	2b00      	cmp	r3, #0
 8002006:	dd13      	ble.n	8002030 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8002008:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8002010:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800201a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800201e:	3308      	adds	r3, #8
 8002020:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8002024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002028:	3b01      	subs	r3, #1
 800202a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800202e:	e003      	b.n	8002038 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8002036:	e2a2      	b.n	800257e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8002038:	4b7e      	ldr	r3, [pc, #504]	@ (8002234 <lfs_dir_traverse+0x2cc>)
 800203a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800203e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002044:	405a      	eors	r2, r3
 8002046:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800204a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800204e:	400b      	ands	r3, r1
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 8285 	bne.w	8002562 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8002058:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800205c:	f7ff fa80 	bl	8001560 <lfs_tag_id>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80f0 	beq.w	8002248 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002068:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800206c:	2b02      	cmp	r3, #2
 800206e:	d906      	bls.n	800207e <lfs_dir_traverse+0x116>
 8002070:	4b71      	ldr	r3, [pc, #452]	@ (8002238 <lfs_dir_traverse+0x2d0>)
 8002072:	4a72      	ldr	r2, [pc, #456]	@ (800223c <lfs_dir_traverse+0x2d4>)
 8002074:	f240 314e 	movw	r1, #846	@ 0x34e
 8002078:	4871      	ldr	r0, [pc, #452]	@ (8002240 <lfs_dir_traverse+0x2d8>)
 800207a:	f007 fda1 	bl	8009bc0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800207e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002080:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002084:	4613      	mov	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	33f0      	adds	r3, #240	@ 0xf0
 800208e:	443b      	add	r3, r7
 8002090:	3b98      	subs	r3, #152	@ 0x98
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	33f0      	adds	r3, #240	@ 0xf0
 80020a4:	443b      	add	r3, r7
 80020a6:	3b94      	subs	r3, #148	@ 0x94
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020b0:	4613      	mov	r3, r2
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	33f0      	adds	r3, #240	@ 0xf0
 80020ba:	443b      	add	r3, r7
 80020bc:	3b90      	subs	r3, #144	@ 0x90
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	33f0      	adds	r3, #240	@ 0xf0
 80020d0:	443b      	add	r3, r7
 80020d2:	3b8c      	subs	r3, #140	@ 0x8c
 80020d4:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	33f0      	adds	r3, #240	@ 0xf0
 80020e8:	443b      	add	r3, r7
 80020ea:	3b88      	subs	r3, #136	@ 0x88
 80020ec:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	33f0      	adds	r3, #240	@ 0xf0
 8002100:	443b      	add	r3, r7
 8002102:	3b84      	subs	r3, #132	@ 0x84
 8002104:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800210e:	4613      	mov	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	33f0      	adds	r3, #240	@ 0xf0
 8002118:	443b      	add	r3, r7
 800211a:	3b80      	subs	r3, #128	@ 0x80
 800211c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	33f0      	adds	r3, #240	@ 0xf0
 8002130:	443b      	add	r3, r7
 8002132:	3b7c      	subs	r3, #124	@ 0x7c
 8002134:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8002138:	801a      	strh	r2, [r3, #0]
 800213a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800213e:	4613      	mov	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	33f0      	adds	r3, #240	@ 0xf0
 8002148:	443b      	add	r3, r7
 800214a:	3b7a      	subs	r3, #122	@ 0x7a
 800214c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	33f0      	adds	r3, #240	@ 0xf0
 8002160:	443b      	add	r3, r7
 8002162:	3b78      	subs	r3, #120	@ 0x78
 8002164:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8002168:	801a      	strh	r2, [r3, #0]
 800216a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	33f0      	adds	r3, #240	@ 0xf0
 8002178:	443b      	add	r3, r7
 800217a:	3b74      	subs	r3, #116	@ 0x74
 800217c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	33f0      	adds	r3, #240	@ 0xf0
 8002190:	443b      	add	r3, r7
 8002192:	3b70      	subs	r3, #112	@ 0x70
 8002194:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	33f0      	adds	r3, #240	@ 0xf0
 80021a8:	443b      	add	r3, r7
 80021aa:	3b6c      	subs	r3, #108	@ 0x6c
 80021ac:	6019      	str	r1, [r3, #0]
 80021ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	33f0      	adds	r3, #240	@ 0xf0
 80021bc:	443b      	add	r3, r7
 80021be:	3b68      	subs	r3, #104	@ 0x68
 80021c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	33f0      	adds	r3, #240	@ 0xf0
 80021d4:	443b      	add	r3, r7
 80021d6:	3b68      	subs	r3, #104	@ 0x68
 80021d8:	3304      	adds	r3, #4
 80021da:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80021de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80021e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021ea:	3301      	adds	r3, #1
 80021ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <lfs_dir_traverse+0x2dc>)
 8002210:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 8002214:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	3328      	adds	r3, #40	@ 0x28
 8002228:	440b      	add	r3, r1
 800222a:	3304      	adds	r3, #4
 800222c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8002230:	e19e      	b.n	8002570 <lfs_dir_traverse+0x608>
 8002232:	bf00      	nop
 8002234:	7ff00000 	.word	0x7ff00000
 8002238:	0800acfc 	.word	0x0800acfc
 800223c:	0800b594 	.word	0x0800b594
 8002240:	0800ac04 	.word	0x0800ac04
 8002244:	08001eb1 	.word	0x08001eb1
            }
        }

popped:
 8002248:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800224a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800224e:	f7ff f987 	bl	8001560 <lfs_tag_id>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f980 	bl	8001560 <lfs_tag_id>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002264:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8002268:	4293      	cmp	r3, r2
 800226a:	f200 817c 	bhi.w	8002566 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800226e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f975 	bl	8001560 <lfs_tag_id>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800227e:	4293      	cmp	r3, r2
 8002280:	f240 8171 	bls.w	8002566 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f940 	bl	800150c <lfs_tag_type3>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	f43f ae74 	beq.w	8001f7c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f938 	bl	800150c <lfs_tag_type3>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	f240 1301 	movw	r3, #257	@ 0x101
 80022a4:	429a      	cmp	r2, r3
 80022a6:	f040 80e0 	bne.w	800246a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80022aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022ae:	4ab1      	ldr	r2, [pc, #708]	@ (8002574 <lfs_dir_traverse+0x60c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	f000 815a 	beq.w	800256a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80022b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	33f0      	adds	r3, #240	@ 0xf0
 80022c4:	443b      	add	r3, r7
 80022c6:	3b98      	subs	r3, #152	@ 0x98
 80022c8:	4618      	mov	r0, r3
 80022ca:	233c      	movs	r3, #60	@ 0x3c
 80022cc:	461a      	mov	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f007 fe76 	bl	8009fc0 <memset>
 80022d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	33f0      	adds	r3, #240	@ 0xf0
 80022e2:	443b      	add	r3, r7
 80022e4:	3b98      	subs	r3, #152	@ 0x98
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	33f0      	adds	r3, #240	@ 0xf0
 80022f8:	443b      	add	r3, r7
 80022fa:	3b94      	subs	r3, #148	@ 0x94
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	33f0      	adds	r3, #240	@ 0xf0
 800230e:	443b      	add	r3, r7
 8002310:	3b90      	subs	r3, #144	@ 0x90
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	33f0      	adds	r3, #240	@ 0xf0
 8002324:	443b      	add	r3, r7
 8002326:	3b8c      	subs	r3, #140	@ 0x8c
 8002328:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	33f0      	adds	r3, #240	@ 0xf0
 800233c:	443b      	add	r3, r7
 800233e:	3b88      	subs	r3, #136	@ 0x88
 8002340:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	33f0      	adds	r3, #240	@ 0xf0
 8002354:	443b      	add	r3, r7
 8002356:	3b84      	subs	r3, #132	@ 0x84
 8002358:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	33f0      	adds	r3, #240	@ 0xf0
 800236c:	443b      	add	r3, r7
 800236e:	3b80      	subs	r3, #128	@ 0x80
 8002370:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	33f0      	adds	r3, #240	@ 0xf0
 8002384:	443b      	add	r3, r7
 8002386:	3b7c      	subs	r3, #124	@ 0x7c
 8002388:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800238c:	801a      	strh	r2, [r3, #0]
 800238e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	33f0      	adds	r3, #240	@ 0xf0
 800239c:	443b      	add	r3, r7
 800239e:	3b7a      	subs	r3, #122	@ 0x7a
 80023a0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	33f0      	adds	r3, #240	@ 0xf0
 80023b4:	443b      	add	r3, r7
 80023b6:	3b78      	subs	r3, #120	@ 0x78
 80023b8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	33f0      	adds	r3, #240	@ 0xf0
 80023cc:	443b      	add	r3, r7
 80023ce:	3b74      	subs	r3, #116	@ 0x74
 80023d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	33f0      	adds	r3, #240	@ 0xf0
 80023e4:	443b      	add	r3, r7
 80023e6:	3b70      	subs	r3, #112	@ 0x70
 80023e8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80023ec:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80023ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80023f2:	3301      	adds	r3, #1
 80023f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80023f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f8c0 	bl	8001580 <lfs_tag_size>
 8002400:	4603      	mov	r3, r0
 8002402:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f8a9 	bl	8001560 <lfs_tag_id>
 800240e:	4603      	mov	r3, r0
 8002410:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8002414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002418:	60bb      	str	r3, [r7, #8]
            off = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002422:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002430:	4b51      	ldr	r3, [pc, #324]	@ (8002578 <lfs_dir_traverse+0x610>)
 8002432:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002436:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800243a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800243e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002442:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8002446:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800244a:	3301      	adds	r3, #1
 800244c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8002450:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8002454:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b29a      	uxth	r2, r3
 800245c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8002460:	4413      	add	r3, r2
 8002462:	b29b      	uxth	r3, r3
 8002464:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8002468:	e588      	b.n	8001f7c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800246a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f84d 	bl	800150c <lfs_tag_type3>
 8002472:	4603      	mov	r3, r0
 8002474:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002478:	d159      	bne.n	800252e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002480:	e04b      	b.n	800251a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800248a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	461a      	mov	r2, r3
 8002498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80024a4:	051c      	lsls	r4, r3, #20
 80024a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff f859 	bl	8001560 <lfs_tag_id>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80024b6:	4413      	add	r3, r2
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	ea44 0103 	orr.w	r1, r4, r3
 80024be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	461a      	mov	r2, r3
 80024cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024d0:	4413      	add	r3, r2
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80024d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	461a      	mov	r2, r3
 80024e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024e8:	4413      	add	r3, r2
 80024ea:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80024ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024f0:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80024f4:	4798      	blx	r3
 80024f6:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 80024fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da02      	bge.n	8002508 <lfs_dir_traverse+0x5a0>
                    return res;
 8002502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002506:	e10b      	b.n	8002720 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8002508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12e      	bne.n	800256e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002514:	3301      	adds	r3, #1
 8002516:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800251a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f82f 	bl	8001580 <lfs_tag_size>
 8002522:	4602      	mov	r2, r0
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002528:	4293      	cmp	r3, r2
 800252a:	d3aa      	bcc.n	8002482 <lfs_dir_traverse+0x51a>
 800252c:	e526      	b.n	8001f7c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800252e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8002532:	029a      	lsls	r2, r3, #10
 8002534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002536:	18d1      	adds	r1, r2, r3
 8002538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800253c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002540:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8002544:	4798      	blx	r3
 8002546:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800254a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800254e:	2b00      	cmp	r3, #0
 8002550:	da02      	bge.n	8002558 <lfs_dir_traverse+0x5f0>
                return res;
 8002552:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002556:	e0e3      	b.n	8002720 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8002558:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <lfs_dir_traverse+0x614>
 8002560:	e50c      	b.n	8001f7c <lfs_dir_traverse+0x14>
                continue;
 8002562:	bf00      	nop
 8002564:	e50a      	b.n	8001f7c <lfs_dir_traverse+0x14>
            continue;
 8002566:	bf00      	nop
 8002568:	e508      	b.n	8001f7c <lfs_dir_traverse+0x14>
                continue;
 800256a:	bf00      	nop
 800256c:	e506      	b.n	8001f7c <lfs_dir_traverse+0x14>
                    break;
 800256e:	bf00      	nop
        {
 8002570:	e504      	b.n	8001f7c <lfs_dir_traverse+0x14>
 8002572:	bf00      	nop
 8002574:	08001eb1 	.word	0x08001eb1
 8002578:	600ffc00 	.word	0x600ffc00
                break;
 800257c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800257e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80ca 	beq.w	800271c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002588:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	33f0      	adds	r3, #240	@ 0xf0
 8002598:	443b      	add	r3, r7
 800259a:	3b98      	subs	r3, #152	@ 0x98
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80025a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	33f0      	adds	r3, #240	@ 0xf0
 80025b0:	443b      	add	r3, r7
 80025b2:	3b94      	subs	r3, #148	@ 0x94
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80025b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	33f0      	adds	r3, #240	@ 0xf0
 80025c8:	443b      	add	r3, r7
 80025ca:	3b90      	subs	r3, #144	@ 0x90
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80025d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025d4:	1e5a      	subs	r2, r3, #1
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	33f0      	adds	r3, #240	@ 0xf0
 80025e0:	443b      	add	r3, r7
 80025e2:	3b8c      	subs	r3, #140	@ 0x8c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 80025ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025ee:	1e5a      	subs	r2, r3, #1
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	33f0      	adds	r3, #240	@ 0xf0
 80025fa:	443b      	add	r3, r7
 80025fc:	3b88      	subs	r3, #136	@ 0x88
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8002604:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	4613      	mov	r3, r2
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	33f0      	adds	r3, #240	@ 0xf0
 8002614:	443b      	add	r3, r7
 8002616:	3b84      	subs	r3, #132	@ 0x84
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800261e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	33f0      	adds	r3, #240	@ 0xf0
 800262e:	443b      	add	r3, r7
 8002630:	3b80      	subs	r3, #128	@ 0x80
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8002638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	4613      	mov	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	33f0      	adds	r3, #240	@ 0xf0
 8002648:	443b      	add	r3, r7
 800264a:	3b7c      	subs	r3, #124	@ 0x7c
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8002652:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002656:	1e5a      	subs	r2, r3, #1
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	33f0      	adds	r3, #240	@ 0xf0
 8002662:	443b      	add	r3, r7
 8002664:	3b7a      	subs	r3, #122	@ 0x7a
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800266c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	33f0      	adds	r3, #240	@ 0xf0
 800267c:	443b      	add	r3, r7
 800267e:	3b78      	subs	r3, #120	@ 0x78
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8002686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	33f0      	adds	r3, #240	@ 0xf0
 8002696:	443b      	add	r3, r7
 8002698:	3b74      	subs	r3, #116	@ 0x74
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 80026a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	33f0      	adds	r3, #240	@ 0xf0
 80026b0:	443b      	add	r3, r7
 80026b2:	3b70      	subs	r3, #112	@ 0x70
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 80026ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	33f0      	adds	r3, #240	@ 0xf0
 80026ca:	443b      	add	r3, r7
 80026cc:	3b6c      	subs	r3, #108	@ 0x6c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 80026d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	33f0      	adds	r3, #240	@ 0xf0
 80026e2:	443b      	add	r3, r7
 80026e4:	3b68      	subs	r3, #104	@ 0x68
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 80026ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	33f0      	adds	r3, #240	@ 0xf0
 80026fc:	443b      	add	r3, r7
 80026fe:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8002702:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002706:	3204      	adds	r2, #4
 8002708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800270c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002710:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002714:	3b01      	subs	r3, #1
 8002716:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800271a:	e596      	b.n	800224a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 800271c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8002720:	4618      	mov	r0, r3
 8002722:	37f4      	adds	r7, #244	@ 0xf4
 8002724:	46bd      	mov	sp, r7
 8002726:	bd90      	pop	{r4, r7, pc}

08002728 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b09f      	sub	sp, #124	@ 0x7c
 800272c:	af04      	add	r7, sp, #16
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800273a:	667b      	str	r3, [r7, #100]	@ 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	429a      	cmp	r2, r3
 8002748:	d207      	bcs.n	800275a <lfs_dir_fetchmatch+0x32>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800275a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800275e:	e342      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002760:	2300      	movs	r3, #0
 8002762:	633b      	str	r3, [r7, #48]	@ 0x30
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	@ 0x34
    int r = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; i < 2; i++) {
 800276c:	2300      	movs	r3, #0
 800276e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002770:	e052      	b.n	8002818 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8002772:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800277c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800277e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002782:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002788:	2104      	movs	r1, #4
 800278a:	9103      	str	r1, [sp, #12]
 800278c:	9202      	str	r2, [sp, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	9201      	str	r2, [sp, #4]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2304      	movs	r3, #4
 8002796:	4602      	mov	r2, r0
 8002798:	2100      	movs	r1, #0
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7fe faa4 	bl	8000ce8 <lfs_bd_read>
 80027a0:	63b8      	str	r0, [r7, #56]	@ 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80027a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	3368      	adds	r3, #104	@ 0x68
 80027a8:	443b      	add	r3, r7
 80027aa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fa2e 	bl	8000c10 <lfs_fromle32>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3368      	adds	r3, #104	@ 0x68
 80027bc:	443b      	add	r3, r7
 80027be:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 80027c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <lfs_dir_fetchmatch+0xac>
 80027c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ca:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80027ce:	d001      	beq.n	80027d4 <lfs_dir_fetchmatch+0xac>
            return err;
 80027d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d2:	e308      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 80027d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80027da:	d01a      	beq.n	8002812 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80027dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	3368      	adds	r3, #104	@ 0x68
 80027e2:	443b      	add	r3, r7
 80027e4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80027e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ea:	3301      	adds	r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	bfb8      	it	lt
 80027f4:	425b      	neglt	r3, r3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3368      	adds	r3, #104	@ 0x68
 80027fa:	443b      	add	r3, r7
 80027fc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f7fe f9f6 	bl	8000bf4 <lfs_scmp>
 8002808:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	dd01      	ble.n	8002812 <lfs_dir_fetchmatch+0xea>
            r = i;
 800280e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002810:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; i < 2; i++) {
 8002812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002814:	3301      	adds	r3, #1
 8002816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800281a:	2b01      	cmp	r3, #1
 800281c:	dda9      	ble.n	8002772 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800281e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002820:	2b00      	cmp	r3, #0
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	bfb8      	it	lt
 8002828:	425b      	neglt	r3, r3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002838:	3301      	adds	r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	bfb8      	it	lt
 8002842:	425b      	neglt	r3, r3
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002852:	2b00      	cmp	r3, #0
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	bfb8      	it	lt
 800285a:	425b      	neglt	r3, r3
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3368      	adds	r3, #104	@ 0x68
 8002860:	443b      	add	r3, r7
 8002862:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002874:	e2a3      	b.n	8002dbe <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	657b      	str	r3, [r7, #84]	@ 0x54
        lfs_tag_t ptag = 0xffffffff;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800287e:	653b      	str	r3, [r7, #80]	@ 0x50

        uint16_t tempcount = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002886:	4a96      	ldr	r2, [pc, #600]	@ (8002ae0 <lfs_dir_fetchmatch+0x3b8>)
 8002888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800288c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002890:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
        lfs_stag_t tempbesttag = besttag;
 800289a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800289c:	64bb      	str	r3, [r7, #72]	@ 0x48

        dir->rev = lfs_tole32(dir->rev);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f9bf 	bl	8000c26 <lfs_tole32>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3308      	adds	r3, #8
 80028b2:	2204      	movs	r2, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028ba:	f004 fcb5 	bl	8007228 <lfs_crc>
 80028be:	4603      	mov	r3, r0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
        dir->rev = lfs_fromle32(dir->rev);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f9a2 	bl	8000c10 <lfs_fromle32>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80028d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80028d4:	f7fe fe61 	bl	800159a <lfs_tag_dsize>
 80028d8:	4602      	mov	r2, r0
 80028da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028dc:	4413      	add	r3, r2
 80028de:	657b      	str	r3, [r7, #84]	@ 0x54
            int err = lfs_bd_read(lfs,
 80028e0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2204      	movs	r2, #4
 80028ee:	9203      	str	r2, [sp, #12]
 80028f0:	f107 0220 	add.w	r2, r7, #32
 80028f4:	9202      	str	r2, [sp, #8]
 80028f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80028f8:	9201      	str	r2, [sp, #4]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4603      	mov	r3, r0
 80028fe:	460a      	mov	r2, r1
 8002900:	2100      	movs	r1, #0
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7fe f9f0 	bl	8000ce8 <lfs_bd_read>
 8002908:	6438      	str	r0, [r7, #64]	@ 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800290a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8002910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002912:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002916:	d103      	bne.n	8002920 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	759a      	strb	r2, [r3, #22]
                    break;
 800291e:	e1d6      	b.n	8002cce <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8002920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002922:	e260      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	f107 0120 	add.w	r1, r7, #32
 800292a:	2204      	movs	r2, #4
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fc7b 	bl	8007228 <lfs_crc>
 8002932:	4603      	mov	r3, r0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe f980 	bl	8000c3e <lfs_frombe32>
 800293e:	4602      	mov	r2, r0
 8002940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002942:	4053      	eors	r3, r2
 8002944:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fdae 	bl	80014aa <lfs_tag_isvalid>
 800294e:	4603      	mov	r3, r0
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01b      	beq.n	8002992 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800295a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800295c:	f7fe fdc6 	bl	80014ec <lfs_tag_type1>
 8002960:	4603      	mov	r3, r0
 8002962:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002966:	d10d      	bne.n	8002984 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002970:	6992      	ldr	r2, [r2, #24]
 8002972:	fbb3 f1f2 	udiv	r1, r3, r2
 8002976:	fb01 f202 	mul.w	r2, r1, r2
 800297a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <lfs_dir_fetchmatch+0x25c>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <lfs_dir_fetchmatch+0x25e>
 8002984:	2300      	movs	r3, #0
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	759a      	strb	r2, [r3, #22]
                break;
 8002990:	e19d      	b.n	8002cce <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fe00 	bl	800159a <lfs_tag_dsize>
 800299a:	4602      	mov	r2, r0
 800299c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299e:	441a      	add	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d903      	bls.n	80029b2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	759a      	strb	r2, [r3, #22]
                break;
 80029b0:	e18d      	b.n	8002cce <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	653b      	str	r3, [r7, #80]	@ 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fd97 	bl	80014ec <lfs_tag_type1>
 80029be:	4603      	mov	r3, r0
 80029c0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80029c4:	d164      	bne.n	8002a90 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80029c6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029cc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029d4:	3204      	adds	r2, #4
 80029d6:	2104      	movs	r1, #4
 80029d8:	9103      	str	r1, [sp, #12]
 80029da:	f107 011c 	add.w	r1, r7, #28
 80029de:	9102      	str	r1, [sp, #8]
 80029e0:	9201      	str	r2, [sp, #4]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4623      	mov	r3, r4
 80029e6:	4602      	mov	r2, r0
 80029e8:	2100      	movs	r1, #0
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7fe f97c 	bl	8000ce8 <lfs_bd_read>
 80029f0:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80029f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80029f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029fa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80029fe:	d103      	bne.n	8002a08 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	759a      	strb	r2, [r3, #22]
                        break;
 8002a06:	e162      	b.n	8002cce <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8002a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                return err;
 8002a0a:	e1ec      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f8fe 	bl	8000c10 <lfs_fromle32>
 8002a14:	4603      	mov	r3, r0
 8002a16:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d003      	beq.n	8002a28 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	759a      	strb	r2, [r3, #22]
                    break;
 8002a26:	e152      	b.n	8002cce <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fd7e 	bl	800152c <lfs_tag_chunk>
 8002a30:	4603      	mov	r3, r0
 8002a32:	07db      	lsls	r3, r3, #31
 8002a34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a36:	4053      	eors	r3, r2
 8002a38:	653b      	str	r3, [r7, #80]	@ 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002a42:	2204      	movs	r2, #4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 fbef 	bl	8007228 <lfs_crc>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a52:	667b      	str	r3, [r7, #100]	@ 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fd9f 	bl	800159a <lfs_tag_dsize>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	441a      	add	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a6a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002a72:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002a86:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8e:	e720      	b.n	80028d2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002a90:	2304      	movs	r3, #4
 8002a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a94:	e032      	b.n	8002afc <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8002a96:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002aa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aa6:	440a      	add	r2, r1
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	9103      	str	r1, [sp, #12]
 8002aac:	f107 011b 	add.w	r1, r7, #27
 8002ab0:	9102      	str	r1, [sp, #8]
 8002ab2:	9201      	str	r2, [sp, #4]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	4602      	mov	r2, r0
 8002aba:	2100      	movs	r1, #0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7fe f913 	bl	8000ce8 <lfs_bd_read>
 8002ac2:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 8002aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002acc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002ad0:	d103      	bne.n	8002ada <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	759a      	strb	r2, [r3, #22]
 8002ad8:	e018      	b.n	8002b0c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 8002ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                return err;
 8002adc:	e183      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
 8002ade:	bf00      	nop
 8002ae0:	0800ad3c 	.word	0x0800ad3c
                }

                crc = lfs_crc(crc, &dat, 1);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	f107 011b 	add.w	r1, r7, #27
 8002aea:	2201      	movs	r2, #1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fb9b 	bl	8007228 <lfs_crc>
 8002af2:	4603      	mov	r3, r0
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af8:	3301      	adds	r3, #1
 8002afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fd4b 	bl	800159a <lfs_tag_dsize>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d3c4      	bcc.n	8002a96 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fcec 	bl	80014ec <lfs_tag_type1>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d113      	bne.n	8002b42 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fd1f 	bl	8001560 <lfs_tag_id>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	f200 8083 	bhi.w	8002c36 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fd14 	bl	8001560 <lfs_tag_id>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002b40:	e079      	b.n	8002c36 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fcd1 	bl	80014ec <lfs_tag_type1>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b50:	d134      	bne.n	8002bbc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fcf6 	bl	8001546 <lfs_tag_splice>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b62:	4413      	add	r3, r2
 8002b64:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b6a:	4ba1      	ldr	r3, [pc, #644]	@ (8002df0 <lfs_dir_fetchmatch+0x6c8>)
 8002b6c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002b6e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8002b72:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d104      	bne.n	8002b86 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 8002b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b84:	e057      	b.n	8002c36 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8002b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b8c:	d053      	beq.n	8002c36 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fce5 	bl	8001560 <lfs_tag_id>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461c      	mov	r4, r3
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fcdf 	bl	8001560 <lfs_tag_id>
 8002ba2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002ba4:	429c      	cmp	r4, r3
 8002ba6:	d846      	bhi.n	8002c36 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fccb 	bl	8001546 <lfs_tag_splice>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	029a      	lsls	r2, r3, #10
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb6:	4413      	add	r3, r2
 8002bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bba:	e03c      	b.n	8002c36 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fc94 	bl	80014ec <lfs_tag_type1>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002bca:	d134      	bne.n	8002c36 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fcac 	bl	800152c <lfs_tag_chunk>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

                err = lfs_bd_read(lfs,
 8002be6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bec:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bf4:	3204      	adds	r2, #4
 8002bf6:	2108      	movs	r1, #8
 8002bf8:	9103      	str	r1, [sp, #12]
 8002bfa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002bfe:	9102      	str	r1, [sp, #8]
 8002c00:	9201      	str	r2, [sp, #4]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4623      	mov	r3, r4
 8002c06:	4602      	mov	r2, r0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7fe f86c 	bl	8000ce8 <lfs_bd_read>
 8002c10:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8002c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c1a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002c1e:	d103      	bne.n	8002c28 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	759a      	strb	r2, [r3, #22]
                        break;
 8002c26:	e052      	b.n	8002cce <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8002c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c2a:	e0dc      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8002c2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fc06 	bl	8001442 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002c36:	6a3a      	ldr	r2, [r7, #32]
 8002c38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c3a:	405a      	eors	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f47f ae46 	bne.w	80028d2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c46:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c4c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c50:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	f107 0210 	add.w	r2, r7, #16
 8002c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c5c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002c60:	4798      	blx	r3
 8002c62:	63f8      	str	r0, [r7, #60]	@ 0x3c
                if (res < 0) {
 8002c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da09      	bge.n	8002c7e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8002c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002c70:	d103      	bne.n	8002c7a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2200      	movs	r2, #0
 8002c76:	759a      	strb	r2, [r3, #22]
 8002c78:	e029      	b.n	8002cce <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                return err;
 8002c7c:	e0b3      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c88:	e623      	b.n	80028d2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002c8a:	6a3a      	ldr	r2, [r7, #32]
 8002c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c8e:	405a      	eors	r2, r3
 8002c90:	4b58      	ldr	r3, [pc, #352]	@ (8002df4 <lfs_dir_fetchmatch+0x6cc>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9e:	e618      	b.n	80028d2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	f47f ae15 	bne.w	80028d2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fc58 	bl	8001560 <lfs_tag_id>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461c      	mov	r4, r3
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fc52 	bl	8001560 <lfs_tag_id>
 8002cbc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002cbe:	429c      	cmp	r4, r3
 8002cc0:	f63f ae07 	bhi.w	80028d2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ccc:	e601      	b.n	80028d2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d100      	bne.n	8002cd8 <lfs_dir_fetchmatch+0x5b0>
 8002cd6:	e05d      	b.n	8002d94 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	333c      	adds	r3, #60	@ 0x3c
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fce5 	bl	80016b0 <lfs_gstate_hasmovehere>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d028      	beq.n	8002d3e <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fc35 	bl	8001560 <lfs_tag_id>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fc2f 	bl	8001560 <lfs_tag_id>
 8002d02:	4603      	mov	r3, r0
 8002d04:	429c      	cmp	r4, r3
 8002d06:	d104      	bne.n	8002d12 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8002d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d10:	e015      	b.n	8002d3e <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8002d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d18:	d011      	beq.n	8002d3e <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fc1e 	bl	8001560 <lfs_tag_id>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461c      	mov	r4, r3
 8002d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fc18 	bl	8001560 <lfs_tag_id>
 8002d30:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d203      	bcs.n	8002d3e <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8002d36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d38:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002d3c:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8002d3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00f      	beq.n	8002d64 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fc0a 	bl	8001560 <lfs_tag_id>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	8a9b      	ldrh	r3, [r3, #20]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f7fd feea 	bl	8000b30 <lfs_min>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d62:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8002d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fb9f 	bl	80014aa <lfs_tag_isvalid>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8002d72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d74:	e037      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8002d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fbf1 	bl	8001560 <lfs_tag_id>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	8a9b      	ldrh	r3, [r3, #20]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d202      	bcs.n	8002d90 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8002d8a:	f06f 0301 	mvn.w	r3, #1
 8002d8e:	e02a      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e028      	b.n	8002de6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe facc 	bl	8001334 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8002d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d9e:	3301      	adds	r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	bfb8      	it	lt
 8002da8:	425b      	neglt	r3, r3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	3368      	adds	r3, #104	@ 0x68
 8002dae:	443b      	add	r3, r7
 8002db0:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002db8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dba:	3301      	adds	r3, #1
 8002dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	f77f ad58 	ble.w	8002876 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	490a      	ldr	r1, [pc, #40]	@ (8002df8 <lfs_dir_fetchmatch+0x6d0>)
 8002dd0:	9101      	str	r1, [sp, #4]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8002dda:	4908      	ldr	r1, [pc, #32]	@ (8002dfc <lfs_dir_fetchmatch+0x6d4>)
 8002ddc:	4808      	ldr	r0, [pc, #32]	@ (8002e00 <lfs_dir_fetchmatch+0x6d8>)
 8002dde:	f007 f89f 	bl	8009f20 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002de2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	376c      	adds	r7, #108	@ 0x6c
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
 8002dee:	bf00      	nop
 8002df0:	000ffc00 	.word	0x000ffc00
 8002df4:	7ffffc00 	.word	0x7ffffc00
 8002df8:	0800acf8 	.word	0x0800acf8
 8002dfc:	0800ac04 	.word	0x0800ac04
 8002e00:	0800ad04 	.word	0x0800ad04

08002e04 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af04      	add	r7, sp, #16
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002e10:	2300      	movs	r3, #0
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	2300      	movs	r3, #0
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff fc7c 	bl	8002728 <lfs_dir_fetchmatch>
 8002e30:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	@ 0x28
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <lfs_dir_getgstate+0x5c>)
 8002e50:	4a12      	ldr	r2, [pc, #72]	@ (8002e9c <lfs_dir_getgstate+0x60>)
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7fe ff35 	bl	8001cc4 <lfs_dir_get>
 8002e5a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	da05      	bge.n	8002e6e <lfs_dir_getgstate+0x32>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f113 0f02 	cmn.w	r3, #2
 8002e68:	d001      	beq.n	8002e6e <lfs_dir_getgstate+0x32>
        return res;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	e00f      	b.n	8002e8e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f113 0f02 	cmn.w	r3, #2
 8002e74:	d00a      	beq.n	8002e8c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002e76:	f107 0310 	add.w	r3, r7, #16
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fc38 	bl	80016f0 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fb9b 	bl	80015c2 <lfs_gstate_xor>
    }

    return 0;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	7ff0000c 	.word	0x7ff0000c
 8002e9c:	7ff00000 	.word	0x7ff00000

08002ea0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b08f      	sub	sp, #60	@ 0x3c
 8002ea4:	af04      	add	r7, sp, #16
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	689c      	ldr	r4, [r3, #8]
 8002ebe:	68b8      	ldr	r0, [r7, #8]
 8002ec0:	f7fe fb5e 	bl	8001580 <lfs_tag_size>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7fd fe31 	bl	8000b30 <lfs_min>
 8002ece:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002ed0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8002eda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002edc:	6849      	ldr	r1, [r1, #4]
 8002ede:	69b8      	ldr	r0, [r7, #24]
 8002ee0:	9003      	str	r0, [sp, #12]
 8002ee2:	9102      	str	r1, [sp, #8]
 8002ee4:	9201      	str	r2, [sp, #4]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4622      	mov	r2, r4
 8002eec:	2100      	movs	r1, #0
 8002eee:	6a38      	ldr	r0, [r7, #32]
 8002ef0:	f7fe f83e 	bl	8000f70 <lfs_bd_cmp>
 8002ef4:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <lfs_dir_find_match+0x60>
        return res;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	e014      	b.n	8002f2a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	689c      	ldr	r4, [r3, #8]
 8002f04:	68b8      	ldr	r0, [r7, #8]
 8002f06:	f7fe fb3b 	bl	8001580 <lfs_tag_size>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	d00b      	beq.n	8002f28 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	689c      	ldr	r4, [r3, #8]
 8002f14:	68b8      	ldr	r0, [r7, #8]
 8002f16:	f7fe fb33 	bl	8001580 <lfs_tag_size>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	d201      	bcs.n	8002f24 <lfs_dir_find_match+0x84>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e002      	b.n	8002f2a <lfs_dir_find_match+0x8a>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e000      	b.n	8002f2a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	372c      	adds	r7, #44	@ 0x2c
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
	...

08002f34 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b093      	sub	sp, #76	@ 0x4c
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002f54:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002f56:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <lfs_dir_find+0x1dc>)
 8002f58:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1a      	ldr	r2, [r3, #32]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002f6a:	496a      	ldr	r1, [pc, #424]	@ (8003114 <lfs_dir_find+0x1e0>)
 8002f6c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f6e:	f007 f807 	bl	8009f80 <strspn>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f76:	4413      	add	r3, r2
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002f7a:	4966      	ldr	r1, [pc, #408]	@ (8003114 <lfs_dir_find+0x1e0>)
 8002f7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f7e:	f006 ffee 	bl	8009f5e <strcspn>
 8002f82:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <lfs_dir_find+0x62>
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	4b62      	ldr	r3, [pc, #392]	@ (8003118 <lfs_dir_find+0x1e4>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d00a      	beq.n	8002fac <lfs_dir_find+0x78>
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d10c      	bne.n	8002fb6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	495f      	ldr	r1, [pc, #380]	@ (800311c <lfs_dir_find+0x1e8>)
 8002fa0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002fa2:	f006 fffd 	bl	8009fa0 <memcmp>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <lfs_dir_find+0x82>
            name += namelen;
 8002fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	4413      	add	r3, r2
 8002fb2:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8002fb4:	e7d9      	b.n	8002f6a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	4413      	add	r3, r2
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002fc2:	4954      	ldr	r1, [pc, #336]	@ (8003114 <lfs_dir_find+0x1e0>)
 8002fc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fc6:	f006 ffdb 	bl	8009f80 <strspn>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fce:	4413      	add	r3, r2
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 8002fd2:	4950      	ldr	r1, [pc, #320]	@ (8003114 <lfs_dir_find+0x1e0>)
 8002fd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fd6:	f006 ffc2 	bl	8009f5e <strcspn>
 8002fda:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01d      	beq.n	800301e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d112      	bne.n	800300e <lfs_dir_find+0xda>
 8002fe8:	2202      	movs	r2, #2
 8002fea:	494c      	ldr	r1, [pc, #304]	@ (800311c <lfs_dir_find+0x1e8>)
 8002fec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fee:	f006 ffd7 	bl	8009fa0 <memcmp>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <lfs_dir_find+0xda>
                depth -= 1;
 8002ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8002ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	4413      	add	r3, r2
 800300a:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800300c:	e7ad      	b.n	8002f6a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	3301      	adds	r3, #1
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8003014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	4413      	add	r3, r2
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800301c:	e7d1      	b.n	8002fc2 <lfs_dir_find+0x8e>
                break;
 800301e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <lfs_dir_find+0xf8>
            return tag;
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	e06c      	b.n	8003106 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003030:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fa69 	bl	800150c <lfs_tag_type3>
 800303a:	4603      	mov	r3, r0
 800303c:	2b02      	cmp	r3, #2
 800303e:	d002      	beq.n	8003046 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8003040:	f06f 0313 	mvn.w	r3, #19
 8003044:	e05f      	b.n	8003106 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8003046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fa89 	bl	8001560 <lfs_tag_id>
 800304e:	4603      	mov	r3, r0
 8003050:	461a      	mov	r2, r3
 8003052:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8003056:	429a      	cmp	r2, r3
 8003058:	d01c      	beq.n	8003094 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fa7f 	bl	8001560 <lfs_tag_id>
 8003062:	4603      	mov	r3, r0
 8003064:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003066:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800306a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003072:	9200      	str	r2, [sp, #0]
 8003074:	4a2a      	ldr	r2, [pc, #168]	@ (8003120 <lfs_dir_find+0x1ec>)
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7fe fe23 	bl	8001cc4 <lfs_dir_get>
 800307e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da01      	bge.n	800308a <lfs_dir_find+0x156>
                return res;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	e03d      	b.n	8003106 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	3318      	adds	r3, #24
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe f9d7 	bl	8001442 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800309a:	212f      	movs	r1, #47	@ 0x2f
 800309c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800309e:	f006 ff51 	bl	8009f44 <strchr>
 80030a2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <lfs_dir_find+0x178>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	e000      	b.n	80030ae <lfs_dir_find+0x17a>
 80030ac:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	613a      	str	r2, [r7, #16]
 80030b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030b4:	617a      	str	r2, [r7, #20]
 80030b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80030ba:	f107 0210 	add.w	r2, r7, #16
 80030be:	9203      	str	r2, [sp, #12]
 80030c0:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <lfs_dir_find+0x1f0>)
 80030c2:	9202      	str	r2, [sp, #8]
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 80030ce:	4622      	mov	r2, r4
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff fb28 	bl	8002728 <lfs_dir_fetchmatch>
 80030d8:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da01      	bge.n	80030e4 <lfs_dir_find+0x1b0>
                return tag;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	e010      	b.n	8003106 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80030ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	4413      	add	r3, r2
 80030f0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80030f2:	e73a      	b.n	8002f6a <lfs_dir_find+0x36>
            if (!dir->split) {
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	7ddb      	ldrb	r3, [r3, #23]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0c8      	beq.n	8003094 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8003102:	f06f 0301 	mvn.w	r3, #1
    }
}
 8003106:	4618      	mov	r0, r3
 8003108:	373c      	adds	r7, #60	@ 0x3c
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}
 800310e:	bf00      	nop
 8003110:	002ffc00 	.word	0x002ffc00
 8003114:	0800ad44 	.word	0x0800ad44
 8003118:	0800ad48 	.word	0x0800ad48
 800311c:	0800ad4c 	.word	0x0800ad4c
 8003120:	700ffc00 	.word	0x700ffc00
 8003124:	08002ea1 	.word	0x08002ea1

08003128 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b08b      	sub	sp, #44	@ 0x2c
 800312c:	af04      	add	r7, sp, #16
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f103 0010 	add.w	r0, r3, #16
 800313c:	68fc      	ldr	r4, [r7, #12]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	6852      	ldr	r2, [r2, #4]
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	9103      	str	r1, [sp, #12]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	9102      	str	r1, [sp, #8]
 800314e:	9201      	str	r2, [sp, #4]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2300      	movs	r3, #0
 8003154:	4622      	mov	r2, r4
 8003156:	4601      	mov	r1, r0
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7fe f80b 	bl	8001174 <lfs_bd_prog>
 800315e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <lfs_dir_commitprog+0x42>
        return err;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	e010      	b.n	800318c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f004 f858 	bl	8007228 <lfs_crc>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	441a      	add	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	605a      	str	r2, [r3, #4]
    return 0;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}

08003194 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b08f      	sub	sp, #60	@ 0x3c
 8003198:	af04      	add	r7, sp, #16
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe f9f9 	bl	800159a <lfs_tag_dsize>
 80031a8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	441a      	add	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d902      	bls.n	80031c0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80031ba:	f06f 031b 	mvn.w	r3, #27
 80031be:	e065      	b.n	800328c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4053      	eors	r3, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd fd42 	bl	8000c56 <lfs_tobe32>
 80031d2:	4603      	mov	r3, r0
 80031d4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80031d6:	f107 0214 	add.w	r2, r7, #20
 80031da:	2304      	movs	r3, #4
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff ffa2 	bl	8003128 <lfs_dir_commitprog>
 80031e4:	61f8      	str	r0, [r7, #28]
    if (err) {
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <lfs_dir_commitattr+0x5c>
        return err;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	e04d      	b.n	800328c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0c      	blt.n	8003210 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	3b04      	subs	r3, #4
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff ff92 	bl	8003128 <lfs_dir_commitprog>
 8003204:	61f8      	str	r0, [r7, #28]
        if (err) {
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d039      	beq.n	8003280 <lfs_dir_commitattr+0xec>
            return err;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	e03d      	b.n	800328c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
 8003218:	e02d      	b.n	8003276 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800321a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003222:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800322c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322e:	440a      	add	r2, r1
 8003230:	2101      	movs	r1, #1
 8003232:	9103      	str	r1, [sp, #12]
 8003234:	f107 0113 	add.w	r1, r7, #19
 8003238:	9102      	str	r1, [sp, #8]
 800323a:	9201      	str	r2, [sp, #4]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4623      	mov	r3, r4
 8003240:	4602      	mov	r2, r0
 8003242:	2100      	movs	r1, #0
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fd fd4f 	bl	8000ce8 <lfs_bd_read>
 800324a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <lfs_dir_commitattr+0xc2>
                return err;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	e01a      	b.n	800328c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8003256:	f107 0213 	add.w	r2, r7, #19
 800325a:	2301      	movs	r3, #1
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ff62 	bl	8003128 <lfs_dir_commitprog>
 8003264:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <lfs_dir_commitattr+0xdc>
                return err;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	e00d      	b.n	800328c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	3301      	adds	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	3b04      	subs	r3, #4
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	429a      	cmp	r2, r3
 800327e:	d3cc      	bcc.n	800321a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	609a      	str	r2, [r3, #8]
    return 0;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	372c      	adds	r7, #44	@ 0x2c
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}

08003294 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b097      	sub	sp, #92	@ 0x5c
 8003298:	af04      	add	r7, sp, #16
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032aa:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7fd fc63 	bl	8000b7a <lfs_alignup>
 80032b4:	62b8      	str	r0, [r7, #40]	@ 0x28

    lfs_off_t off1 = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80032be:	e0a6      	b.n	800340e <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 80032c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fc2c 	bl	8000b30 <lfs_min>
 80032d8:	4602      	mov	r2, r0
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	4413      	add	r3, r2
 80032de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (noff < end) {
 80032e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d206      	bcs.n	80032f6 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	3b08      	subs	r3, #8
 80032ec:	4619      	mov	r1, r3
 80032ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80032f0:	f7fd fc1e 	bl	8000b30 <lfs_min>
 80032f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032fa:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2204      	movs	r2, #4
 8003304:	9203      	str	r2, [sp, #12]
 8003306:	f107 0214 	add.w	r2, r7, #20
 800330a:	9202      	str	r2, [sp, #8]
 800330c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800330e:	9201      	str	r2, [sp, #4]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2304      	movs	r3, #4
 8003314:	460a      	mov	r2, r1
 8003316:	2100      	movs	r1, #0
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd fce5 	bl	8000ce8 <lfs_bd_read>
 800331e:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <lfs_dir_commitcrc+0x9e>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800332c:	d001      	beq.n	8003332 <lfs_dir_commitcrc+0x9e>
            return err;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	e0e8      	b.n	8003504 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fc82 	bl	8000c3e <lfs_frombe32>
 800333a:	4603      	mov	r3, r0
 800333c:	43db      	mvns	r3, r3
 800333e:	0fdb      	lsrs	r3, r3, #31
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800334a:	7efb      	ldrb	r3, [r7, #27]
 800334c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003350:	051a      	lsls	r2, r3, #20
 8003352:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	1acb      	subs	r3, r1, r3
 8003358:	4313      	orrs	r3, r2
 800335a:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800335e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8003362:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4053      	eors	r3, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fc72 	bl	8000c56 <lfs_tobe32>
 8003372:	4603      	mov	r3, r0
 8003374:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f107 010c 	add.w	r1, r7, #12
 800337e:	2204      	movs	r2, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f003 ff51 	bl	8007228 <lfs_crc>
 8003386:	4602      	mov	r2, r0
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fc48 	bl	8000c26 <lfs_tole32>
 8003396:	4603      	mov	r3, r0
 8003398:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f103 0010 	add.w	r0, r3, #16
 80033a0:	687c      	ldr	r4, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	6852      	ldr	r2, [r2, #4]
 80033aa:	2108      	movs	r1, #8
 80033ac:	9103      	str	r1, [sp, #12]
 80033ae:	f107 010c 	add.w	r1, r7, #12
 80033b2:	9102      	str	r1, [sp, #8]
 80033b4:	9201      	str	r2, [sp, #4]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	4622      	mov	r2, r4
 80033bc:	4601      	mov	r1, r0
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fed8 	bl	8001174 <lfs_bd_prog>
 80033c4:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <lfs_dir_commitcrc+0x13c>
            return err;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	e099      	b.n	8003504 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80033d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe f8ca 	bl	8001580 <lfs_tag_size>
 80033ec:	4603      	mov	r3, r0
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	441a      	add	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80033fa:	7efb      	ldrb	r3, [r7, #27]
 80033fc:	07da      	lsls	r2, r3, #31
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	405a      	eors	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800340c:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003414:	429a      	cmp	r2, r3
 8003416:	f63f af53 	bhi.w	80032c0 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f103 0110 	add.w	r1, r3, #16
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	2300      	movs	r3, #0
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd fe71 	bl	800110c <lfs_bd_sync>
 800342a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <lfs_dir_commitcrc+0x1a2>
        return err;
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	e066      	b.n	8003504 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	63bb      	str	r3, [r7, #56]	@ 0x38
    lfs_off_t noff = off1;
 800343c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (off < end) {
 8003440:	e05b      	b.n	80034fa <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003446:	633b      	str	r3, [r7, #48]	@ 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800344c:	e030      	b.n	80034b0 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800344e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003452:	429a      	cmp	r2, r3
 8003454:	d106      	bne.n	8003464 <lfs_dir_commitcrc+0x1d0>
 8003456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345a:	429a      	cmp	r2, r3
 800345c:	d002      	beq.n	8003464 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800345e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003462:	e04f      	b.n	8003504 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003464:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8003466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800346c:	1d18      	adds	r0, r3, #4
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	9203      	str	r2, [sp, #12]
 8003476:	f107 020b 	add.w	r2, r7, #11
 800347a:	9202      	str	r2, [sp, #8]
 800347c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347e:	9201      	str	r2, [sp, #4]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4603      	mov	r3, r0
 8003484:	460a      	mov	r2, r1
 8003486:	2100      	movs	r1, #0
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fd fc2d 	bl	8000ce8 <lfs_bd_read>
 800348e:	6278      	str	r0, [r7, #36]	@ 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <lfs_dir_commitcrc+0x206>
                return err;
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	e034      	b.n	8003504 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800349a:	f107 030b 	add.w	r3, r7, #11
 800349e:	2201      	movs	r2, #1
 80034a0:	4619      	mov	r1, r3
 80034a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034a4:	f003 fec0 	bl	8007228 <lfs_crc>
 80034a8:	6338      	str	r0, [r7, #48]	@ 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	3301      	adds	r3, #1
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b2:	3304      	adds	r3, #4
 80034b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d3c9      	bcc.n	800344e <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80034c0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80034c4:	e01e      	b.n	8003504 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80034c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fb2d 	bl	8000b30 <lfs_min>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034da:	4413      	add	r3, r2
 80034dc:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (off < end) {
 80034de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d206      	bcs.n	80034f4 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	3b08      	subs	r3, #8
 80034ea:	4619      	mov	r1, r3
 80034ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034ee:	f7fd fb1f 	bl	8000b30 <lfs_min>
 80034f2:	63b8      	str	r0, [r7, #56]	@ 0x38
        }
        noff = off + sizeof(uint32_t);
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	3304      	adds	r3, #4
 80034f8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (off < end) {
 80034fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	429a      	cmp	r2, r3
 8003500:	d39f      	bcc.n	8003442 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	374c      	adds	r7, #76	@ 0x4c
 8003508:	46bd      	mov	sp, r7
 800350a:	bd90      	pop	{r4, r7, pc}

0800350c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	@ 0x28
 8003510:	af04      	add	r7, sp, #16
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e016      	b.n	800354a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3301      	adds	r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	bfb8      	it	lt
 8003528:	425b      	neglt	r3, r3
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe fa2c 	bl	8001990 <lfs_alloc>
 8003538:	60f8      	str	r0, [r7, #12]
        if (err) {
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <lfs_dir_alloc+0x38>
            return err;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	e058      	b.n	80035f6 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b01      	cmp	r3, #1
 800354e:	dde5      	ble.n	800351c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003560:	2004      	movs	r0, #4
 8003562:	9003      	str	r0, [sp, #12]
 8003564:	9202      	str	r2, [sp, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	9201      	str	r2, [sp, #4]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2304      	movs	r3, #4
 800356e:	460a      	mov	r2, r1
 8003570:	2100      	movs	r1, #0
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fbb8 	bl	8000ce8 <lfs_bd_read>
 8003578:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fb46 	bl	8000c10 <lfs_fromle32>
 8003584:	4602      	mov	r2, r0
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <lfs_dir_alloc+0x90>
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003596:	d001      	beq.n	800359c <lfs_dir_alloc+0x90>
        return err;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	e02c      	b.n	80035f6 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	dd0e      	ble.n	80035c4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7fd fade 	bl	8000b7a <lfs_alignup>
 80035be:	4602      	mov	r2, r0
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2204      	movs	r2, #4
 80035c8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035d0:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035de:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035e6:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2200      	movs	r2, #0
 80035f2:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3348      	adds	r3, #72	@ 0x48
 8003610:	461a      	mov	r2, r3
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff fc11 	bl	8002e3c <lfs_dir_getgstate>
 800361a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <lfs_dir_drop+0x26>
        return err;
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	e022      	b.n	800366c <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3318      	adds	r3, #24
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd ff23 	bl	8001476 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7ddb      	ldrb	r3, [r3, #23]
 8003634:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003638:	051a      	lsls	r2, r3, #20
 800363a:	4b0e      	ldr	r3, [pc, #56]	@ (8003674 <lfs_dir_drop+0x74>)
 800363c:	4313      	orrs	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3318      	adds	r3, #24
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	f107 021c 	add.w	r2, r7, #28
 800364a:	2301      	movs	r3, #1
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f001 f978 	bl	8004944 <lfs_dir_commit>
 8003654:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3318      	adds	r3, #24
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fef1 	bl	8001442 <lfs_pair_fromle32>
    if (err) {
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <lfs_dir_drop+0x6a>
        return err;
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	e000      	b.n	800366c <lfs_dir_drop+0x6c>
    }

    return 0;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3728      	adds	r7, #40	@ 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	000ffc08 	.word	0x000ffc08

08003678 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b092      	sub	sp, #72	@ 0x48
 800367c:	af04      	add	r7, sp, #16
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003686:	f107 0310 	add.w	r3, r7, #16
 800368a:	4619      	mov	r1, r3
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff3d 	bl	800350c <lfs_dir_alloc>
 8003692:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8003694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <lfs_dir_split+0x26>
        return err;
 800369a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369c:	e03c      	b.n	8003718 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	7ddb      	ldrb	r3, [r3, #23]
 80036a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80036b2:	f107 0110 	add.w	r1, r7, #16
 80036b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f87a 	bl	80037c4 <lfs_dir_compact>
 80036d0:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da01      	bge.n	80036dc <lfs_dir_split+0x64>
        return res;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	e01d      	b.n	8003718 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2201      	movs	r2, #1
 80036ec:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3320      	adds	r3, #32
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f7fd fe4c 	bl	8001394 <lfs_pair_cmp>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <lfs_dir_split+0x9e>
 8003702:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3738      	adds	r7, #56	@ 0x38
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003730:	68b8      	ldr	r0, [r7, #8]
 8003732:	f7fd ff32 	bl	800159a <lfs_tag_dsize>
 8003736:	4602      	mov	r2, r0
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	441a      	add	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	601a      	str	r2, [r3, #0]
    return 0;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f7ff fd14 	bl	8003194 <lfs_dir_commitattr>
 800376c:	4603      	mov	r3, r0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003786:	2b00      	cmp	r3, #0
 8003788:	dd11      	ble.n	80037ae <lfs_dir_needsrelocation+0x38>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	3301      	adds	r3, #1
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003796:	3201      	adds	r2, #1
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	fbb3 f1f2 	udiv	r1, r3, r2
 80037a0:	fb01 f202 	mul.w	r2, r1, r2
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <lfs_dir_needsrelocation+0x38>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <lfs_dir_needsrelocation+0x3a>
 80037ae:	2300      	movs	r3, #0
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b0a4      	sub	sp, #144	@ 0x90
 80037c8:	af0a      	add	r7, sp, #40	@ 0x28
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ffcb 	bl	8003776 <lfs_dir_needsrelocation>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80037f0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <lfs_dir_compact+0x52>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	657a      	str	r2, [r7, #84]	@ 0x54
 80037fe:	2201      	movs	r2, #1
 8003800:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003802:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fdc3 	bl	8001394 <lfs_pair_cmp>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 8155 	bne.w	8003ac0 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381c:	2300      	movs	r3, #0
 800381e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003824:	647b      	str	r3, [r7, #68]	@ 0x44
 8003826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382c:	2300      	movs	r3, #0
 800382e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <lfs_dir_compact+0x80>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800383e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003840:	3b08      	subs	r3, #8
 8003842:	e003      	b.n	800384c <lfs_dir_compact+0x88>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800384c:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4619      	mov	r1, r3
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7fd fd3b 	bl	80012d0 <lfs_bd_erase>
 800385a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800385c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003864:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003868:	f000 812c 	beq.w	8003ac4 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800386c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800386e:	e188      	b.n	8003b82 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd f9d6 	bl	8000c26 <lfs_tole32>
 800387a:	4602      	mov	r2, r0
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003886:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800388a:	2304      	movs	r3, #4
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff fc4b 	bl	8003128 <lfs_dir_commitprog>
 8003892:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd f9b9 	bl	8000c10 <lfs_fromle32>
 800389e:	4602      	mov	r2, r0
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]
            if (err) {
 80038a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80038aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ac:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80038b0:	f000 810a 	beq.w	8003ac8 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80038b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038b6:	e164      	b.n	8003b82 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80038b8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80038bc:	425b      	negs	r3, r3
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80038c6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80038ca:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 80038cc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80038d0:	9208      	str	r2, [sp, #32]
 80038d2:	4aae      	ldr	r2, [pc, #696]	@ (8003b8c <lfs_dir_compact+0x3c8>)
 80038d4:	9207      	str	r2, [sp, #28]
 80038d6:	9306      	str	r3, [sp, #24]
 80038d8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80038dc:	9305      	str	r3, [sp, #20]
 80038de:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80038e2:	9304      	str	r3, [sp, #16]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9303      	str	r3, [sp, #12]
 80038e8:	4ba9      	ldr	r3, [pc, #676]	@ (8003b90 <lfs_dir_compact+0x3cc>)
 80038ea:	9302      	str	r3, [sp, #8]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038f8:	2200      	movs	r2, #0
 80038fa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7fe fb33 	bl	8001f68 <lfs_dir_traverse>
 8003902:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8003904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d006      	beq.n	8003918 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800390a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800390c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003910:	f000 80dc 	beq.w	8003acc <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003916:	e134      	b.n	8003b82 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3318      	adds	r3, #24
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fd1e 	bl	800135e <lfs_pair_isnull>
 8003922:	4603      	mov	r3, r0
 8003924:	f083 0301 	eor.w	r3, r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d022      	beq.n	8003974 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3318      	adds	r3, #24
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd fd9f 	bl	8001476 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	7ddb      	ldrb	r3, [r3, #23]
 800393c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003940:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003942:	4a94      	ldr	r2, [pc, #592]	@ (8003b94 <lfs_dir_compact+0x3d0>)
 8003944:	431a      	orrs	r2, r3
                        dir->tail);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800394a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff fc20 	bl	8003194 <lfs_dir_commitattr>
 8003954:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3318      	adds	r3, #24
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fd71 	bl	8001442 <lfs_pair_fromle32>
                if (err) {
 8003960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003968:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800396c:	f000 80b0 	beq.w	8003ad0 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003972:	e106      	b.n	8003b82 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003980:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d011      	beq.n	80039b2 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003994:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd fe11 	bl	80015c2 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80039a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fe08 	bl	80015c2 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80039b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fdff 	bl	80015c2 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80039d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039d4:	461a      	mov	r2, r3
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fa2f 	bl	8002e3c <lfs_dir_getgstate>
 80039de:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80039e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <lfs_dir_compact+0x226>
                return err;
 80039e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e8:	e0cb      	b.n	8003b82 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80039ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd fe0c 	bl	800160c <lfs_gstate_iszero>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d016      	beq.n	8003a2e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003a00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd fe93 	bl	8001730 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003a0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a0e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003a12:	4a61      	ldr	r2, [pc, #388]	@ (8003b98 <lfs_dir_compact+0x3d4>)
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fbbd 	bl	8003194 <lfs_dir_commitattr>
 8003a1a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003a1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a24:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003a28:	d054      	beq.n	8003ad4 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a2c:	e0a9      	b.n	8003b82 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003a2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a32:	4619      	mov	r1, r3
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff fc2d 	bl	8003294 <lfs_dir_commitcrc>
 8003a3a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8003a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a44:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003a48:	d046      	beq.n	8003ad8 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a4c:	e099      	b.n	8003b82 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a54:	6992      	ldr	r2, [r2, #24]
 8003a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a5a:	fb01 f202 	mul.w	r2, r1, r2
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d006      	beq.n	8003a72 <lfs_dir_compact+0x2ae>
 8003a64:	4b4d      	ldr	r3, [pc, #308]	@ (8003b9c <lfs_dir_compact+0x3d8>)
 8003a66:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba0 <lfs_dir_compact+0x3dc>)
 8003a68:	f44f 61e9 	mov.w	r1, #1864	@ 0x748
 8003a6c:	484d      	ldr	r0, [pc, #308]	@ (8003ba4 <lfs_dir_compact+0x3e0>)
 8003a6e:	f006 f8a7 	bl	8009bc0 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fc5d 	bl	8001334 <lfs_pair_swap>
            dir->count = end - begin;
 8003a7a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8003a7e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003a90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3348      	adds	r3, #72	@ 0x48
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003aa2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d065      	beq.n	8003b7c <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	333c      	adds	r3, #60	@ 0x3c
 8003ab6:	3230      	adds	r2, #48	@ 0x30
 8003ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003abe:	e05d      	b.n	8003b7c <lfs_dir_compact+0x3b8>
        goto relocate;
 8003ac0:	bf00      	nop
 8003ac2:	e00a      	b.n	8003ada <lfs_dir_compact+0x316>
                    goto relocate;
 8003ac4:	bf00      	nop
 8003ac6:	e008      	b.n	8003ada <lfs_dir_compact+0x316>
                    goto relocate;
 8003ac8:	bf00      	nop
 8003aca:	e006      	b.n	8003ada <lfs_dir_compact+0x316>
                    goto relocate;
 8003acc:	bf00      	nop
 8003ace:	e004      	b.n	8003ada <lfs_dir_compact+0x316>
                        goto relocate;
 8003ad0:	bf00      	nop
 8003ad2:	e002      	b.n	8003ada <lfs_dir_compact+0x316>
                        goto relocate;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <lfs_dir_compact+0x316>
                    goto relocate;
 8003ad8:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3310      	adds	r3, #16
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7fd f8d8 	bl	8000c9c <lfs_cache_drop>
        if (!tired) {
 8003aec:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003af0:	f083 0301 	eor.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba8 <lfs_dir_compact+0x3e4>)
 8003b00:	9200      	str	r2, [sp, #0]
 8003b02:	f240 725a 	movw	r2, #1882	@ 0x75a
 8003b06:	4927      	ldr	r1, [pc, #156]	@ (8003ba4 <lfs_dir_compact+0x3e0>)
 8003b08:	4828      	ldr	r0, [pc, #160]	@ (8003bac <lfs_dir_compact+0x3e8>)
 8003b0a:	f006 fa09 	bl	8009f20 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	617a      	str	r2, [r7, #20]
 8003b14:	2201      	movs	r2, #1
 8003b16:	61ba      	str	r2, [r7, #24]
 8003b18:	f107 0214 	add.w	r2, r7, #20
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd fc38 	bl	8001394 <lfs_pair_cmp>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <lfs_dir_compact+0x3e4>)
 8003b30:	9200      	str	r2, [sp, #0]
 8003b32:	f240 725f 	movw	r2, #1887	@ 0x75f
 8003b36:	491b      	ldr	r1, [pc, #108]	@ (8003ba4 <lfs_dir_compact+0x3e0>)
 8003b38:	481d      	ldr	r0, [pc, #116]	@ (8003bb0 <lfs_dir_compact+0x3ec>)
 8003b3a:	f006 f9f1 	bl	8009f20 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003b3e:	f06f 031b 	mvn.w	r3, #27
 8003b42:	e01e      	b.n	8003b82 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7fd ff20 	bl	8001990 <lfs_alloc>
 8003b50:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <lfs_dir_compact+0x3ae>
 8003b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b5a:	f113 0f1c 	cmn.w	r3, #28
 8003b5e:	d106      	bne.n	8003b6e <lfs_dir_compact+0x3aa>
 8003b60:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003b64:	f083 0301 	eor.w	r3, r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <lfs_dir_compact+0x3ae>
            return err;
 8003b6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b70:	e007      	b.n	8003b82 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8003b78:	bf00      	nop
    while (true) {
 8003b7a:	e64c      	b.n	8003816 <lfs_dir_compact+0x52>
        break;
 8003b7c:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003b7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3768      	adds	r7, #104	@ 0x68
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	0800374d 	.word	0x0800374d
 8003b90:	400ffc00 	.word	0x400ffc00
 8003b94:	000ffc08 	.word	0x000ffc08
 8003b98:	7ffffc0c 	.word	0x7ffffc0c
 8003b9c:	0800ad50 	.word	0x0800ad50
 8003ba0:	0800b5a8 	.word	0x0800b5a8
 8003ba4:	0800ac04 	.word	0x0800ac04
 8003ba8:	0800acf8 	.word	0x0800acf8
 8003bac:	0800ad78 	.word	0x0800ad78
 8003bb0:	0800ad9c 	.word	0x0800ad9c

08003bb4 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b097      	sub	sp, #92	@ 0x5c
 8003bb8:	af0a      	add	r7, sp, #40	@ 0x28
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003bc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8003bc8:	e058      	b.n	8003c7c <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	4252      	negs	r2, r2
 8003bd8:	b292      	uxth	r2, r2
 8003bda:	b212      	sxth	r2, r2
 8003bdc:	f107 0118 	add.w	r1, r7, #24
 8003be0:	9108      	str	r1, [sp, #32]
 8003be2:	4979      	ldr	r1, [pc, #484]	@ (8003dc8 <lfs_dir_splittingcompact+0x214>)
 8003be4:	9107      	str	r1, [sp, #28]
 8003be6:	9206      	str	r2, [sp, #24]
 8003be8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003bec:	9205      	str	r2, [sp, #20]
 8003bee:	9304      	str	r3, [sp, #16]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9303      	str	r3, [sp, #12]
 8003bf4:	4b75      	ldr	r3, [pc, #468]	@ (8003dcc <lfs_dir_splittingcompact+0x218>)
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c04:	2200      	movs	r2, #0
 8003c06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7fe f9ad 	bl	8001f68 <lfs_dir_traverse>
 8003c0e:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <lfs_dir_splittingcompact+0x66>
                return err;
 8003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c18:	e0d1      	b.n	8003dbe <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8003c1a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2bfe      	cmp	r3, #254	@ 0xfe
 8003c24:	d822      	bhi.n	8003c6c <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f1a3 0424 	sub.w	r4, r3, #36	@ 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	e003      	b.n	8003c4c <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c48:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003c4a:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c50:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc ff90 	bl	8000b7a <lfs_alignup>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7fc ff66 	bl	8000b30 <lfs_min>
 8003c64:	4602      	mov	r2, r0
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d20e      	bcs.n	8003c8a <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003c6c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c78:	4413      	add	r3, r2
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8003c7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d8a0      	bhi.n	8003bca <lfs_dir_splittingcompact+0x16>
 8003c88:	e000      	b.n	8003c8c <lfs_dir_splittingcompact+0xd8>
                break;
 8003c8a:	bf00      	nop
        }

        if (split == begin) {
 8003c8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d02d      	beq.n	8003cf2 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c9e:	9202      	str	r2, [sp, #8]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff fce3 	bl	8003678 <lfs_dir_split>
 8003cb2:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <lfs_dir_splittingcompact+0x112>
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	f113 0f1c 	cmn.w	r3, #28
 8003cc0:	d001      	beq.n	8003cc6 <lfs_dir_splittingcompact+0x112>
            return err;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	e07b      	b.n	8003dbe <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	493e      	ldr	r1, [pc, #248]	@ (8003dd0 <lfs_dir_splittingcompact+0x21c>)
 8003cd6:	9101      	str	r1, [sp, #4]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	f240 72a9 	movw	r2, #1961	@ 0x7a9
 8003ce0:	493c      	ldr	r1, [pc, #240]	@ (8003dd4 <lfs_dir_splittingcompact+0x220>)
 8003ce2:	483d      	ldr	r0, [pc, #244]	@ (8003dd8 <lfs_dir_splittingcompact+0x224>)
 8003ce4:	f006 f91c 	bl	8009f20 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003ce8:	e004      	b.n	8003cf4 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8003cf0:	e767      	b.n	8003bc2 <lfs_dir_splittingcompact+0xe>
            break;
 8003cf2:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff fd3d 	bl	8003776 <lfs_dir_needsrelocation>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04e      	beq.n	8003da0 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2200      	movs	r2, #0
 8003d06:	613a      	str	r2, [r7, #16]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	617a      	str	r2, [r7, #20]
 8003d0c:	f107 0210 	add.w	r2, r7, #16
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd fb3e 	bl	8001394 <lfs_pair_cmp>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d140      	bne.n	8003da0 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f003 f8b8 	bl	8006e94 <lfs_fs_rawsize>
 8003d24:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	da01      	bge.n	8003d30 <lfs_dir_splittingcompact+0x17c>
            return size;
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	e046      	b.n	8003dbe <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	085a      	lsrs	r2, r3, #1
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d930      	bls.n	8003da0 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	4a23      	ldr	r2, [pc, #140]	@ (8003dd0 <lfs_dir_splittingcompact+0x21c>)
 8003d44:	9200      	str	r2, [sp, #0]
 8003d46:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8003d4a:	4922      	ldr	r1, [pc, #136]	@ (8003dd4 <lfs_dir_splittingcompact+0x220>)
 8003d4c:	4823      	ldr	r0, [pc, #140]	@ (8003ddc <lfs_dir_splittingcompact+0x228>)
 8003d4e:	f006 f8e7 	bl	8009f20 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003d52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fc85 	bl	8003678 <lfs_dir_split>
 8003d6e:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <lfs_dir_splittingcompact+0x1ce>
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f113 0f1c 	cmn.w	r3, #28
 8003d7c:	d001      	beq.n	8003d82 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	e01d      	b.n	8003dbe <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <lfs_dir_splittingcompact+0x21c>)
 8003d8a:	f240 72c7 	movw	r2, #1991	@ 0x7c7
 8003d8e:	4911      	ldr	r1, [pc, #68]	@ (8003dd4 <lfs_dir_splittingcompact+0x220>)
 8003d90:	4813      	ldr	r0, [pc, #76]	@ (8003de0 <lfs_dir_splittingcompact+0x22c>)
 8003d92:	f006 f8c5 	bl	8009f20 <iprintf>
 8003d96:	e003      	b.n	8003da0 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8003d98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003d9c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003da0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003da4:	9302      	str	r3, [sp, #8]
 8003da6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fd04 	bl	80037c4 <lfs_dir_compact>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3734      	adds	r7, #52	@ 0x34
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08003721 	.word	0x08003721
 8003dcc:	400ffc00 	.word	0x400ffc00
 8003dd0:	0800acf8 	.word	0x0800acf8
 8003dd4:	0800ac04 	.word	0x0800ac04
 8003dd8:	0800add4 	.word	0x0800add4
 8003ddc:	0800ae04 	.word	0x0800ae04
 8003de0:	0800ae34 	.word	0x0800ae34

08003de4 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003de4:	b5b0      	push	{r4, r5, r7, lr}
 8003de6:	b0a6      	sub	sp, #152	@ 0x98
 8003de8:	af0a      	add	r7, sp, #40	@ 0x28
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e00:	e06d      	b.n	8003ede <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003e02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fd fb7d 	bl	800150c <lfs_tag_type3>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	f240 4301 	movw	r3, #1025	@ 0x401
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d106      	bne.n	8003e2c <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	8a9b      	ldrh	r3, [r3, #20]
 8003e22:	3301      	adds	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	829a      	strh	r2, [r3, #20]
 8003e2a:	e055      	b.n	8003ed8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd fb68 	bl	800150c <lfs_tag_type3>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d114      	bne.n	8003e72 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	8a9b      	ldrh	r3, [r3, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <lfs_dir_relocatingcommit+0x7a>
 8003e50:	4ba4      	ldr	r3, [pc, #656]	@ (80040e4 <lfs_dir_relocatingcommit+0x300>)
 8003e52:	4aa5      	ldr	r2, [pc, #660]	@ (80040e8 <lfs_dir_relocatingcommit+0x304>)
 8003e54:	f240 71df 	movw	r1, #2015	@ 0x7df
 8003e58:	48a4      	ldr	r0, [pc, #656]	@ (80040ec <lfs_dir_relocatingcommit+0x308>)
 8003e5a:	f005 feb1 	bl	8009bc0 <__assert_func>
            dir->count -= 1;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	8a9b      	ldrh	r3, [r3, #20]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8003e70:	e032      	b.n	8003ed8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003e72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd fb35 	bl	80014ec <lfs_tag_type1>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e88:	d126      	bne.n	8003ed8 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003e8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fd fb39 	bl	800152c <lfs_tag_chunk>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fab5 	bl	8001442 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eda:	3301      	adds	r3, #1
 8003edc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ede:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	db8c      	blt.n	8003e02 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003ee8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02b      	beq.n	8003f48 <lfs_dir_relocatingcommit+0x164>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	8a9b      	ldrh	r3, [r3, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d127      	bne.n	8003f48 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <lfs_dir_relocatingcommit+0x12a>
 8003f00:	4b7b      	ldr	r3, [pc, #492]	@ (80040f0 <lfs_dir_relocatingcommit+0x30c>)
 8003f02:	4a79      	ldr	r2, [pc, #484]	@ (80040e8 <lfs_dir_relocatingcommit+0x304>)
 8003f04:	f240 71ec 	movw	r1, #2028	@ 0x7ec
 8003f08:	4878      	ldr	r0, [pc, #480]	@ (80040ec <lfs_dir_relocatingcommit+0x308>)
 8003f0a:	f005 fe59 	bl	8009bc0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003f14:	4619      	mov	r1, r3
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f002 fc2e 	bl	8006778 <lfs_fs_pred>
 8003f1c:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <lfs_dir_relocatingcommit+0x14c>
 8003f24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f26:	f113 0f02 	cmn.w	r3, #2
 8003f2a:	d001      	beq.n	8003f30 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f2e:	e204      	b.n	800433a <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003f30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f32:	f113 0f02 	cmn.w	r3, #2
 8003f36:	d007      	beq.n	8003f48 <lfs_dir_relocatingcommit+0x164>
 8003f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f3c:	7ddb      	ldrb	r3, [r3, #23]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003f42:	2302      	movs	r3, #2
 8003f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8003f46:	e121      	b.n	800418c <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	7d9b      	ldrb	r3, [r3, #22]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80fb 	beq.w	8004148 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003f56:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003f6e:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <lfs_dir_relocatingcommit+0x1a0>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f80:	3b08      	subs	r3, #8
 8003f82:	e003      	b.n	8003f8c <lfs_dir_relocatingcommit+0x1a8>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003f8c:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3318      	adds	r3, #24
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd fa6f 	bl	8001476 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8003faa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fae:	9308      	str	r3, [sp, #32]
 8003fb0:	4b50      	ldr	r3, [pc, #320]	@ (80040f4 <lfs_dir_relocatingcommit+0x310>)
 8003fb2:	9307      	str	r3, [sp, #28]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9306      	str	r3, [sp, #24]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9305      	str	r3, [sp, #20]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9304      	str	r3, [sp, #16]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9303      	str	r3, [sp, #12]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9302      	str	r3, [sp, #8]
 8003fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7fd ffc6 	bl	8001f68 <lfs_dir_traverse>
 8003fdc:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fa2d 	bl	8001442 <lfs_pair_fromle32>
        if (err) {
 8003fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff0:	f113 0f1c 	cmn.w	r3, #28
 8003ff4:	f000 80aa 	beq.w	800414c <lfs_dir_relocatingcommit+0x368>
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003ffe:	f000 80a5 	beq.w	800414c <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	e199      	b.n	800433a <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8004006:	f107 031c 	add.w	r3, r7, #28
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004018:	f107 031c 	add.w	r3, r7, #28
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd facf 	bl	80015c2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800402a:	f107 031c 	add.w	r3, r7, #28
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd fac6 	bl	80015c2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800403c:	f107 031c 	add.w	r3, r7, #28
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd fabd 	bl	80015c2 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd fad7 	bl	800160c <lfs_gstate_iszero>
 800405e:	4603      	mov	r3, r0
 8004060:	f083 0301 	eor.w	r3, r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d027      	beq.n	80040ba <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800406a:	f107 031c 	add.w	r3, r7, #28
 800406e:	461a      	mov	r2, r3
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7fe fee2 	bl	8002e3c <lfs_dir_getgstate>
 8004078:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800407a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8004080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004082:	e15a      	b.n	800433a <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd fb51 	bl	8001730 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8004096:	4a18      	ldr	r2, [pc, #96]	@ (80040f8 <lfs_dir_relocatingcommit+0x314>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff f87b 	bl	8003194 <lfs_dir_commitattr>
 800409e:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80040a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	f113 0f1c 	cmn.w	r3, #28
 80040ac:	d050      	beq.n	8004150 <lfs_dir_relocatingcommit+0x36c>
 80040ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80040b4:	d04c      	beq.n	8004150 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	e13f      	b.n	800433a <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80040ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80040be:	4619      	mov	r1, r3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff f8e7 	bl	8003294 <lfs_dir_commitcrc>
 80040c6:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 80040c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80040ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d0:	f113 0f1c 	cmn.w	r3, #28
 80040d4:	d03e      	beq.n	8004154 <lfs_dir_relocatingcommit+0x370>
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80040dc:	d03a      	beq.n	8004154 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80040de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e0:	e12b      	b.n	800433a <lfs_dir_relocatingcommit+0x556>
 80040e2:	bf00      	nop
 80040e4:	0800ae60 	.word	0x0800ae60
 80040e8:	0800b5b8 	.word	0x0800b5b8
 80040ec:	0800ac04 	.word	0x0800ac04
 80040f0:	0800ae70 	.word	0x0800ae70
 80040f4:	0800374d 	.word	0x0800374d
 80040f8:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80040fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004102:	6992      	ldr	r2, [r2, #24]
 8004104:	fbb3 f1f2 	udiv	r1, r3, r2
 8004108:	fb01 f202 	mul.w	r2, r1, r2
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <lfs_dir_relocatingcommit+0x33c>
 8004112:	4b8c      	ldr	r3, [pc, #560]	@ (8004344 <lfs_dir_relocatingcommit+0x560>)
 8004114:	4a8c      	ldr	r2, [pc, #560]	@ (8004348 <lfs_dir_relocatingcommit+0x564>)
 8004116:	f640 0136 	movw	r1, #2102	@ 0x836
 800411a:	488c      	ldr	r0, [pc, #560]	@ (800434c <lfs_dir_relocatingcommit+0x568>)
 800411c:	f005 fd50 	bl	8009bc0 <__assert_func>
        dir->off = commit.off;
 8004120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8004126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	333c      	adds	r3, #60	@ 0x3c
 8004132:	3230      	adds	r2, #48	@ 0x30
 8004134:	ca07      	ldmia	r2, {r0, r1, r2}
 8004136:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3348      	adds	r3, #72	@ 0x48
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	e021      	b.n	800418c <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004148:	bf00      	nop
 800414a:	e004      	b.n	8004156 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800414c:	bf00      	nop
 800414e:	e002      	b.n	8004156 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004154:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3310      	adds	r3, #16
 800415a:	4619      	mov	r1, r3
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7fc fd9d 	bl	8000c9c <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	8a9b      	ldrh	r3, [r3, #20]
 8004166:	9302      	str	r3, [sp, #8]
 8004168:	2300      	movs	r3, #0
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7ff fd1b 	bl	8003bb4 <lfs_dir_splittingcompact>
 800417e:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004182:	2b00      	cmp	r3, #0
 8004184:	da01      	bge.n	800418a <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8004186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004188:	e0d7      	b.n	800433a <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 800418a:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	663b      	str	r3, [r7, #96]	@ 0x60
 80041a0:	e0c6      	b.n	8004330 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80041a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041a4:	3308      	adds	r3, #8
 80041a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fd f8f1 	bl	8001394 <lfs_pair_cmp>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 80b8 	bne.w	800432a <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 80041ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	f103 0408 	add.w	r4, r3, #8
 80041c2:	4615      	mov	r5, r2
 80041c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80041cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80041d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d2:	3308      	adds	r3, #8
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	f000 809d 	beq.w	8004316 <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 80041dc:	2300      	movs	r3, #0
 80041de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041e0:	e07b      	b.n	80042da <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80041e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fd f98d 	bl	800150c <lfs_tag_type3>
 80041f2:	4603      	mov	r3, r0
 80041f4:	461a      	mov	r2, r3
 80041f6:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d115      	bne.n	800422a <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80041fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004200:	889c      	ldrh	r4, [r3, #4]
 8004202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4413      	add	r3, r2
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd f9a7 	bl	8001560 <lfs_tag_id>
 8004212:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004214:	429c      	cmp	r4, r3
 8004216:	d108      	bne.n	800422a <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8004218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800421e:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8004220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	e054      	b.n	80042d4 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800422a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4413      	add	r3, r2
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd f969 	bl	800150c <lfs_tag_type3>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8004242:	429a      	cmp	r2, r3
 8004244:	d11c      	bne.n	8004280 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8004246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004248:	889c      	ldrh	r4, [r3, #4]
 800424a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4413      	add	r3, r2
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7fd f983 	bl	8001560 <lfs_tag_id>
 800425a:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800425c:	429c      	cmp	r4, r3
 800425e:	d90f      	bls.n	8004280 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8004260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004262:	889b      	ldrh	r3, [r3, #4]
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800426a:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800426c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800426e:	799b      	ldrb	r3, [r3, #6]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d12f      	bne.n	80042d4 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8004274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800427c:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800427e:	e029      	b.n	80042d4 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	4413      	add	r3, r2
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd f93e 	bl	800150c <lfs_tag_type3>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	f240 4301 	movw	r3, #1025	@ 0x401
 8004298:	429a      	cmp	r2, r3
 800429a:	d11b      	bne.n	80042d4 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 800429c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800429e:	889c      	ldrh	r4, [r3, #4]
 80042a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd f958 	bl	8001560 <lfs_tag_id>
 80042b0:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80042b2:	429c      	cmp	r4, r3
 80042b4:	d30e      	bcc.n	80042d4 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 80042b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042b8:	889b      	ldrh	r3, [r3, #4]
 80042ba:	3301      	adds	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c0:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80042c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c4:	799b      	ldrb	r3, [r3, #6]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d104      	bne.n	80042d4 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 80042ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 80042d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d6:	3301      	adds	r3, #1
 80042d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042e0:	429a      	cmp	r2, r3
 80042e2:	f6ff af7e 	blt.w	80041e2 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80042e6:	e016      	b.n	8004316 <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 80042e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ea:	889a      	ldrh	r2, [r3, #4]
 80042ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ee:	8b9b      	ldrh	r3, [r3, #28]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f6:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80042f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042fa:	f103 0108 	add.w	r1, r3, #8
 80042fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004300:	3320      	adds	r3, #32
 8004302:	461a      	mov	r2, r3
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7fe fd7d 	bl	8002e04 <lfs_dir_fetch>
 800430a:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 800430c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <lfs_dir_relocatingcommit+0x532>
                    return err;
 8004312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004314:	e011      	b.n	800433a <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8004316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004318:	889a      	ldrh	r2, [r3, #4]
 800431a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800431c:	8b9b      	ldrh	r3, [r3, #28]
 800431e:	429a      	cmp	r2, r3
 8004320:	d303      	bcc.n	800432a <lfs_dir_relocatingcommit+0x546>
 8004322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004324:	7fdb      	ldrb	r3, [r3, #31]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1de      	bne.n	80042e8 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800432a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004332:	2b00      	cmp	r3, #0
 8004334:	f47f af35 	bne.w	80041a2 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8004338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800433a:	4618      	mov	r0, r3
 800433c:	3770      	adds	r7, #112	@ 0x70
 800433e:	46bd      	mov	sp, r7
 8004340:	bdb0      	pop	{r4, r5, r7, pc}
 8004342:	bf00      	nop
 8004344:	0800ad50 	.word	0x0800ad50
 8004348:	0800b5b8 	.word	0x0800b5b8
 800434c:	0800ac04 	.word	0x0800ac04

08004350 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004350:	b5b0      	push	{r4, r5, r7, lr}
 8004352:	b0bc      	sub	sp, #240	@ 0xf0
 8004354:	af04      	add	r7, sp, #16
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004366:	e045      	b.n	80043f4 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436c:	3308      	adds	r3, #8
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d03a      	beq.n	80043ea <lfs_dir_orphaningcommit+0x9a>
 8004374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004378:	3308      	adds	r3, #8
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd f808 	bl	8001394 <lfs_pair_cmp>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d12f      	bne.n	80043ea <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800438a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800438e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004390:	2b01      	cmp	r3, #1
 8004392:	d12a      	bne.n	80043ea <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d91b      	bls.n	80043ea <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80043b2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 ffd8 	bl	800536c <lfs_file_outline>
 80043bc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80043c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <lfs_dir_orphaningcommit+0x7e>
                return err;
 80043c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043cc:	e2ad      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80043ce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 ffec 	bl	80053b0 <lfs_file_flush>
 80043d8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80043dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <lfs_dir_orphaningcommit+0x9a>
                return err;
 80043e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043e8:	e29f      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80043ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1b5      	bne.n	8004368 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004412:	461d      	mov	r5, r3
 8004414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004418:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800441c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8004426:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff fcd6 	bl	8003de4 <lfs_dir_relocatingcommit>
 8004438:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800443c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004440:	2b00      	cmp	r3, #0
 8004442:	da02      	bge.n	800444a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004448:	e26f      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc ff9e 	bl	8001394 <lfs_pair_cmp>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	461d      	mov	r5, r3
 8004462:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800446a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800446e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004476:	2b02      	cmp	r3, #2
 8004478:	d14a      	bne.n	8004510 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3348      	adds	r3, #72	@ 0x48
 800447e:	461a      	mov	r2, r3
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7fe fcda 	bl	8002e3c <lfs_dir_getgstate>
 8004488:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 800448c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004498:	e247      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800449a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800449c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 80044a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3318      	adds	r3, #24
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fc ffe3 	bl	8001476 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	7ddb      	ldrb	r3, [r3, #23]
 80044b4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80044b8:	051a      	lsls	r2, r3, #20
 80044ba:	4bc2      	ldr	r3, [pc, #776]	@ (80047c4 <lfs_dir_orphaningcommit+0x474>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	667b      	str	r3, [r7, #100]	@ 0x64
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	3318      	adds	r3, #24
 80044c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80044ca:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80044ce:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80044d2:	2000      	movs	r0, #0
 80044d4:	9001      	str	r0, [sp, #4]
 80044d6:	2001      	movs	r0, #1
 80044d8:	9000      	str	r0, [sp, #0]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff fc82 	bl	8003de4 <lfs_dir_relocatingcommit>
 80044e0:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3318      	adds	r3, #24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc ffaa 	bl	8001442 <lfs_pair_fromle32>
        if (state < 0) {
 80044ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da02      	bge.n	80044fc <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80044f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044fa:	e216      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80044fc:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004500:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8004504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004508:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800450c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004510:	2300      	movs	r3, #0
 8004512:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8004516:	e1fc      	b.n	8004912 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8004518:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800451c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004520:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004524:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004528:	4ca7      	ldr	r4, [pc, #668]	@ (80047c8 <lfs_dir_orphaningcommit+0x478>)
 800452a:	9403      	str	r4, [sp, #12]
 800452c:	9102      	str	r1, [sp, #8]
 800452e:	9201      	str	r2, [sp, #4]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4603      	mov	r3, r0
 8004534:	f44f 620c 	mov.w	r2, #2240	@ 0x8c0
 8004538:	49a4      	ldr	r1, [pc, #656]	@ (80047cc <lfs_dir_orphaningcommit+0x47c>)
 800453a:	48a5      	ldr	r0, [pc, #660]	@ (80047d0 <lfs_dir_orphaningcommit+0x480>)
 800453c:	f005 fcf0 	bl	8009f20 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f103 0220 	add.w	r2, r3, #32
 800454c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc ff1e 	bl	8001394 <lfs_pair_cmp>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d107      	bne.n	800456e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800455e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004566:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004576:	e037      	b.n	80045e8 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004578:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800457c:	f103 0208 	add.w	r2, r3, #8
 8004580:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f7fc ff04 	bl	8001394 <lfs_pair_cmp>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004592:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800459a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800459c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80045a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045a4:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80045a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045aa:	799b      	ldrb	r3, [r3, #6]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d116      	bne.n	80045de <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80045b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045b4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80045b8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fee8 	bl	8001394 <lfs_pair_cmp>
 80045c4:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80045ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80045ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045d2:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80045d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80045d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80045de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1c3      	bne.n	8004578 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80045f0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80045f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80045f8:	4619      	mov	r1, r3
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f002 f944 	bl	8006888 <lfs_fs_parent>
 8004600:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004608:	2b00      	cmp	r3, #0
 800460a:	da07      	bge.n	800461c <lfs_dir_orphaningcommit+0x2cc>
 800460c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004610:	f113 0f02 	cmn.w	r3, #2
 8004614:	d002      	beq.n	800461c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8004616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800461a:	e186      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800461c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004620:	f113 0f02 	cmn.w	r3, #2
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 800462e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004632:	f113 0f02 	cmn.w	r3, #2
 8004636:	f000 809e 	beq.w	8004776 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800463a:	2101      	movs	r1, #1
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f002 f97b 	bl	8006938 <lfs_fs_preporphans>
 8004642:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8004646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <lfs_dir_orphaningcommit+0x304>
                return err;
 800464e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004652:	e16a      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004654:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8004658:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3330      	adds	r3, #48	@ 0x30
 8004660:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd f822 	bl	80016b0 <lfs_gstate_hasmovehere>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d02d      	beq.n	80046ce <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	4618      	mov	r0, r3
 8004678:	f7fc ff72 	bl	8001560 <lfs_tag_id>
 800467c:	4603      	mov	r3, r0
 800467e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004682:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004684:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004686:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800468a:	484f      	ldr	r0, [pc, #316]	@ (80047c8 <lfs_dir_orphaningcommit+0x478>)
 800468c:	9002      	str	r0, [sp, #8]
 800468e:	9201      	str	r2, [sp, #4]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	460b      	mov	r3, r1
 8004694:	f640 02ed 	movw	r2, #2285	@ 0x8ed
 8004698:	494c      	ldr	r1, [pc, #304]	@ (80047cc <lfs_dir_orphaningcommit+0x47c>)
 800469a:	484e      	ldr	r0, [pc, #312]	@ (80047d4 <lfs_dir_orphaningcommit+0x484>)
 800469c:	f005 fc40 	bl	8009f20 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80046a0:	2200      	movs	r2, #0
 80046a2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f002 f980 	bl	80069ac <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80046ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fc ff55 	bl	8001560 <lfs_tag_id>
 80046b6:	4603      	mov	r3, r0
 80046b8:	461a      	mov	r2, r3
 80046ba:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80046be:	4293      	cmp	r3, r2
 80046c0:	d205      	bcs.n	80046ce <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80046c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80046ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80046ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046d4:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 80046d6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc fecb 	bl	8001476 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80046e0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80046e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <lfs_dir_orphaningcommit+0x3ac>
 80046ec:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80046f0:	029b      	lsls	r3, r3, #10
 80046f2:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80046f6:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80046fa:	e000      	b.n	80046fe <lfs_dir_orphaningcommit+0x3ae>
 80046fc:	2300      	movs	r3, #0
 80046fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004700:	2300      	movs	r3, #0
 8004702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800470e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004710:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004714:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004718:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800471c:	2000      	movs	r0, #0
 800471e:	9001      	str	r0, [sp, #4]
 8004720:	2002      	movs	r0, #2
 8004722:	9000      	str	r0, [sp, #0]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff fb5d 	bl	8003de4 <lfs_dir_relocatingcommit>
 800472a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800472e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc fe85 	bl	8001442 <lfs_pair_fromle32>
            if (state < 0) {
 8004738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800473c:	2b00      	cmp	r3, #0
 800473e:	da02      	bge.n	8004746 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004744:	e0f1      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800474a:	2b01      	cmp	r3, #1
 800474c:	d113      	bne.n	8004776 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800474e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8004754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 800475a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800475e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8004762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004766:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800476a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004774:	e0cd      	b.n	8004912 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004776:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800477a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800477e:	4619      	mov	r1, r3
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f001 fff9 	bl	8006778 <lfs_fs_pred>
 8004786:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800478a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <lfs_dir_orphaningcommit+0x452>
 8004792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004796:	f113 0f02 	cmn.w	r3, #2
 800479a:	d002      	beq.n	80047a2 <lfs_dir_orphaningcommit+0x452>
            return err;
 800479c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047a0:	e0c3      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80047a2:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01a      	beq.n	80047e0 <lfs_dir_orphaningcommit+0x490>
 80047aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047ae:	f113 0f02 	cmn.w	r3, #2
 80047b2:	d115      	bne.n	80047e0 <lfs_dir_orphaningcommit+0x490>
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <lfs_dir_orphaningcommit+0x488>)
 80047b6:	4a09      	ldr	r2, [pc, #36]	@ (80047dc <lfs_dir_orphaningcommit+0x48c>)
 80047b8:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 80047bc:	4803      	ldr	r0, [pc, #12]	@ (80047cc <lfs_dir_orphaningcommit+0x47c>)
 80047be:	f005 f9ff 	bl	8009bc0 <__assert_func>
 80047c2:	bf00      	nop
 80047c4:	000ffc08 	.word	0x000ffc08
 80047c8:	0800acf8 	.word	0x0800acf8
 80047cc:	0800ac04 	.word	0x0800ac04
 80047d0:	0800ae78 	.word	0x0800ae78
 80047d4:	0800aeb4 	.word	0x0800aeb4
 80047d8:	0800aef8 	.word	0x0800aef8
 80047dc:	0800b5d4 	.word	0x0800b5d4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80047e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047e4:	f113 0f02 	cmn.w	r3, #2
 80047e8:	f000 8093 	beq.w	8004912 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3330      	adds	r3, #48	@ 0x30
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fc ff28 	bl	8001646 <lfs_gstate_hasorphans>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d011      	beq.n	8004820 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80047fc:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8004800:	425b      	negs	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	b25b      	sxtb	r3, r3
 8004806:	4619      	mov	r1, r3
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f002 f895 	bl	8006938 <lfs_fs_preporphans>
 800480e:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8004812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800481a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800481e:	e084      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004820:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8004824:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3330      	adds	r3, #48	@ 0x30
 800482c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004830:	4611      	mov	r1, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc ff3c 	bl	80016b0 <lfs_gstate_hasmovehere>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01c      	beq.n	8004878 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	4618      	mov	r0, r3
 8004844:	f7fc fe8c 	bl	8001560 <lfs_tag_id>
 8004848:	4603      	mov	r3, r0
 800484a:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800484e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004852:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8004856:	4837      	ldr	r0, [pc, #220]	@ (8004934 <lfs_dir_orphaningcommit+0x5e4>)
 8004858:	9002      	str	r0, [sp, #8]
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	460b      	mov	r3, r1
 8004860:	f640 1221 	movw	r2, #2337	@ 0x921
 8004864:	4934      	ldr	r1, [pc, #208]	@ (8004938 <lfs_dir_orphaningcommit+0x5e8>)
 8004866:	4835      	ldr	r0, [pc, #212]	@ (800493c <lfs_dir_orphaningcommit+0x5ec>)
 8004868:	f005 fb5a 	bl	8009f20 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800486c:	2200      	movs	r2, #0
 800486e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f002 f89a 	bl	80069ac <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800487a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 800487e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8004884:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004888:	4618      	mov	r0, r3
 800488a:	f7fc fdf4 	bl	8001476 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800488e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8004892:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8004896:	4293      	cmp	r3, r2
 8004898:	d007      	beq.n	80048aa <lfs_dir_orphaningcommit+0x55a>
 800489a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800489e:	029b      	lsls	r3, r3, #10
 80048a0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80048a4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80048a8:	e000      	b.n	80048ac <lfs_dir_orphaningcommit+0x55c>
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ae:	2300      	movs	r3, #0
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048b2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80048b6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80048ba:	051a      	lsls	r2, r3, #20
 80048bc:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <lfs_dir_orphaningcommit+0x5f0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80048c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80048c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048cc:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80048d0:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80048d4:	2000      	movs	r0, #0
 80048d6:	9001      	str	r0, [sp, #4]
 80048d8:	2002      	movs	r0, #2
 80048da:	9000      	str	r0, [sp, #0]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fa81 	bl	8003de4 <lfs_dir_relocatingcommit>
 80048e2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80048e6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fda9 	bl	8001442 <lfs_pair_fromle32>
            if (state < 0) {
 80048f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da02      	bge.n	80048fe <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80048f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048fc:	e015      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80048fe:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004902:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8004906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800490a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800490e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004916:	2b01      	cmp	r3, #1
 8004918:	f43f adfe 	beq.w	8004518 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 800491c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <lfs_dir_orphaningcommit+0x5d8>
 8004924:	2303      	movs	r3, #3
 8004926:	e000      	b.n	800492a <lfs_dir_orphaningcommit+0x5da>
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	37e0      	adds	r7, #224	@ 0xe0
 800492e:	46bd      	mov	sp, r7
 8004930:	bdb0      	pop	{r4, r5, r7, pc}
 8004932:	bf00      	nop
 8004934:	0800acf8 	.word	0x0800acf8
 8004938:	0800ac04 	.word	0x0800ac04
 800493c:	0800aeb4 	.word	0x0800aeb4
 8004940:	000ffc08 	.word	0x000ffc08

08004944 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff fcf9 	bl	8004350 <lfs_dir_orphaningcommit>
 800495e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	da01      	bge.n	800496a <lfs_dir_commit+0x26>
        return orphans;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	e00d      	b.n	8004986 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004970:	2100      	movs	r1, #0
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f002 f8ba 	bl	8006aec <lfs_fs_deorphan>
 8004978:	6138      	str	r0, [r7, #16]
        if (err) {
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <lfs_dir_commit+0x40>
            return err;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	e000      	b.n	8004986 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800498e:	b590      	push	{r4, r7, lr}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	3b08      	subs	r3, #8
 80049a6:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <lfs_ctz_index+0x2e>
        return 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e01c      	b.n	80049f6 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3b01      	subs	r3, #1
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc f90b 	bl	8000bdc <lfs_popc>
 80049c6:	4603      	mov	r3, r0
 80049c8:	3302      	adds	r3, #2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	1ad4      	subs	r4, r2, r3
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7fc f8f9 	bl	8000bdc <lfs_popc>
 80049ea:	4603      	mov	r3, r0
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	1ae2      	subs	r2, r4, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	601a      	str	r2, [r3, #0]
    return i;
 80049f4:	68fb      	ldr	r3, [r7, #12]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80049fe:	b590      	push	{r4, r7, lr}
 8004a00:	b08f      	sub	sp, #60	@ 0x3c
 8004a02:	af04      	add	r7, sp, #16
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d108      	bne.n	8004a24 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a18:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
        return 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e053      	b.n	8004acc <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff ffac 	bl	800498e <lfs_ctz_index>
 8004a36:	4603      	mov	r3, r0
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004a3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004a3e:	4619      	mov	r1, r3
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff ffa4 	bl	800498e <lfs_ctz_index>
 8004a46:	4603      	mov	r3, r0
 8004a48:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004a4a:	e034      	b.n	8004ab6 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fc f8a2 	bl	8000b9e <lfs_npw2>
 8004a5a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004a5c:	1e5c      	subs	r4, r3, #1
 8004a5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a60:	f7fc f8ad 	bl	8000bbe <lfs_ctz>
 8004a64:	4603      	mov	r3, r0
 8004a66:	4619      	mov	r1, r3
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7fc f861 	bl	8000b30 <lfs_min>
 8004a6e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	0092      	lsls	r2, r2, #2
 8004a76:	2104      	movs	r1, #4
 8004a78:	9103      	str	r1, [sp, #12]
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	9102      	str	r1, [sp, #8]
 8004a7e:	9201      	str	r2, [sp, #4]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	2304      	movs	r3, #4
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7fc f92d 	bl	8000ce8 <lfs_bd_read>
 8004a8e:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc f8bc 	bl	8000c10 <lfs_fromle32>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	603b      	str	r3, [r7, #0]
        if (err) {
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <lfs_ctz_find+0xa8>
            return err;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	e012      	b.n	8004acc <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d8c6      	bhi.n	8004a4c <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac2:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004ac4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac8:	601a      	str	r2, [r3, #0]
    return 0;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	372c      	adds	r7, #44	@ 0x2c
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd90      	pop	{r4, r7, pc}

08004ad4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b092      	sub	sp, #72	@ 0x48
 8004ad8:	af04      	add	r7, sp, #16
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004ae2:	f107 0320 	add.w	r3, r7, #32
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7fc ff51 	bl	8001990 <lfs_alloc>
 8004aee:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <lfs_ctz_extend+0x26>
            return err;
 8004af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af8:	e0e9      	b.n	8004cce <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	4619      	mov	r1, r3
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7fc fbe6 	bl	80012d0 <lfs_bd_erase>
 8004b04:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8004b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004b12:	f000 80cb 	beq.w	8004cac <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b18:	e0d9      	b.n	8004cce <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d107      	bne.n	8004b30 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b24:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
                return 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e0ce      	b.n	8004cce <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b32:	3b01      	subs	r3, #1
 8004b34:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004b36:	f107 031c 	add.w	r3, r7, #28
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ff26 	bl	800498e <lfs_ctz_index>
 8004b42:	4603      	mov	r3, r0
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d044      	beq.n	8004be2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004b58:	2300      	movs	r3, #0
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	e035      	b.n	8004bca <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	2301      	movs	r3, #1
 8004b66:	9303      	str	r3, [sp, #12]
 8004b68:	f107 0317 	add.w	r3, r7, #23
 8004b6c:	9302      	str	r3, [sp, #8]
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7fc f8b3 	bl	8000ce8 <lfs_bd_read>
 8004b82:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <lfs_ctz_extend+0xba>
                        return err;
 8004b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8c:	e09f      	b.n	8004cce <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2201      	movs	r2, #1
 8004b92:	9203      	str	r2, [sp, #12]
 8004b94:	f107 0217 	add.w	r2, r7, #23
 8004b98:	9202      	str	r2, [sp, #8]
 8004b9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b9c:	9201      	str	r2, [sp, #4]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7fc fae4 	bl	8001174 <lfs_bd_prog>
 8004bac:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004bba:	d101      	bne.n	8004bc0 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004bbc:	bf00      	nop
                    goto relocate;
 8004bbe:	e075      	b.n	8004cac <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8004bc2:	e084      	b.n	8004cce <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d3c5      	bcc.n	8004b5e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004bd2:	6a3a      	ldr	r2, [r7, #32]
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bd6:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bdc:	601a      	str	r2, [r3, #0]
                return 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e075      	b.n	8004cce <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	3301      	adds	r3, #1
 8004be6:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bea:	f7fb ffe8 	bl	8000bbe <lfs_ctz>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bfc:	e049      	b.n	8004c92 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc f810 	bl	8000c26 <lfs_tole32>
 8004c06:	4603      	mov	r3, r0
 8004c08:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0e:	0092      	lsls	r2, r2, #2
 8004c10:	2104      	movs	r1, #4
 8004c12:	9103      	str	r1, [sp, #12]
 8004c14:	f107 0118 	add.w	r1, r7, #24
 8004c18:	9102      	str	r1, [sp, #8]
 8004c1a:	9201      	str	r2, [sp, #4]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	2301      	movs	r3, #1
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7fc faa5 	bl	8001174 <lfs_bd_prog>
 8004c2a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb ffee 	bl	8000c10 <lfs_fromle32>
 8004c34:	4603      	mov	r3, r0
 8004c36:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004c44:	d034      	beq.n	8004cb0 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c48:	e041      	b.n	8004cce <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d01b      	beq.n	8004c8c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c58:	0092      	lsls	r2, r2, #2
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	9103      	str	r1, [sp, #12]
 8004c5e:	f107 0118 	add.w	r1, r7, #24
 8004c62:	9102      	str	r1, [sp, #8]
 8004c64:	9201      	str	r2, [sp, #4]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	2304      	movs	r3, #4
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7fc f83a 	bl	8000ce8 <lfs_bd_read>
 8004c74:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fb ffc9 	bl	8000c10 <lfs_fromle32>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <lfs_ctz_extend+0x1b8>
                        return err;
 8004c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8a:	e020      	b.n	8004cce <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	3301      	adds	r3, #1
 8004c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3b1      	bcc.n	8004bfe <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004c9a:	6a3a      	ldr	r2, [r7, #32]
 8004c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c9e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	009a      	lsls	r2, r3, #2
 8004ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ca6:	601a      	str	r2, [r3, #0]
            return 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e010      	b.n	8004cce <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004cac:	bf00      	nop
 8004cae:	e000      	b.n	8004cb2 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004cb0:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	@ (8004cd8 <lfs_ctz_extend+0x204>)
 8004cb6:	9200      	str	r2, [sp, #0]
 8004cb8:	f640 22da 	movw	r2, #2778	@ 0xada
 8004cbc:	4907      	ldr	r1, [pc, #28]	@ (8004cdc <lfs_ctz_extend+0x208>)
 8004cbe:	4808      	ldr	r0, [pc, #32]	@ (8004ce0 <lfs_ctz_extend+0x20c>)
 8004cc0:	f005 f92e 	bl	8009f20 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7fb ffe8 	bl	8000c9c <lfs_cache_drop>
    while (true) {
 8004ccc:	e709      	b.n	8004ae2 <lfs_ctz_extend+0xe>
    }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3738      	adds	r7, #56	@ 0x38
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	0800acf8 	.word	0x0800acf8
 8004cdc:	0800ac04 	.word	0x0800ac04
 8004ce0:	0800ad78 	.word	0x0800ad78

08004ce4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b090      	sub	sp, #64	@ 0x40
 8004ce8:	af04      	add	r7, sp, #16
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <lfs_ctz_traverse+0x18>
        return 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e06b      	b.n	8004dd4 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	f107 031c 	add.w	r3, r7, #28
 8004d06:	4619      	mov	r1, r3
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fe40 	bl	800498e <lfs_ctz_index>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8004d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004d18:	4798      	blx	r3
 8004d1a:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <lfs_ctz_traverse+0x42>
            return err;
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	e056      	b.n	8004dd4 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8004d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <lfs_ctz_traverse+0x4c>
            return 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e051      	b.n	8004dd4 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	f1c3 0302 	rsb	r3, r3, #2
 8004d3a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004d3e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004d40:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004d42:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004d44:	9303      	str	r3, [sp, #12]
 8004d46:	f107 0314 	add.w	r3, r7, #20
 8004d4a:	9302      	str	r3, [sp, #8]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7fb ffc4 	bl	8000ce8 <lfs_bd_read>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fb ff53 	bl	8000c10 <lfs_fromle32>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb ff4d 	bl	8000c10 <lfs_fromle32>
 8004d76:	4603      	mov	r3, r0
 8004d78:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <lfs_ctz_traverse+0xa0>
            return err;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	e027      	b.n	8004dd4 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8004d84:	2300      	movs	r3, #0
 8004d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d88:	e012      	b.n	8004db0 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8004d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	3330      	adds	r3, #48	@ 0x30
 8004d90:	443b      	add	r3, r7
 8004d92:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d98:	4611      	mov	r1, r2
 8004d9a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004d9c:	4798      	blx	r3
 8004d9e:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <lfs_ctz_traverse+0xc6>
                return err;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	e014      	b.n	8004dd4 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	3301      	adds	r3, #1
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004db6:	429a      	cmp	r2, r3
 8004db8:	dbe7      	blt.n	8004d8a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	3330      	adds	r3, #48	@ 0x30
 8004dc2:	443b      	add	r3, r7
 8004dc4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004dc8:	603b      	str	r3, [r7, #0]
        index -= count;
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8004dd2:	e79e      	b.n	8004d12 <lfs_ctz_traverse+0x2e>
    }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3730      	adds	r7, #48	@ 0x30
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b09a      	sub	sp, #104	@ 0x68
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f002 f81d 	bl	8006e34 <lfs_fs_forceconsistency>
 8004dfa:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8004dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <lfs_file_rawopencfg+0x2a>
            return err;
 8004e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e04:	e1b0      	b.n	8005168 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004e0a:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f103 0108 	add.w	r1, r3, #8
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	1d3a      	adds	r2, r7, #4
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7fe f87f 	bl	8002f34 <lfs_dir_find>
 8004e36:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004e38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da0c      	bge.n	8004e58 <lfs_file_rawopencfg+0x7c>
 8004e3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e40:	f113 0f02 	cmn.w	r3, #2
 8004e44:	d105      	bne.n	8004e52 <lfs_file_rawopencfg+0x76>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	889b      	ldrh	r3, [r3, #4]
 8004e4a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d102      	bne.n	8004e58 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8004e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8004e56:	e17c      	b.n	8005152 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7fc fd2c 	bl	80018be <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e68:	f113 0f02 	cmn.w	r3, #2
 8004e6c:	d14e      	bne.n	8004f0c <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004e78:	f06f 0301 	mvn.w	r3, #1
 8004e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004e7e:	e168      	b.n	8005152 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb f9ac 	bl	80001e0 <strlen>
 8004e88:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d903      	bls.n	8004e9c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004e94:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8004e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004e9a:	e15a      	b.n	8005152 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f103 0108 	add.w	r1, r3, #8
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	889b      	ldrh	r3, [r3, #4]
 8004ea6:	029b      	lsls	r3, r3, #10
 8004ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	889b      	ldrh	r3, [r3, #4]
 8004eba:	029a      	lsls	r2, r3, #10
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	889b      	ldrh	r3, [r3, #4]
 8004ece:	029b      	lsls	r3, r3, #10
 8004ed0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ed4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eda:	2300      	movs	r3, #0
 8004edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ede:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff fd2d 	bl	8004944 <lfs_dir_commit>
 8004eea:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8004eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eee:	f113 0f1c 	cmn.w	r3, #28
 8004ef2:	d001      	beq.n	8004ef8 <lfs_file_rawopencfg+0x11c>
 8004ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ef6:	e001      	b.n	8004efc <lfs_file_rawopencfg+0x120>
 8004ef8:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8004efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8004efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 8125 	bne.w	8005150 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8004f06:	4b9a      	ldr	r3, [pc, #616]	@ (8005170 <lfs_file_rawopencfg+0x394>)
 8004f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f0a:	e044      	b.n	8004f96 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8004f16:	f06f 0310 	mvn.w	r3, #16
 8004f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8004f1c:	e119      	b.n	8005152 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8004f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fc faf3 	bl	800150c <lfs_tag_type3>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d003      	beq.n	8004f34 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8004f2c:	f06f 0314 	mvn.w	r3, #20
 8004f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8004f32:	e10e      	b.n	8005152 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	889b      	ldrh	r3, [r3, #4]
 8004f42:	029b      	lsls	r3, r3, #10
 8004f44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f5a:	e01c      	b.n	8004f96 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	889b      	ldrh	r3, [r3, #4]
 8004f66:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f6c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f74:	9200      	str	r2, [sp, #0]
 8004f76:	4a7f      	ldr	r2, [pc, #508]	@ (8005174 <lfs_file_rawopencfg+0x398>)
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7fc fea3 	bl	8001cc4 <lfs_dir_get>
 8004f7e:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8004f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da02      	bge.n	8004f8c <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8004f86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004f8a:	e0e2      	b.n	8005152 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	3328      	adds	r3, #40	@ 0x28
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fc fbed 	bl	8001770 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004f96:	2300      	movs	r3, #0
 8004f98:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f9a:	e063      	b.n	8005064 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d03c      	beq.n	8005022 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004fc6:	051a      	lsls	r2, r3, #20
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	889b      	ldrh	r3, [r3, #4]
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	ea42 0103 	orr.w	r1, r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd6:	6858      	ldr	r0, [r3, #4]
 8004fd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4403      	add	r3, r0
 8004fe4:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004fe6:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	4603      	mov	r3, r0
 8005002:	4a5d      	ldr	r2, [pc, #372]	@ (8005178 <lfs_file_rawopencfg+0x39c>)
 8005004:	4621      	mov	r1, r4
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7fc fe5c 	bl	8001cc4 <lfs_dir_get>
 800500c:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800500e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005010:	2b00      	cmp	r3, #0
 8005012:	da06      	bge.n	8005022 <lfs_file_rawopencfg+0x246>
 8005014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005016:	f113 0f02 	cmn.w	r3, #2
 800501a:	d002      	beq.n	8005022 <lfs_file_rawopencfg+0x246>
                err = res;
 800501c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005020:	e097      	b.n	8005152 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005046:	429a      	cmp	r2, r3
 8005048:	d903      	bls.n	8005052 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 800504a:	f06f 031b 	mvn.w	r3, #27
 800504e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005050:	e07f      	b.n	8005152 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800505e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005060:	3301      	adds	r3, #1
 8005062:	657b      	str	r3, [r7, #84]	@ 0x54
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800506c:	429a      	cmp	r2, r3
 800506e:	d395      	bcc.n	8004f9c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005084:	e010      	b.n	80050a8 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	4618      	mov	r0, r3
 800508e:	f7fb fdee 	bl	8000c6e <lfs_malloc>
 8005092:	4602      	mov	r2, r0
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d103      	bne.n	80050a8 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 80050a0:	f06f 030b 	mvn.w	r3, #11
 80050a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80050a6:	e054      	b.n	8005152 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	3340      	adds	r3, #64	@ 0x40
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7fb fe03 	bl	8000cba <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80050b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fc fa28 	bl	800150c <lfs_tag_type3>
 80050bc:	4603      	mov	r3, r0
 80050be:	461a      	mov	r2, r3
 80050c0:	f240 2301 	movw	r3, #513	@ 0x201
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d141      	bne.n	800514c <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f06f 0201 	mvn.w	r2, #1
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 80050d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc fa54 	bl	8001580 <lfs_tag_size>
 80050d8:	4602      	mov	r2, r0
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2200      	movs	r2, #0
 80050f6:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d020      	beq.n	800514c <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	889b      	ldrh	r3, [r3, #4]
 8005114:	029c      	lsls	r4, r3, #10
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511a:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fd06 	bl	8000b30 <lfs_min>
 8005124:	4603      	mov	r3, r0
 8005126:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005128:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4613      	mov	r3, r2
 8005134:	4a0f      	ldr	r2, [pc, #60]	@ (8005174 <lfs_file_rawopencfg+0x398>)
 8005136:	4629      	mov	r1, r5
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7fc fdc3 	bl	8001cc4 <lfs_dir_get>
 800513e:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8005140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005142:	2b00      	cmp	r3, #0
 8005144:	da02      	bge.n	800514c <lfs_file_rawopencfg+0x370>
                err = res;
 8005146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005148:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800514a:	e002      	b.n	8005152 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 800514c:	2300      	movs	r3, #0
 800514e:	e00b      	b.n	8005168 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8005150:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_rawclose(lfs, file);
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f80b 	bl	800517c <lfs_file_rawclose>
    return err;
 8005166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005168:	4618      	mov	r0, r3
 800516a:	3760      	adds	r7, #96	@ 0x60
 800516c:	46bd      	mov	sp, r7
 800516e:	bdb0      	pop	{r4, r5, r7, pc}
 8005170:	20100000 	.word	0x20100000
 8005174:	700ffc00 	.word	0x700ffc00
 8005178:	7ffffc00 	.word	0x7ffffc00

0800517c <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f9e5 	bl	8005558 <lfs_file_rawsync>
 800518e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc fb71 	bl	800187a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb fd6d 	bl	8000c86 <lfs_free>
    }

    return err;
 80051ac:	68fb      	ldr	r3, [r7, #12]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b08d      	sub	sp, #52	@ 0x34
 80051bc:	af06      	add	r7, sp, #24
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80051c2:	f107 030c 	add.w	r3, r7, #12
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fc fbe1 	bl	8001990 <lfs_alloc>
 80051ce:	6138      	str	r0, [r7, #16]
        if (err) {
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <lfs_file_relocate+0x22>
            return err;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	e0bb      	b.n	8005352 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc f876 	bl	80012d0 <lfs_bd_erase>
 80051e4:	6138      	str	r0, [r7, #16]
        if (err) {
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d006      	beq.n	80051fa <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80051f2:	f000 809b 	beq.w	800532c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	e0ab      	b.n	8005352 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e069      	b.n	80052d4 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005204:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d027      	beq.n	800525c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	f103 0008 	add.w	r0, r3, #8
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	889b      	ldrh	r3, [r3, #4]
 8005224:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8005226:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800522e:	2101      	movs	r1, #1
 8005230:	9105      	str	r1, [sp, #20]
 8005232:	f107 010b 	add.w	r1, r7, #11
 8005236:	9104      	str	r1, [sp, #16]
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	9103      	str	r1, [sp, #12]
 800523c:	9302      	str	r3, [sp, #8]
 800523e:	4b47      	ldr	r3, [pc, #284]	@ (800535c <lfs_file_relocate+0x1a4>)
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	9200      	str	r2, [sp, #0]
 8005244:	4623      	mov	r3, r4
 8005246:	2200      	movs	r2, #0
 8005248:	4601      	mov	r1, r0
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fd55 	bl	8001cfa <lfs_dir_getread>
 8005250:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01e      	beq.n	8005296 <lfs_file_relocate+0xde>
                    return err;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	e07a      	b.n	8005352 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8005262:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad4      	subs	r4, r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	2201      	movs	r2, #1
 8005272:	9203      	str	r2, [sp, #12]
 8005274:	f107 020b 	add.w	r2, r7, #11
 8005278:	9202      	str	r2, [sp, #8]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	9201      	str	r2, [sp, #4]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4623      	mov	r3, r4
 8005282:	4602      	mov	r2, r0
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7fb fd2f 	bl	8000ce8 <lfs_bd_read>
 800528a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <lfs_file_relocate+0xde>
                    return err;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	e05d      	b.n	8005352 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f103 0110 	add.w	r1, r3, #16
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	9203      	str	r2, [sp, #12]
 80052a4:	f107 020b 	add.w	r2, r7, #11
 80052a8:	9202      	str	r2, [sp, #8]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	9201      	str	r2, [sp, #4]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	2301      	movs	r3, #1
 80052b2:	4602      	mov	r2, r0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fb ff5d 	bl	8001174 <lfs_bd_prog>
 80052ba:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80052c8:	d032      	beq.n	8005330 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	e041      	b.n	8005352 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3301      	adds	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d390      	bcc.n	8005200 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69d9      	ldr	r1, [r3, #28]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	461a      	mov	r2, r3
 80052ee:	f004 feac 	bl	800a04a <memcpy>
        file->cache.block = lfs->pcache.block;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3310      	adds	r3, #16
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fb fcd2 	bl	8000cba <lfs_cache_zero>

        file->block = nblock;
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8005328:	2300      	movs	r3, #0
 800532a:	e012      	b.n	8005352 <lfs_file_relocate+0x19a>
                goto relocate;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005330:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <lfs_file_relocate+0x1a8>)
 8005336:	9200      	str	r2, [sp, #0]
 8005338:	f44f 6241 	mov.w	r2, #3088	@ 0xc10
 800533c:	4909      	ldr	r1, [pc, #36]	@ (8005364 <lfs_file_relocate+0x1ac>)
 800533e:	480a      	ldr	r0, [pc, #40]	@ (8005368 <lfs_file_relocate+0x1b0>)
 8005340:	f004 fdee 	bl	8009f20 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3310      	adds	r3, #16
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb fca6 	bl	8000c9c <lfs_cache_drop>
    while (true) {
 8005350:	e737      	b.n	80051c2 <lfs_file_relocate+0xa>
    }
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd90      	pop	{r4, r7, pc}
 800535a:	bf00      	nop
 800535c:	fff7fc00 	.word	0xfff7fc00
 8005360:	0800acf8 	.word	0x0800acf8
 8005364:	0800ac04 	.word	0x0800ac04
 8005368:	0800ad78 	.word	0x0800ad78

0800536c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ack(lfs);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc fae6 	bl	8001950 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ff16 	bl	80051b8 <lfs_file_relocate>
 800538c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <lfs_file_outline+0x2c>
        return err;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	e006      	b.n	80053a6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b09f      	sub	sp, #124	@ 0x7c
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d011      	beq.n	80053ea <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d105      	bne.n	80053de <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	3340      	adds	r3, #64	@ 0x40
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fb fc5f 	bl	8000c9c <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80a4 	beq.w	8005540 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d176      	bne.n	80054f8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800540a:	f107 030c 	add.w	r3, r7, #12
 800540e:	2254      	movs	r2, #84	@ 0x54
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f004 fdd4 	bl	8009fc0 <memset>
                .ctz.head = file->ctz.head,
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 800541c:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 8005422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005424:	2301      	movs	r3, #1
 8005426:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 800542c:	643b      	str	r3, [r7, #64]	@ 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8005434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb fc2c 	bl	8000c9c <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005444:	e02b      	b.n	800549e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8005446:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 800544a:	f107 010c 	add.w	r1, r7, #12
 800544e:	2301      	movs	r3, #1
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f90d 	bl	8005670 <lfs_file_flushedread>
 8005456:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8005458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800545a:	2b00      	cmp	r3, #0
 800545c:	da01      	bge.n	8005462 <lfs_file_flush+0xb2>
                    return res;
 800545e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005460:	e06f      	b.n	8005542 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005462:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8005466:	2301      	movs	r3, #1
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa08 	bl	8005880 <lfs_file_flushedwrite>
 8005470:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8005472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005474:	2b00      	cmp	r3, #0
 8005476:	da01      	bge.n	800547c <lfs_file_flush+0xcc>
                    return res;
 8005478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800547a:	e062      	b.n	8005542 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005484:	d00b      	beq.n	800549e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	3340      	adds	r3, #64	@ 0x40
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb fc04 	bl	8000c9c <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fb fbff 	bl	8000c9c <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d3cd      	bcc.n	8005446 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	2301      	movs	r3, #1
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fb fdad 	bl	8001014 <lfs_bd_flush>
 80054ba:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80054bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d026      	beq.n	8005510 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80054c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054c4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80054c8:	d001      	beq.n	80054ce <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80054ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054cc:	e039      	b.n	8005542 <lfs_file_flush+0x192>
                        goto relocate;
 80054ce:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	4a1d      	ldr	r2, [pc, #116]	@ (800554c <lfs_file_flush+0x19c>)
 80054d6:	9200      	str	r2, [sp, #0]
 80054d8:	f640 425f 	movw	r2, #3167	@ 0xc5f
 80054dc:	491c      	ldr	r1, [pc, #112]	@ (8005550 <lfs_file_flush+0x1a0>)
 80054de:	481d      	ldr	r0, [pc, #116]	@ (8005554 <lfs_file_flush+0x1a4>)
 80054e0:	f004 fd1e 	bl	8009f20 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fe66 	bl	80051b8 <lfs_file_relocate>
 80054ec:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80054ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0da      	beq.n	80054aa <lfs_file_flush+0xfa>
                    return err;
 80054f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054f6:	e024      	b.n	8005542 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f7fb fb04 	bl	8000b10 <lfs_max>
 8005508:	4602      	mov	r2, r0
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34
 800550e:	e000      	b.n	8005512 <lfs_file_flush+0x162>
                break;
 8005510:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800553e:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3774      	adds	r7, #116	@ 0x74
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}
 800554a:	bf00      	nop
 800554c:	0800acf8 	.word	0x0800acf8
 8005550:	0800ac04 	.word	0x0800ac04
 8005554:	0800ad78 	.word	0x0800ad78

08005558 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b090      	sub	sp, #64	@ 0x40
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800556e:	2300      	movs	r3, #0
 8005570:	e07a      	b.n	8005668 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff1b 	bl	80053b0 <lfs_file_flush>
 800557a:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	e06a      	b.n	8005668 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d063      	beq.n	8005666 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fb fedb 	bl	800135e <lfs_pair_isnull>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f083 0301 	eor.w	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d058      	beq.n	8005666 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80055c0:	f240 2301 	movw	r3, #513	@ 0x201
 80055c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ca:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d2:	e014      	b.n	80055fe <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80055d4:	f240 2302 	movw	r3, #514	@ 0x202
 80055d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055e0:	3228      	adds	r2, #40	@ 0x28
 80055e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055e6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80055ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fc f8d6 	bl	80017a0 <lfs_ctz_tole32>
            buffer = &ctz;
 80055f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055f8:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 80055fa:	2308      	movs	r3, #8
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f103 0108 	add.w	r1, r3, #8
 8005604:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005606:	051a      	lsls	r2, r3, #20
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	889b      	ldrh	r3, [r3, #4]
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	431a      	orrs	r2, r3
 8005610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005612:	4313      	orrs	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	889b      	ldrh	r3, [r3, #4]
 800561e:	029a      	lsls	r2, r3, #10
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 800562c:	623b      	str	r3, [r7, #32]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
 8005636:	f107 0218 	add.w	r2, r7, #24
 800563a:	2302      	movs	r3, #2
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff f981 	bl	8004944 <lfs_dir_commit>
 8005642:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	e006      	b.n	8005668 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3740      	adds	r7, #64	@ 0x40
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005670:	b5b0      	push	{r4, r5, r7, lr}
 8005672:	b090      	sub	sp, #64	@ 0x40
 8005674:	af06      	add	r7, sp, #24
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	429a      	cmp	r2, r3
 8005690:	d301      	bcc.n	8005696 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005692:	2300      	movs	r3, #0
 8005694:	e0b7      	b.n	8005806 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	6838      	ldr	r0, [r7, #0]
 80056a4:	f7fb fa44 	bl	8000b30 <lfs_min>
 80056a8:	6038      	str	r0, [r7, #0]
    nsize = size;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80056ae:	e0a5      	b.n	80057fc <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c4:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d130      	bne.n	800572c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d11c      	bne.n	8005710 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	3138      	adds	r1, #56	@ 0x38
 80056ec:	68b8      	ldr	r0, [r7, #8]
 80056ee:	303c      	adds	r0, #60	@ 0x3c
 80056f0:	9003      	str	r0, [sp, #12]
 80056f2:	9102      	str	r1, [sp, #8]
 80056f4:	9201      	str	r2, [sp, #4]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	462b      	mov	r3, r5
 80056fa:	4622      	mov	r2, r4
 80056fc:	2100      	movs	r1, #0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff f97d 	bl	80049fe <lfs_ctz_find>
 8005704:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <lfs_file_flushedread+0xb0>
                    return err;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	e07a      	b.n	8005806 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f06f 0201 	mvn.w	r2, #1
 8005716:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005724:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	4619      	mov	r1, r3
 800573a:	6a38      	ldr	r0, [r7, #32]
 800573c:	f7fb f9f8 	bl	8000b30 <lfs_min>
 8005740:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d026      	beq.n	800579c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f103 0408 	add.w	r4, r3, #8
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800575e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	889b      	ldrh	r3, [r3, #4]
 8005764:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005766:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8005772:	69b8      	ldr	r0, [r7, #24]
 8005774:	9005      	str	r0, [sp, #20]
 8005776:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005778:	9004      	str	r0, [sp, #16]
 800577a:	9103      	str	r1, [sp, #12]
 800577c:	9302      	str	r3, [sp, #8]
 800577e:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <lfs_file_flushedread+0x1a0>)
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	9200      	str	r2, [sp, #0]
 8005784:	462b      	mov	r3, r5
 8005786:	2200      	movs	r2, #0
 8005788:	4621      	mov	r1, r4
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7fc fab5 	bl	8001cfa <lfs_dir_getread>
 8005790:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01d      	beq.n	80057d4 <lfs_file_flushedread+0x164>
                return err;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	e034      	b.n	8005806 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057a6:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	9103      	str	r1, [sp, #12]
 80057b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057b6:	9102      	str	r1, [sp, #8]
 80057b8:	9201      	str	r2, [sp, #4]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4623      	mov	r3, r4
 80057be:	4602      	mov	r2, r0
 80057c0:	2100      	movs	r1, #0
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7fb fa90 	bl	8000ce8 <lfs_bd_read>
 80057c8:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <lfs_file_flushedread+0x164>
                return err;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	e018      	b.n	8005806 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	441a      	add	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	441a      	add	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80057ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	4413      	add	r3, r2
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f47f af56 	bne.w	80056b0 <lfs_file_flushedread+0x40>
    }

    return size;
 8005804:	683b      	ldr	r3, [r7, #0]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3728      	adds	r7, #40	@ 0x28
 800580a:	46bd      	mov	sp, r7
 800580c:	bdb0      	pop	{r4, r5, r7, pc}
 800580e:	bf00      	nop
 8005810:	fff7fc00 	.word	0xfff7fc00

08005814 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <lfs_file_rawread+0x28>
 800582e:	4b11      	ldr	r3, [pc, #68]	@ (8005874 <lfs_file_rawread+0x60>)
 8005830:	4a11      	ldr	r2, [pc, #68]	@ (8005878 <lfs_file_rawread+0x64>)
 8005832:	f640 41ea 	movw	r1, #3306	@ 0xcea
 8005836:	4811      	ldr	r0, [pc, #68]	@ (800587c <lfs_file_rawread+0x68>)
 8005838:	f004 f9c2 	bl	8009bc0 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fdb0 	bl	80053b0 <lfs_file_flush>
 8005850:	6178      	str	r0, [r7, #20]
        if (err) {
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <lfs_file_rawread+0x48>
            return err;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	e006      	b.n	800586a <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff ff04 	bl	8005670 <lfs_file_flushedread>
 8005868:	4603      	mov	r3, r0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	0800af20 	.word	0x0800af20
 8005878:	0800b5ec 	.word	0x0800b5ec
 800587c:	0800ac04 	.word	0x0800ac04

08005880 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005880:	b5b0      	push	{r4, r5, r7, lr}
 8005882:	b090      	sub	sp, #64	@ 0x40
 8005884:	af04      	add	r7, sp, #16
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 810c 	beq.w	8005abc <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	441a      	add	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fb f92c 	bl	8000b10 <lfs_max>
 80058b8:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                (lfs->cfg->metadata_max ?
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 80058d0:	08db      	lsrs	r3, r3, #3
 80058d2:	e003      	b.n	80058dc <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058d8:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80058da:	08db      	lsrs	r3, r3, #3
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fb f926 	bl	8000b30 <lfs_min>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4619      	mov	r1, r3
 80058e8:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 80058ec:	f7fb f920 	bl	8000b30 <lfs_min>
 80058f0:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80058f2:	429c      	cmp	r4, r3
 80058f4:	f240 80e2 	bls.w	8005abc <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff fd36 	bl	800536c <lfs_file_outline>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80d9 	beq.w	8005abc <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	e0d5      	b.n	8005ac6 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800592e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d16b      	bne.n	8005a0c <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d157      	bne.n	80059f0 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d12d      	bne.n	80059a8 <lfs_file_flushedwrite+0x128>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d029      	beq.n	80059a8 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005966:	3a01      	subs	r2, #1
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	3138      	adds	r1, #56	@ 0x38
 800596c:	68b8      	ldr	r0, [r7, #8]
 800596e:	303c      	adds	r0, #60	@ 0x3c
 8005970:	9003      	str	r0, [sp, #12]
 8005972:	9102      	str	r1, [sp, #8]
 8005974:	9201      	str	r2, [sp, #4]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	462b      	mov	r3, r5
 800597a:	4622      	mov	r2, r4
 800597c:	2100      	movs	r1, #0
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff f83d 	bl	80049fe <lfs_ctz_find>
 8005984:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	e094      	b.n	8005ac6 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3340      	adds	r3, #64	@ 0x40
 80059a0:	4619      	mov	r1, r3
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7fb f989 	bl	8000cba <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7fb ffd1 	bl	8001950 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80059b4:	68fc      	ldr	r4, [r7, #12]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	3238      	adds	r2, #56	@ 0x38
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	313c      	adds	r1, #60	@ 0x3c
 80059c6:	9102      	str	r1, [sp, #8]
 80059c8:	9201      	str	r2, [sp, #4]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	462b      	mov	r3, r5
 80059ce:	4622      	mov	r2, r4
 80059d0:	4601      	mov	r1, r0
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff f87e 	bl	8004ad4 <lfs_ctz_extend>
 80059d8:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00f      	beq.n	8005a00 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	e06a      	b.n	8005ac6 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f06f 0201 	mvn.w	r2, #1
 80059f6:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a1c:	f7fb f888 	bl	8000b30 <lfs_min>
 8005a20:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8005a28:	68fc      	ldr	r4, [r7, #12]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a32:	69b9      	ldr	r1, [r7, #24]
 8005a34:	9103      	str	r1, [sp, #12]
 8005a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a38:	9102      	str	r1, [sp, #8]
 8005a3a:	9201      	str	r2, [sp, #4]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4622      	mov	r2, r4
 8005a42:	4601      	mov	r1, r0
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7fb fb95 	bl	8001174 <lfs_bd_prog>
 8005a4a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01c      	beq.n	8005a8c <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005a58:	d007      	beq.n	8005a6a <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	e02d      	b.n	8005ac6 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8005a6a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff fba2 	bl	80051b8 <lfs_file_relocate>
 8005a74:	6178      	str	r0, [r7, #20]
            if (err) {
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0d2      	beq.n	8005a22 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	e01c      	b.n	8005ac6 <lfs_file_flushedwrite+0x246>
            break;
 8005a8c:	bf00      	nop
            }
        }

        file->pos += diff;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	441a      	add	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8005aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	4413      	add	r3, r2
 8005aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8005aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ack(lfs);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7fb ff4a 	bl	8001950 <lfs_alloc_ack>
    while (nsize > 0) {
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f47f af2b 	bne.w	800591a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005ac4:	683b      	ldr	r3, [r7, #0]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3730      	adds	r7, #48	@ 0x30
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bdb0      	pop	{r4, r5, r7, pc}

08005ace <lfs_file_rawseek>:
    return nsize;
}
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b08c      	sub	sp, #48	@ 0x30
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <lfs_file_rawseek+0x20>
        npos = off;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aec:	e025      	b.n	8005b3a <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d10f      	bne.n	8005b14 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	da02      	bge.n	8005b08 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8005b02:	f06f 0315 	mvn.w	r3, #21
 8005b06:	e067      	b.n	8005bd8 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b12:	e012      	b.n	8005b3a <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d10f      	bne.n	8005b3a <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f875 	bl	8005c0c <lfs_file_rawsize>
 8005b22:	4602      	mov	r2, r0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	da02      	bge.n	8005b36 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8005b30:	f06f 0315 	mvn.w	r3, #21
 8005b34:	e050      	b.n	8005bd8 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d902      	bls.n	8005b4a <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8005b44:	f06f 0315 	mvn.w	r3, #21
 8005b48:	e046      	b.n	8005bd8 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d101      	bne.n	8005b58 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8005b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b56:	e03f      	b.n	8005bd8 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d12b      	bne.n	8005bbc <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fe ff0c 	bl	800498e <lfs_ctz_index>
 8005b76:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8005b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7a:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4619      	mov	r1, r3
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7fe ff03 	bl	800498e <lfs_ctz_index>
 8005b88:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d114      	bne.n	8005bbc <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d80f      	bhi.n	8005bbc <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba4:	441a      	add	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d907      	bls.n	8005bbc <lfs_file_rawseek+0xee>
            file->pos = npos;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb0:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	e00d      	b.n	8005bd8 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fbf6 	bl	80053b0 <lfs_file_flush>
 8005bc4:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <lfs_file_rawseek+0x102>
        return err;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	e003      	b.n	8005bd8 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd4:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3730      	adds	r7, #48	@ 0x30
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8005bea:	2300      	movs	r3, #0
 8005bec:	2200      	movs	r2, #0
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff6c 	bl	8005ace <lfs_file_rawseek>
 8005bf6:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da01      	bge.n	8005c02 <lfs_file_rawrewind+0x22>
        return (int)res;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	e000      	b.n	8005c04 <lfs_file_rawrewind+0x24>
    }

    return 0;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f7fa ff6f 	bl	8000b10 <lfs_max>
 8005c32:	4603      	mov	r3, r0
 8005c34:	e001      	b.n	8005c3a <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <lfs_rawremove>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b0a0      	sub	sp, #128	@ 0x80
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f8f0 	bl	8006e34 <lfs_fs_forceconsistency>
 8005c54:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8005c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <lfs_rawremove+0x1c>
        return err;
 8005c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c5e:	e0c4      	b.n	8005dea <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8005c60:	463a      	mov	r2, r7
 8005c62:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005c66:	2300      	movs	r3, #0
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fd f963 	bl	8002f34 <lfs_dir_find>
 8005c6e:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8005c70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	db09      	blt.n	8005c8a <lfs_rawremove+0x46>
 8005c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fb fc71 	bl	8001560 <lfs_tag_id>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d107      	bne.n	8005c9a <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8005c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	da01      	bge.n	8005c94 <lfs_rawremove+0x50>
 8005c90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c92:	e0aa      	b.n	8005dea <lfs_rawremove+0x1a6>
 8005c94:	f06f 0315 	mvn.w	r3, #21
 8005c98:	e0a7      	b.n	8005dea <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8005ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fb fc32 	bl	800150c <lfs_tag_type3>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d14a      	bne.n	8005d44 <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8005cae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fb fc55 	bl	8001560 <lfs_tag_id>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8005cba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cbe:	f043 0308 	orr.w	r3, r3, #8
 8005cc2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005cc6:	f107 020c 	add.w	r2, r7, #12
 8005cca:	9200      	str	r2, [sp, #0]
 8005ccc:	4a49      	ldr	r2, [pc, #292]	@ (8005df4 <lfs_rawremove+0x1b0>)
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb fff8 	bl	8001cc4 <lfs_dir_get>
 8005cd4:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8005cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da01      	bge.n	8005ce0 <lfs_rawremove+0x9c>
            return (int)res;
 8005cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cde:	e084      	b.n	8005dea <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8005ce0:	f107 030c 	add.w	r3, r7, #12
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fb fbac 	bl	8001442 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8005cea:	f107 020c 	add.w	r2, r7, #12
 8005cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fd f884 	bl	8002e04 <lfs_dir_fetch>
 8005cfc:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <lfs_rawremove+0xc4>
            return err;
 8005d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d06:	e070      	b.n	8005dea <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8005d08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <lfs_rawremove+0xd4>
 8005d10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8005d18:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8005d1c:	e065      	b.n	8005dea <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8005d1e:	2101      	movs	r1, #1
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fe09 	bl	8006938 <lfs_fs_preporphans>
 8005d26:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <lfs_rawremove+0xee>
            return err;
 8005d2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d30:	e05b      	b.n	8005dea <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005d42:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8005d44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fb fc0a 	bl	8001560 <lfs_tag_id>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	029b      	lsls	r3, r3, #10
 8005d50:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005d54:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	623b      	str	r3, [r7, #32]
 8005d5e:	f107 021c 	add.w	r2, r7, #28
 8005d62:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005d66:	2301      	movs	r3, #1
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fe fdeb 	bl	8004944 <lfs_dir_commit>
 8005d6e:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8005d70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 8005d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8005d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d7e:	e034      	b.n	8005dea <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8005d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8005d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fb fbbf 	bl	800150c <lfs_tag_type3>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d129      	bne.n	8005de8 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8005d94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fdcd 	bl	8006938 <lfs_fs_preporphans>
 8005d9e:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <lfs_rawremove+0x166>
            return err;
 8005da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da8:	e01f      	b.n	8005dea <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8005daa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8005dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005db2:	3308      	adds	r3, #8
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fcde 	bl	8006778 <lfs_fs_pred>
 8005dbc:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <lfs_rawremove+0x184>
            return err;
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dc6:	e010      	b.n	8005dea <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8005dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dcc:	f103 0208 	add.w	r2, r3, #8
 8005dd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fd fc12 	bl	8003600 <lfs_dir_drop>
 8005ddc:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <lfs_rawremove+0x1a4>
            return err;
 8005de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005de6:	e000      	b.n	8005dea <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3778      	adds	r7, #120	@ 0x78
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	700ffc00 	.word	0x700ffc00

08005df8 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	669a      	str	r2, [r3, #104]	@ 0x68
    int err = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <lfs_init+0x2c>
 8005e16:	4b92      	ldr	r3, [pc, #584]	@ (8006060 <lfs_init+0x268>)
 8005e18:	4a92      	ldr	r2, [pc, #584]	@ (8006064 <lfs_init+0x26c>)
 8005e1a:	f640 7146 	movw	r1, #3910	@ 0xf46
 8005e1e:	4892      	ldr	r0, [pc, #584]	@ (8006068 <lfs_init+0x270>)
 8005e20:	f003 fece 	bl	8009bc0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <lfs_init+0x44>
 8005e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800606c <lfs_init+0x274>)
 8005e30:	4a8c      	ldr	r2, [pc, #560]	@ (8006064 <lfs_init+0x26c>)
 8005e32:	f640 7147 	movw	r1, #3911	@ 0xf47
 8005e36:	488c      	ldr	r0, [pc, #560]	@ (8006068 <lfs_init+0x270>)
 8005e38:	f003 fec2 	bl	8009bc0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <lfs_init+0x5c>
 8005e46:	4b8a      	ldr	r3, [pc, #552]	@ (8006070 <lfs_init+0x278>)
 8005e48:	4a86      	ldr	r2, [pc, #536]	@ (8006064 <lfs_init+0x26c>)
 8005e4a:	f640 7148 	movw	r1, #3912	@ 0xf48
 8005e4e:	4886      	ldr	r0, [pc, #536]	@ (8006068 <lfs_init+0x270>)
 8005e50:	f003 feb6 	bl	8009bc0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e5e:	6952      	ldr	r2, [r2, #20]
 8005e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e64:	fb01 f202 	mul.w	r2, r1, r2
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d006      	beq.n	8005e7c <lfs_init+0x84>
 8005e6e:	4b81      	ldr	r3, [pc, #516]	@ (8006074 <lfs_init+0x27c>)
 8005e70:	4a7c      	ldr	r2, [pc, #496]	@ (8006064 <lfs_init+0x26c>)
 8005e72:	f640 714c 	movw	r1, #3916	@ 0xf4c
 8005e76:	487c      	ldr	r0, [pc, #496]	@ (8006068 <lfs_init+0x270>)
 8005e78:	f003 fea2 	bl	8009bc0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e86:	6992      	ldr	r2, [r2, #24]
 8005e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e8c:	fb01 f202 	mul.w	r2, r1, r2
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <lfs_init+0xac>
 8005e96:	4b78      	ldr	r3, [pc, #480]	@ (8006078 <lfs_init+0x280>)
 8005e98:	4a72      	ldr	r2, [pc, #456]	@ (8006064 <lfs_init+0x26c>)
 8005e9a:	f640 714d 	movw	r1, #3917	@ 0xf4d
 8005e9e:	4872      	ldr	r0, [pc, #456]	@ (8006068 <lfs_init+0x270>)
 8005ea0:	f003 fe8e 	bl	8009bc0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005eae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eb4:	fb01 f202 	mul.w	r2, r1, r2
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <lfs_init+0xd4>
 8005ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800607c <lfs_init+0x284>)
 8005ec0:	4a68      	ldr	r2, [pc, #416]	@ (8006064 <lfs_init+0x26c>)
 8005ec2:	f640 714e 	movw	r1, #3918	@ 0xf4e
 8005ec6:	4868      	ldr	r0, [pc, #416]	@ (8006068 <lfs_init+0x270>)
 8005ec8:	f003 fe7a 	bl	8009bc0 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	3b08      	subs	r3, #8
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fa fe5e 	bl	8000b9e <lfs_npw2>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	009a      	lsls	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d906      	bls.n	8005efe <lfs_init+0x106>
 8005ef0:	4b63      	ldr	r3, [pc, #396]	@ (8006080 <lfs_init+0x288>)
 8005ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8006064 <lfs_init+0x26c>)
 8005ef4:	f640 7151 	movw	r1, #3921	@ 0xf51
 8005ef8:	485b      	ldr	r0, [pc, #364]	@ (8006068 <lfs_init+0x270>)
 8005efa:	f003 fe61 	bl	8009bc0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <lfs_init+0x11e>
 8005f08:	4b5e      	ldr	r3, [pc, #376]	@ (8006084 <lfs_init+0x28c>)
 8005f0a:	4a56      	ldr	r2, [pc, #344]	@ (8006064 <lfs_init+0x26c>)
 8005f0c:	f640 715a 	movw	r1, #3930	@ 0xf5a
 8005f10:	4855      	ldr	r0, [pc, #340]	@ (8006068 <lfs_init+0x270>)
 8005f12:	f003 fe55 	bl	8009bc0 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	e010      	b.n	8005f4e <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fa fe9b 	bl	8000c6e <lfs_malloc>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8005f46:	f06f 030b 	mvn.w	r3, #11
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8005f4c:	e0fd      	b.n	800614a <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	61da      	str	r2, [r3, #28]
 8005f62:	e010      	b.n	8005f86 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fa fe7f 	bl	8000c6e <lfs_malloc>
 8005f70:	4602      	mov	r2, r0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8005f7e:	f06f 030b 	mvn.w	r3, #11
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8005f84:	e0e1      	b.n	800614a <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fa fe95 	bl	8000cba <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3310      	adds	r3, #16
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fa fe8f 	bl	8000cba <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <lfs_init+0x1bc>
 8005fa6:	4b38      	ldr	r3, [pc, #224]	@ (8006088 <lfs_init+0x290>)
 8005fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8006064 <lfs_init+0x26c>)
 8005faa:	f640 7178 	movw	r1, #3960	@ 0xf78
 8005fae:	482e      	ldr	r0, [pc, #184]	@ (8006068 <lfs_init+0x270>)
 8005fb0:	f003 fe06 	bl	8009bc0 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <lfs_init+0x1d8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <lfs_init+0x1e6>
 8005fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800608c <lfs_init+0x294>)
 8005fd2:	4a24      	ldr	r2, [pc, #144]	@ (8006064 <lfs_init+0x26c>)
 8005fd4:	f640 7179 	movw	r1, #3961	@ 0xf79
 8005fd8:	4823      	ldr	r0, [pc, #140]	@ (8006068 <lfs_init+0x270>)
 8005fda:	f003 fdf1 	bl	8009bc0 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	665a      	str	r2, [r3, #100]	@ 0x64
 8005ff2:	e010      	b.n	8006016 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fa fe37 	bl	8000c6e <lfs_malloc>
 8006000:	4602      	mov	r2, r0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->free.buffer) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800600e:	f06f 030b 	mvn.w	r3, #11
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006014:	e099      	b.n	800614a <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800601a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601c:	2bff      	cmp	r3, #255	@ 0xff
 800601e:	d906      	bls.n	800602e <lfs_init+0x236>
 8006020:	4b1b      	ldr	r3, [pc, #108]	@ (8006090 <lfs_init+0x298>)
 8006022:	4a10      	ldr	r2, [pc, #64]	@ (8006064 <lfs_init+0x26c>)
 8006024:	f640 7186 	movw	r1, #3974	@ 0xf86
 8006028:	480f      	ldr	r0, [pc, #60]	@ (8006068 <lfs_init+0x270>)
 800602a:	f003 fdc9 	bl	8009bc0 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (!lfs->name_max) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d102      	bne.n	8006046 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	22ff      	movs	r2, #255	@ 0xff
 8006044:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800604a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	da23      	bge.n	8006098 <lfs_init+0x2a0>
 8006050:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <lfs_init+0x29c>)
 8006052:	4a04      	ldr	r2, [pc, #16]	@ (8006064 <lfs_init+0x26c>)
 8006054:	f640 718c 	movw	r1, #3980	@ 0xf8c
 8006058:	4803      	ldr	r0, [pc, #12]	@ (8006068 <lfs_init+0x270>)
 800605a:	f003 fdb1 	bl	8009bc0 <__assert_func>
 800605e:	bf00      	nop
 8006060:	0800af80 	.word	0x0800af80
 8006064:	0800b600 	.word	0x0800b600
 8006068:	0800ac04 	.word	0x0800ac04
 800606c:	0800af9c 	.word	0x0800af9c
 8006070:	0800afb8 	.word	0x0800afb8
 8006074:	0800afd4 	.word	0x0800afd4
 8006078:	0800b004 	.word	0x0800b004
 800607c:	0800b034 	.word	0x0800b034
 8006080:	0800b068 	.word	0x0800b068
 8006084:	0800b0b4 	.word	0x0800b0b4
 8006088:	0800b0d0 	.word	0x0800b0d0
 800608c:	0800b0f0 	.word	0x0800b0f0
 8006090:	0800b144 	.word	0x0800b144
 8006094:	0800b160 	.word	0x0800b160
    lfs->file_max = lfs->cfg->file_max;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800609c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->file_max) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d103      	bne.n	80060b2 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80060b0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b8:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80060bc:	4293      	cmp	r3, r2
 80060be:	d906      	bls.n	80060ce <lfs_init+0x2d6>
 80060c0:	4b26      	ldr	r3, [pc, #152]	@ (800615c <lfs_init+0x364>)
 80060c2:	4a27      	ldr	r2, [pc, #156]	@ (8006160 <lfs_init+0x368>)
 80060c4:	f640 7192 	movw	r1, #3986	@ 0xf92
 80060c8:	4826      	ldr	r0, [pc, #152]	@ (8006164 <lfs_init+0x36c>)
 80060ca:	f003 fd79 	bl	8009bc0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->attr_max) {
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80060e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d906      	bls.n	8006106 <lfs_init+0x30e>
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <lfs_init+0x370>)
 80060fa:	4a19      	ldr	r2, [pc, #100]	@ (8006160 <lfs_init+0x368>)
 80060fc:	f640 7198 	movw	r1, #3992	@ 0xf98
 8006100:	4818      	ldr	r0, [pc, #96]	@ (8006164 <lfs_init+0x36c>)
 8006102:	f003 fd5d 	bl	8009bc0 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800610c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	333c      	adds	r3, #60	@ 0x3c
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3330      	adds	r3, #48	@ 0x30
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3348      	adds	r3, #72	@ 0x48
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8006146:	2300      	movs	r3, #0
 8006148:	e003      	b.n	8006152 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f80e 	bl	800616c <lfs_deinit>
    return err;
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006152:	4618      	mov	r0, r3
 8006154:	3730      	adds	r7, #48	@ 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	0800b184 	.word	0x0800b184
 8006160:	0800b600 	.word	0x0800b600
 8006164:	0800ac04 	.word	0x0800ac04
 8006168:	0800b1a0 	.word	0x0800b1a0

0800616c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fa fd7f 	bl	8000c86 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800618c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa fd75 	bl	8000c86 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fa fd6b 	bl	8000c86 <lfs_free>
    }

    return 0;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <lfs_rawmount>:
    return err;

}
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b09c      	sub	sp, #112	@ 0x70
 80061c0:	af04      	add	r7, sp, #16
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fe15 	bl	8005df8 <lfs_init>
 80061ce:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (err) {
 80061d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <lfs_rawmount+0x1e>
        return err;
 80061d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d8:	e192      	b.n	8006500 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80061da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80061de:	2220      	movs	r2, #32
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f003 feec 	bl	8009fc0 <memset>
 80061e8:	2301      	movs	r3, #1
 80061ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    lfs_block_t cycle = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 80061f0:	e10b      	b.n	800640a <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d303      	bcc.n	8006208 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8006200:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006204:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8006206:	e177      	b.n	80064f8 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8006208:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800620a:	3301      	adds	r3, #1
 800620c:	65bb      	str	r3, [r7, #88]	@ 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
 8006212:	4b8a      	ldr	r3, [pc, #552]	@ (800643c <lfs_rawmount+0x280>)
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006216:	2308      	movs	r3, #8
 8006218:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800621a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800621e:	f103 0218 	add.w	r2, r3, #24
 8006222:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8006226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800622a:	9303      	str	r3, [sp, #12]
 800622c:	4b84      	ldr	r3, [pc, #528]	@ (8006440 <lfs_rawmount+0x284>)
 800622e:	9302      	str	r3, [sp, #8]
 8006230:	2300      	movs	r3, #0
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	4b83      	ldr	r3, [pc, #524]	@ (8006444 <lfs_rawmount+0x288>)
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4b83      	ldr	r3, [pc, #524]	@ (8006448 <lfs_rawmount+0x28c>)
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc fa74 	bl	8002728 <lfs_dir_fetchmatch>
 8006240:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006244:	2b00      	cmp	r3, #0
 8006246:	da02      	bge.n	800624e <lfs_rawmount+0x92>
            err = tag;
 8006248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800624a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800624c:	e154      	b.n	80064f8 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800624e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 80cd 	beq.w	80063f0 <lfs_rawmount+0x234>
 8006256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006258:	4618      	mov	r0, r3
 800625a:	f7fb f934 	bl	80014c6 <lfs_tag_isdelete>
 800625e:	4603      	mov	r3, r0
 8006260:	f083 0301 	eor.w	r3, r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80c2 	beq.w	80063f0 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 800626c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006278:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800627c:	f107 030c 	add.w	r3, r7, #12
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4b72      	ldr	r3, [pc, #456]	@ (800644c <lfs_rawmount+0x290>)
 8006284:	4a70      	ldr	r2, [pc, #448]	@ (8006448 <lfs_rawmount+0x28c>)
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fb fd1c 	bl	8001cc4 <lfs_dir_get>
 800628c:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800628e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006290:	2b00      	cmp	r3, #0
 8006292:	da02      	bge.n	800629a <lfs_rawmount+0xde>
                err = tag;
 8006294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006296:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8006298:	e12e      	b.n	80064f8 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 800629a:	f107 030c 	add.w	r3, r7, #12
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fb fa96 	bl	80017d0 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80062b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <lfs_rawmount+0x106>
 80062ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d011      	beq.n	80062e6 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 80062c2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80062c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80062ca:	4961      	ldr	r1, [pc, #388]	@ (8006450 <lfs_rawmount+0x294>)
 80062cc:	9101      	str	r1, [sp, #4]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	f241 0233 	movw	r2, #4147	@ 0x1033
 80062d6:	495f      	ldr	r1, [pc, #380]	@ (8006454 <lfs_rawmount+0x298>)
 80062d8:	485f      	ldr	r0, [pc, #380]	@ (8006458 <lfs_rawmount+0x29c>)
 80062da:	f003 fe21 	bl	8009f20 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 80062de:	f06f 0315 	mvn.w	r3, #21
 80062e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80062e4:	e083      	b.n	80063ee <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d018      	beq.n	800631e <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d910      	bls.n	8006318 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062fc:	4954      	ldr	r1, [pc, #336]	@ (8006450 <lfs_rawmount+0x294>)
 80062fe:	9101      	str	r1, [sp, #4]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	f241 023c 	movw	r2, #4156	@ 0x103c
 8006308:	4952      	ldr	r1, [pc, #328]	@ (8006454 <lfs_rawmount+0x298>)
 800630a:	4854      	ldr	r0, [pc, #336]	@ (800645c <lfs_rawmount+0x2a0>)
 800630c:	f003 fe08 	bl	8009f20 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006310:	f06f 0315 	mvn.w	r3, #21
 8006314:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 8006316:	e06a      	b.n	80063ee <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            if (superblock.file_max) {
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d018      	beq.n	8006356 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632a:	429a      	cmp	r2, r3
 800632c:	d910      	bls.n	8006350 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006334:	4946      	ldr	r1, [pc, #280]	@ (8006450 <lfs_rawmount+0x294>)
 8006336:	9101      	str	r1, [sp, #4]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	4613      	mov	r3, r2
 800633c:	f241 0247 	movw	r2, #4167	@ 0x1047
 8006340:	4944      	ldr	r1, [pc, #272]	@ (8006454 <lfs_rawmount+0x298>)
 8006342:	4847      	ldr	r0, [pc, #284]	@ (8006460 <lfs_rawmount+0x2a4>)
 8006344:	f003 fdec 	bl	8009f20 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006348:	f06f 0315 	mvn.w	r3, #21
 800634c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 800634e:	e04e      	b.n	80063ee <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.attr_max) {
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d018      	beq.n	800638e <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 800635c:	6a3a      	ldr	r2, [r7, #32]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006362:	429a      	cmp	r2, r3
 8006364:	d910      	bls.n	8006388 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006366:	6a3a      	ldr	r2, [r7, #32]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636c:	4938      	ldr	r1, [pc, #224]	@ (8006450 <lfs_rawmount+0x294>)
 800636e:	9101      	str	r1, [sp, #4]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	f241 0252 	movw	r2, #4178	@ 0x1052
 8006378:	4936      	ldr	r1, [pc, #216]	@ (8006454 <lfs_rawmount+0x298>)
 800637a:	483a      	ldr	r0, [pc, #232]	@ (8006464 <lfs_rawmount+0x2a8>)
 800637c:	f003 fdd0 	bl	8009f20 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006380:	f06f 0315 	mvn.w	r3, #21
 8006384:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 8006386:	e032      	b.n	80063ee <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8006388:	6a3a      	ldr	r2, [r7, #32]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	429a      	cmp	r2, r3
 8006398:	d011      	beq.n	80063be <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	492b      	ldr	r1, [pc, #172]	@ (8006450 <lfs_rawmount+0x294>)
 80063a4:	9101      	str	r1, [sp, #4]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	f241 025c 	movw	r2, #4188	@ 0x105c
 80063ae:	4929      	ldr	r1, [pc, #164]	@ (8006454 <lfs_rawmount+0x298>)
 80063b0:	482d      	ldr	r0, [pc, #180]	@ (8006468 <lfs_rawmount+0x2ac>)
 80063b2:	f003 fdb5 	bl	8009f20 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80063b6:	f06f 0315 	mvn.w	r3, #21
 80063ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80063bc:	e017      	b.n	80063ee <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d012      	beq.n	80063f0 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	491f      	ldr	r1, [pc, #124]	@ (8006450 <lfs_rawmount+0x294>)
 80063d4:	9101      	str	r1, [sp, #4]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	4613      	mov	r3, r2
 80063da:	f241 0263 	movw	r2, #4195	@ 0x1063
 80063de:	491d      	ldr	r1, [pc, #116]	@ (8006454 <lfs_rawmount+0x298>)
 80063e0:	4822      	ldr	r0, [pc, #136]	@ (800646c <lfs_rawmount+0x2b0>)
 80063e2:	f003 fd9d 	bl	8009f20 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80063e6:	f06f 0315 	mvn.w	r3, #21
 80063ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80063ec:	bf00      	nop
            goto cleanup;
 80063ee:	e083      	b.n	80064f8 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fc fd1d 	bl	8002e3c <lfs_dir_getgstate>
 8006402:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err) {
 8006404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d175      	bne.n	80064f6 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 800640a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800640e:	3318      	adds	r3, #24
 8006410:	4618      	mov	r0, r3
 8006412:	f7fa ffa4 	bl	800135e <lfs_pair_isnull>
 8006416:	4603      	mov	r3, r0
 8006418:	f083 0301 	eor.w	r3, r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	f47f aee7 	bne.w	80061f2 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3320      	adds	r3, #32
 8006428:	4618      	mov	r0, r3
 800642a:	f7fa ff98 	bl	800135e <lfs_pair_isnull>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01d      	beq.n	8006470 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8006434:	f06f 0315 	mvn.w	r3, #21
 8006438:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800643a:	e05d      	b.n	80064f8 <lfs_rawmount+0x33c>
 800643c:	0800b1d0 	.word	0x0800b1d0
 8006440:	08002ea1 	.word	0x08002ea1
 8006444:	0ff00008 	.word	0x0ff00008
 8006448:	7ffffc00 	.word	0x7ffffc00
 800644c:	20100018 	.word	0x20100018
 8006450:	0800acf8 	.word	0x0800acf8
 8006454:	0800ac04 	.word	0x0800ac04
 8006458:	0800b1dc 	.word	0x0800b1dc
 800645c:	0800b208 	.word	0x0800b208
 8006460:	0800b23c 	.word	0x0800b23c
 8006464:	0800b270 	.word	0x0800b270
 8006468:	0800b2a4 	.word	0x0800b2a4
 800646c:	0800b2d8 	.word	0x0800b2d8
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3330      	adds	r3, #48	@ 0x30
 8006474:	4618      	mov	r0, r3
 8006476:	f7fb f8c9 	bl	800160c <lfs_gstate_iszero>
 800647a:	4603      	mov	r3, r0
 800647c:	f083 0301 	eor.w	r3, r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d010      	beq.n	80064a8 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006492:	481d      	ldr	r0, [pc, #116]	@ (8006508 <lfs_rawmount+0x34c>)
 8006494:	9002      	str	r0, [sp, #8]
 8006496:	9201      	str	r2, [sp, #4]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	460b      	mov	r3, r1
 800649c:	f241 0279 	movw	r2, #4217	@ 0x1079
 80064a0:	491a      	ldr	r1, [pc, #104]	@ (800650c <lfs_rawmount+0x350>)
 80064a2:	481b      	ldr	r0, [pc, #108]	@ (8006510 <lfs_rawmount+0x354>)
 80064a4:	f003 fd3c 	bl	8009f20 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fa fffc 	bl	80014aa <lfs_tag_isvalid>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f083 0301 	eor.w	r3, r3, #1
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	441a      	add	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	333c      	adds	r3, #60	@ 0x3c
 80064cc:	3230      	adds	r2, #48	@ 0x30
 80064ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80064d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80064dc:	6a12      	ldr	r2, [r2, #32]
 80064de:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e2:	fb01 f202 	mul.w	r2, r1, r2
 80064e6:	1a9a      	subs	r2, r3, r2
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fb fa3e 	bl	800196e <lfs_alloc_drop>

    return 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e004      	b.n	8006500 <lfs_rawmount+0x344>
            goto cleanup;
 80064f6:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f80b 	bl	8006514 <lfs_rawunmount>
    return err;
 80064fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8006500:	4618      	mov	r0, r3
 8006502:	3760      	adds	r7, #96	@ 0x60
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	0800acf8 	.word	0x0800acf8
 800650c:	0800ac04 	.word	0x0800ac04
 8006510:	0800b308 	.word	0x0800b308

08006514 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fe25 	bl	800616c <lfs_deinit>
 8006522:	4603      	mov	r3, r0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800652c:	b590      	push	{r4, r7, lr}
 800652e:	b09d      	sub	sp, #116	@ 0x74
 8006530:	af04      	add	r7, sp, #16
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800653a:	f107 0318 	add.w	r3, r7, #24
 800653e:	2220      	movs	r2, #32
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f003 fd3c 	bl	8009fc0 <memset>
 8006548:	2301      	movs	r3, #1
 800654a:	637b      	str	r3, [r7, #52]	@ 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006550:	e0a7      	b.n	80066a2 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006560:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006564:	e102      	b.n	800676c <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8006566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006568:	3301      	adds	r3, #1
 800656a:	65fb      	str	r3, [r7, #92]	@ 0x5c

        for (int i = 0; i < 2; i++) {
 800656c:	2300      	movs	r3, #0
 800656e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006570:	e013      	b.n	800659a <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8006572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006574:	3306      	adds	r3, #6
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	3360      	adds	r3, #96	@ 0x60
 800657a:	443b      	add	r3, r7
 800657c:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4611      	mov	r1, r2
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
 8006588:	63b8      	str	r0, [r7, #56]	@ 0x38
            if (err) {
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <lfs_fs_rawtraverse+0x68>
                return err;
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	e0eb      	b.n	800676c <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8006594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006596:	3301      	adds	r3, #1
 8006598:	65bb      	str	r3, [r7, #88]	@ 0x58
 800659a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800659c:	2b01      	cmp	r3, #1
 800659e:	dde8      	ble.n	8006572 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80065a0:	f107 0318 	add.w	r3, r7, #24
 80065a4:	f103 0218 	add.w	r2, r3, #24
 80065a8:	f107 0318 	add.w	r3, r7, #24
 80065ac:	4619      	mov	r1, r3
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7fc fc28 	bl	8002e04 <lfs_dir_fetch>
 80065b4:	6438      	str	r0, [r7, #64]	@ 0x40
        if (err) {
 80065b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <lfs_fs_rawtraverse+0x94>
            return err;
 80065bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065be:	e0d5      	b.n	800676c <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80065c6:	e067      	b.n	8006698 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80065c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80065cc:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80065ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065d2:	f043 0308 	orr.w	r3, r3, #8
 80065d6:	f107 0118 	add.w	r1, r7, #24
 80065da:	f107 0210 	add.w	r2, r7, #16
 80065de:	9200      	str	r2, [sp, #0]
 80065e0:	4a64      	ldr	r2, [pc, #400]	@ (8006774 <lfs_fs_rawtraverse+0x248>)
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7fb fb6e 	bl	8001cc4 <lfs_dir_get>
 80065e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
            if (tag < 0) {
 80065ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da05      	bge.n	80065fc <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 80065f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f2:	f113 0f02 	cmn.w	r3, #2
 80065f6:	d049      	beq.n	800668c <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 80065f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fa:	e0b7      	b.n	800676c <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 80065fc:	f107 0310 	add.w	r3, r7, #16
 8006600:	4618      	mov	r0, r3
 8006602:	f7fb f8b5 	bl	8001770 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006608:	4618      	mov	r0, r3
 800660a:	f7fa ff7f 	bl	800150c <lfs_tag_type3>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	f240 2302 	movw	r3, #514	@ 0x202
 8006616:	429a      	cmp	r2, r3
 8006618:	d113      	bne.n	8006642 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	6938      	ldr	r0, [r7, #16]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	9202      	str	r2, [sp, #8]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	9201      	str	r2, [sp, #4]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	4603      	mov	r3, r0
 800662c:	460a      	mov	r2, r1
 800662e:	2100      	movs	r1, #0
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7fe fb57 	bl	8004ce4 <lfs_ctz_traverse>
 8006636:	6438      	str	r0, [r7, #64]	@ 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8006638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d027      	beq.n	800668e <lfs_fs_rawtraverse+0x162>
                    return err;
 800663e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006640:	e094      	b.n	800676c <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d022      	beq.n	800668e <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8006648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800664a:	4618      	mov	r0, r3
 800664c:	f7fa ff5e 	bl	800150c <lfs_tag_type3>
 8006650:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006656:	d11a      	bne.n	800668e <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8006658:	2300      	movs	r3, #0
 800665a:	653b      	str	r3, [r7, #80]	@ 0x50
 800665c:	e012      	b.n	8006684 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800665e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	f107 0210 	add.w	r2, r7, #16
 8006666:	4413      	add	r3, r2
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4611      	mov	r1, r2
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
 8006672:	6438      	str	r0, [r7, #64]	@ 0x40
                    if (err) {
 8006674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <lfs_fs_rawtraverse+0x152>
                        return err;
 800667a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800667c:	e076      	b.n	800676c <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 800667e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006680:	3301      	adds	r3, #1
 8006682:	653b      	str	r3, [r7, #80]	@ 0x50
 8006684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006686:	2b01      	cmp	r3, #1
 8006688:	dde9      	ble.n	800665e <lfs_fs_rawtraverse+0x132>
 800668a:	e000      	b.n	800668e <lfs_fs_rawtraverse+0x162>
                    continue;
 800668c:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800668e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006692:	3301      	adds	r3, #1
 8006694:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006698:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800669a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800669e:	429a      	cmp	r2, r3
 80066a0:	d392      	bcc.n	80065c8 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 80066a2:	f107 0318 	add.w	r3, r7, #24
 80066a6:	3318      	adds	r3, #24
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fa fe58 	bl	800135e <lfs_pair_isnull>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f083 0301 	eor.w	r3, r3, #1
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f47f af4b 	bne.w	8006552 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c2:	e04f      	b.n	8006764 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 80066c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c6:	799b      	ldrb	r3, [r3, #6]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d147      	bne.n	800675c <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80066cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01d      	beq.n	8006714 <lfs_fs_rawtraverse+0x1e8>
 80066d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d117      	bne.n	8006714 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80066e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ee:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80066f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	9202      	str	r2, [sp, #8]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	9201      	str	r2, [sp, #4]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	4623      	mov	r3, r4
 8006700:	4602      	mov	r2, r0
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7fe faee 	bl	8004ce4 <lfs_ctz_traverse>
 8006708:	64b8      	str	r0, [r7, #72]	@ 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800670a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8006710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006712:	e02b      	b.n	800676c <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01e      	beq.n	800675e <lfs_fs_rawtraverse+0x232>
 8006720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d118      	bne.n	800675e <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800672c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800672e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006736:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8006738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800673a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	9202      	str	r2, [sp, #8]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	9201      	str	r2, [sp, #4]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4623      	mov	r3, r4
 8006748:	4602      	mov	r2, r0
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7fe faca 	bl	8004ce4 <lfs_ctz_traverse>
 8006750:	6478      	str	r0, [r7, #68]	@ 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8006752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <lfs_fs_rawtraverse+0x232>
                return err;
 8006758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800675a:	e007      	b.n	800676c <lfs_fs_rawtraverse+0x240>
            continue;
 800675c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800675e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1ac      	bne.n	80066c4 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3764      	adds	r7, #100	@ 0x64
 8006770:	46bd      	mov	sp, r7
 8006772:	bd90      	pop	{r4, r7, pc}
 8006774:	700ffc00 	.word	0x700ffc00

08006778 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006794:	e024      	b.n	80067e0 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80067a4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80067a8:	e027      	b.n	80067fa <lfs_fs_pred+0x82>
        }
        cycle += 1;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	3301      	adds	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3318      	adds	r3, #24
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fa fdec 	bl	8001394 <lfs_pair_cmp>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <lfs_fs_pred+0x4e>
            return 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e019      	b.n	80067fa <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3318      	adds	r3, #24
 80067ca:	461a      	mov	r2, r3
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7fc fb18 	bl	8002e04 <lfs_dir_fetch>
 80067d4:	6138      	str	r0, [r7, #16]
        if (err) {
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <lfs_fs_pred+0x68>
            return err;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	e00c      	b.n	80067fa <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3318      	adds	r3, #24
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fa fdba 	bl	800135e <lfs_pair_isnull>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f083 0301 	eor.w	r3, r3, #1
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1cf      	bne.n	8006796 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80067f6:	f06f 0301 	mvn.w	r3, #1
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006802:	b5b0      	push	{r4, r5, r7, lr}
 8006804:	b08e      	sub	sp, #56	@ 0x38
 8006806:	af04      	add	r7, sp, #16
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006822:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006828:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8006832:	2108      	movs	r1, #8
 8006834:	9103      	str	r1, [sp, #12]
 8006836:	f107 0110 	add.w	r1, r7, #16
 800683a:	9102      	str	r1, [sp, #8]
 800683c:	9201      	str	r2, [sp, #4]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	462b      	mov	r3, r5
 8006842:	4622      	mov	r2, r4
 8006844:	4601      	mov	r1, r0
 8006846:	6a38      	ldr	r0, [r7, #32]
 8006848:	f7fa fa4e 	bl	8000ce8 <lfs_bd_read>
 800684c:	61b8      	str	r0, [r7, #24]
    if (err) {
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <lfs_fs_parent_match+0x56>
        return err;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	e012      	b.n	800687e <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006858:	f107 0310 	add.w	r3, r7, #16
 800685c:	4618      	mov	r0, r3
 800685e:	f7fa fdf0 	bl	8001442 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	f107 0310 	add.w	r3, r7, #16
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f7fa fd91 	bl	8001394 <lfs_pair_cmp>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
}
 800687e:	4618      	mov	r0, r3
 8006880:	3728      	adds	r7, #40	@ 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006888 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b08e      	sub	sp, #56	@ 0x38
 800688c:	af04      	add	r7, sp, #16
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 80068a4:	e030      	b.n	8006908 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d302      	bcc.n	80068ba <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80068b4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80068b8:	e033      	b.n	8006922 <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	3301      	adds	r3, #1
 80068be:	627b      	str	r3, [r7, #36]	@ 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80068ce:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	3304      	adds	r3, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80068d6:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	9303      	str	r3, [sp, #12]
 80068de:	4b13      	ldr	r3, [pc, #76]	@ (800692c <lfs_fs_parent+0xa4>)
 80068e0:	9302      	str	r3, [sp, #8]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	4b12      	ldr	r3, [pc, #72]	@ (8006930 <lfs_fs_parent+0xa8>)
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	4b12      	ldr	r3, [pc, #72]	@ (8006934 <lfs_fs_parent+0xac>)
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7fb ff1a 	bl	8002728 <lfs_dir_fetchmatch>
 80068f4:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <lfs_fs_parent+0x80>
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f113 0f02 	cmn.w	r3, #2
 8006902:	d001      	beq.n	8006908 <lfs_fs_parent+0x80>
            return tag;
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	e00c      	b.n	8006922 <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3318      	adds	r3, #24
 800690c:	4618      	mov	r0, r3
 800690e:	f7fa fd26 	bl	800135e <lfs_pair_isnull>
 8006912:	4603      	mov	r3, r0
 8006914:	f083 0301 	eor.w	r3, r3, #1
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1c3      	bne.n	80068a6 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800691e:	f06f 0301 	mvn.w	r3, #1
}
 8006922:	4618      	mov	r0, r3
 8006924:	3728      	adds	r7, #40	@ 0x28
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	08006803 	.word	0x08006803
 8006930:	20000008 	.word	0x20000008
 8006934:	7ff003ff 	.word	0x7ff003ff

08006938 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	4618      	mov	r0, r3
 800694a:	f7fa fe19 	bl	8001580 <lfs_tag_size>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <lfs_fs_preporphans+0x32>
 8006954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006958:	2b00      	cmp	r3, #0
 800695a:	da06      	bge.n	800696a <lfs_fs_preporphans+0x32>
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <lfs_fs_preporphans+0x68>)
 800695e:	4a11      	ldr	r2, [pc, #68]	@ (80069a4 <lfs_fs_preporphans+0x6c>)
 8006960:	f241 114c 	movw	r1, #4428	@ 0x114c
 8006964:	4810      	ldr	r0, [pc, #64]	@ (80069a8 <lfs_fs_preporphans+0x70>)
 8006966:	f003 f92b 	bl	8009bc0 <__assert_func>
    lfs->gstate.tag += orphans;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800696e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006972:	441a      	add	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3330      	adds	r3, #48	@ 0x30
 8006984:	4618      	mov	r0, r3
 8006986:	f7fa fe5e 	bl	8001646 <lfs_gstate_hasorphans>
 800698a:	4603      	mov	r3, r0
 800698c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800698e:	ea44 0203 	orr.w	r2, r4, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}
 80069a0:	0800b340 	.word	0x0800b340
 80069a4:	0800b60c 	.word	0x0800b60c
 80069a8:	0800ac04 	.word	0x0800ac04

080069ac <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	460b      	mov	r3, r1
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	4a17      	ldr	r2, [pc, #92]	@ (8006a1c <lfs_fs_prepmove+0x70>)
 80069c0:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80069c2:	897b      	ldrh	r3, [r7, #10]
 80069c4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80069c8:	428b      	cmp	r3, r1
 80069ca:	d006      	beq.n	80069da <lfs_fs_prepmove+0x2e>
 80069cc:	897b      	ldrh	r3, [r7, #10]
 80069ce:	029b      	lsls	r3, r3, #10
 80069d0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80069d4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80069d8:	e000      	b.n	80069dc <lfs_fs_prepmove+0x30>
 80069da:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80069e2:	897b      	ldrh	r3, [r7, #10]
 80069e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d002      	beq.n	80069f2 <lfs_fs_prepmove+0x46>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	e000      	b.n	80069f4 <lfs_fs_prepmove+0x48>
 80069f2:	2300      	movs	r3, #0
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80069f8:	897b      	ldrh	r3, [r7, #10]
 80069fa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d003      	beq.n	8006a0a <lfs_fs_prepmove+0x5e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3304      	adds	r3, #4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	e000      	b.n	8006a0c <lfs_fs_prepmove+0x60>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006a10:	bf00      	nop
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	800003ff 	.word	0x800003ff

08006a20 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006a20:	b5b0      	push	{r4, r5, r7, lr}
 8006a22:	b094      	sub	sp, #80	@ 0x50
 8006a24:	af04      	add	r7, sp, #16
 8006a26:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	333c      	adds	r3, #60	@ 0x3c
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fa fe2c 	bl	800168a <lfs_gstate_hasmove>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f083 0301 	eor.w	r3, r3, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <lfs_fs_demove+0x22>
        return 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e049      	b.n	8006ad6 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fa fd86 	bl	8001560 <lfs_tag_id>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	4b21      	ldr	r3, [pc, #132]	@ (8006ae0 <lfs_fs_demove+0xc0>)
 8006a5a:	9302      	str	r3, [sp, #8]
 8006a5c:	9201      	str	r2, [sp, #4]
 8006a5e:	9400      	str	r4, [sp, #0]
 8006a60:	462b      	mov	r3, r5
 8006a62:	f241 1266 	movw	r2, #4454	@ 0x1166
 8006a66:	491f      	ldr	r1, [pc, #124]	@ (8006ae4 <lfs_fs_demove+0xc4>)
 8006a68:	481f      	ldr	r0, [pc, #124]	@ (8006ae8 <lfs_fs_demove+0xc8>)
 8006a6a:	f003 fa59 	bl	8009f20 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006a74:	f107 0318 	add.w	r3, r7, #24
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fc f9c2 	bl	8002e04 <lfs_dir_fetch>
 8006a80:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8006a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <lfs_fs_demove+0x6c>
        return err;
 8006a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8a:	e024      	b.n	8006ad6 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fa fd65 	bl	8001560 <lfs_tag_id>
 8006a96:	4603      	mov	r3, r0
 8006a98:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ff83 	bl	80069ac <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006aa6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006aa8:	029b      	lsls	r3, r3, #10
 8006aaa:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006aae:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	f107 0210 	add.w	r2, r7, #16
 8006abc:	f107 0118 	add.w	r1, r7, #24
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fd ff3e 	bl	8004944 <lfs_dir_commit>
 8006ac8:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <lfs_fs_demove+0xb4>
        return err;
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad2:	e000      	b.n	8006ad6 <lfs_fs_demove+0xb6>
    }

    return 0;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3740      	adds	r7, #64	@ 0x40
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	0800acf8 	.word	0x0800acf8
 8006ae4:	0800ac04 	.word	0x0800ac04
 8006ae8:	0800b374 	.word	0x0800b374

08006aec <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006aec:	b5b0      	push	{r4, r5, r7, lr}
 8006aee:	b0b2      	sub	sp, #200	@ 0xc8
 8006af0:	af04      	add	r7, sp, #16
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3330      	adds	r3, #48	@ 0x30
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fa fda2 	bl	8001646 <lfs_gstate_hasorphans>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f083 0301 	eor.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <lfs_fs_deorphan+0x26>
        return 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e17c      	b.n	8006e0c <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f003 fa4d 	bl	8009fc0 <memset>
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006b30:	e148      	b.n	8006dc4 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	f103 0218 	add.w	r2, r3, #24
 8006b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fc f95f 	bl	8002e04 <lfs_dir_fetch>
 8006b46:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
            if (err) {
 8006b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <lfs_fs_deorphan+0x6c>
                return err;
 8006b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b56:	e159      	b.n	8006e0c <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006b58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b5c:	f083 0301 	eor.w	r3, r3, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8122 	beq.w	8006dac <lfs_fs_deorphan+0x2c0>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006b68:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8006b6c:	f107 030c 	add.w	r3, r7, #12
 8006b70:	3318      	adds	r3, #24
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fe87 	bl	8006888 <lfs_fs_parent>
 8006b7a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da07      	bge.n	8006b96 <lfs_fs_deorphan+0xaa>
 8006b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b8a:	f113 0f02 	cmn.w	r3, #2
 8006b8e:	d002      	beq.n	8006b96 <lfs_fs_deorphan+0xaa>
                    return tag;
 8006b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b94:	e13a      	b.n	8006e0c <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8006b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b9a:	f113 0f02 	cmn.w	r3, #2
 8006b9e:	d157      	bne.n	8006c50 <lfs_fs_deorphan+0x164>
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d054      	beq.n	8006c50 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006baa:	499a      	ldr	r1, [pc, #616]	@ (8006e14 <lfs_fs_deorphan+0x328>)
 8006bac:	9101      	str	r1, [sp, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	f241 12a1 	movw	r2, #4513	@ 0x11a1
 8006bb6:	4998      	ldr	r1, [pc, #608]	@ (8006e18 <lfs_fs_deorphan+0x32c>)
 8006bb8:	4898      	ldr	r0, [pc, #608]	@ (8006e1c <lfs_fs_deorphan+0x330>)
 8006bba:	f003 f9b1 	bl	8009f20 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8006bc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fc f936 	bl	8002e3c <lfs_dir_getgstate>
 8006bd0:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
                    if (err) {
 8006bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <lfs_fs_deorphan+0xf6>
                        return err;
 8006bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006be0:	e114      	b.n	8006e0c <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006be6:	3318      	adds	r3, #24
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fa fc44 	bl	8001476 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006bee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8006bf6:	051a      	lsls	r2, r3, #20
 8006bf8:	4b89      	ldr	r3, [pc, #548]	@ (8006e20 <lfs_fs_deorphan+0x334>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006c04:	3318      	adds	r3, #24
 8006c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c0a:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8006c0e:	f107 010c 	add.w	r1, r7, #12
 8006c12:	2301      	movs	r3, #1
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fd fb9b 	bl	8004350 <lfs_dir_orphaningcommit>
 8006c1a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006c1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006c22:	3318      	adds	r3, #24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fa fc0c 	bl	8001442 <lfs_pair_fromle32>
                    if (state < 0) {
 8006c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da02      	bge.n	8006c38 <lfs_fs_deorphan+0x14c>
                        return state;
 8006c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                    return tag;
 8006c36:	e0e9      	b.n	8006e0c <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8006c38:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	f040 80ba 	bne.w	8006dc2 <lfs_fs_deorphan+0x2d6>
                        goto restart;
 8006c4e:	e763      	b.n	8006b18 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8006c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c54:	f113 0f02 	cmn.w	r3, #2
 8006c58:	f000 80a8 	beq.w	8006dac <lfs_fs_deorphan+0x2c0>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006c5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c60:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8006c64:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	4a6d      	ldr	r2, [pc, #436]	@ (8006e24 <lfs_fs_deorphan+0x338>)
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb f828 	bl	8001cc4 <lfs_dir_get>
 8006c74:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	da02      	bge.n	8006c86 <lfs_fs_deorphan+0x19a>
                        return state;
 8006c80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c84:	e0c2      	b.n	8006e0c <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 8006c86:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fa fbd9 	bl	8001442 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8006c90:	f107 030c 	add.w	r3, r7, #12
 8006c94:	f103 0218 	add.w	r2, r3, #24
 8006c98:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fa fba2 	bl	80013e8 <lfs_pair_sync>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f083 0301 	eor.w	r3, r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d07d      	beq.n	8006dac <lfs_fs_deorphan+0x2c0>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006cb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8006cb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006cbc:	4c55      	ldr	r4, [pc, #340]	@ (8006e14 <lfs_fs_deorphan+0x328>)
 8006cbe:	9403      	str	r4, [sp, #12]
 8006cc0:	9102      	str	r1, [sp, #8]
 8006cc2:	9201      	str	r2, [sp, #4]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f241 12ca 	movw	r2, #4554	@ 0x11ca
 8006ccc:	4952      	ldr	r1, [pc, #328]	@ (8006e18 <lfs_fs_deorphan+0x32c>)
 8006cce:	4856      	ldr	r0, [pc, #344]	@ (8006e28 <lfs_fs_deorphan+0x33c>)
 8006cd0:	f003 f926 	bl	8009f20 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006cd4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8006cd8:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3330      	adds	r3, #48	@ 0x30
 8006ce0:	f107 020c 	add.w	r2, r7, #12
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fa fce2 	bl	80016b0 <lfs_gstate_hasmovehere>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01c      	beq.n	8006d2c <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fa fc32 	bl	8001560 <lfs_tag_id>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8006d0a:	4842      	ldr	r0, [pc, #264]	@ (8006e14 <lfs_fs_deorphan+0x328>)
 8006d0c:	9002      	str	r0, [sp, #8]
 8006d0e:	9201      	str	r2, [sp, #4]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	460b      	mov	r3, r1
 8006d14:	f241 12d5 	movw	r2, #4565	@ 0x11d5
 8006d18:	493f      	ldr	r1, [pc, #252]	@ (8006e18 <lfs_fs_deorphan+0x32c>)
 8006d1a:	4844      	ldr	r0, [pc, #272]	@ (8006e2c <lfs_fs_deorphan+0x340>)
 8006d1c:	f003 f900 	bl	8009f20 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006d20:	2200      	movs	r2, #0
 8006d22:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff fe40 	bl	80069ac <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006d2c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fa fba0 	bl	8001476 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006d36:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8006d3a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d007      	beq.n	8006d52 <lfs_fs_deorphan+0x266>
 8006d42:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8006d46:	029b      	lsls	r3, r3, #10
 8006d48:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006d4c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8006d50:	e000      	b.n	8006d54 <lfs_fs_deorphan+0x268>
 8006d52:	2300      	movs	r3, #0
 8006d54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d56:	2300      	movs	r3, #0
 8006d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d5c:	4b34      	ldr	r3, [pc, #208]	@ (8006e30 <lfs_fs_deorphan+0x344>)
 8006d5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d62:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006d66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d6a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8006d6e:	f107 010c 	add.w	r1, r7, #12
 8006d72:	2302      	movs	r3, #2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fd faeb 	bl	8004350 <lfs_dir_orphaningcommit>
 8006d7a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006d7e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fa fb5d 	bl	8001442 <lfs_pair_fromle32>
                        if (state < 0) {
 8006d88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	da02      	bge.n	8006d96 <lfs_fs_deorphan+0x2aa>
                            return state;
 8006d90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 8006d94:	e03a      	b.n	8006e0c <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 8006d96:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d10c      	bne.n	8006dc4 <lfs_fs_deorphan+0x2d8>
 8006daa:	e6b5      	b.n	8006b18 <lfs_fs_deorphan+0x2c>
                        continue;
                    }
                }
            }

            pdir = dir;
 8006dac:	f107 040c 	add.w	r4, r7, #12
 8006db0:	f107 052c 	add.w	r5, r7, #44	@ 0x2c
 8006db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006dc0:	e000      	b.n	8006dc4 <lfs_fs_deorphan+0x2d8>
                    continue;
 8006dc2:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	3318      	adds	r3, #24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fa fac7 	bl	800135e <lfs_pair_isnull>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f083 0301 	eor.w	r3, r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f47f aeaa 	bne.w	8006b32 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3330      	adds	r3, #48	@ 0x30
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fa fc42 	bl	800166c <lfs_gstate_getorphans>
 8006de8:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8006dea:	461a      	mov	r2, r3
 8006dec:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7f9 fe9c 	bl	8000b30 <lfs_min>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	425b      	negs	r3, r3
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	b25b      	sxtb	r3, r3
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fd97 	bl	8006938 <lfs_fs_preporphans>
 8006e0a:	4603      	mov	r3, r0
            found));
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	37b8      	adds	r7, #184	@ 0xb8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bdb0      	pop	{r4, r5, r7, pc}
 8006e14:	0800acf8 	.word	0x0800acf8
 8006e18:	0800ac04 	.word	0x0800ac04
 8006e1c:	0800b3a8 	.word	0x0800b3a8
 8006e20:	000ffc08 	.word	0x000ffc08
 8006e24:	7ffffc00 	.word	0x7ffffc00
 8006e28:	0800b3d8 	.word	0x0800b3d8
 8006e2c:	0800b41c 	.word	0x0800b41c
 8006e30:	600ffc08 	.word	0x600ffc08

08006e34 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fdef 	bl	8006a20 <lfs_fs_demove>
 8006e42:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <lfs_fs_forceconsistency+0x1a>
        return err;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	e00a      	b.n	8006e64 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006e4e:	2101      	movs	r1, #1
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff fe4b 	bl	8006aec <lfs_fs_deorphan>
 8006e56:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <lfs_fs_forceconsistency+0x2e>
        return err;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	e000      	b.n	8006e64 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	601a      	str	r2, [r3, #0]
    return 0;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8006ea0:	f107 0208 	add.w	r2, r7, #8
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4907      	ldr	r1, [pc, #28]	@ (8006ec4 <lfs_fs_rawsize+0x30>)
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fb3f 	bl	800652c <lfs_fs_rawtraverse>
 8006eae:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <lfs_fs_rawsize+0x26>
        return err;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	e000      	b.n	8006ebc <lfs_fs_rawsize+0x28>
    }

    return size;
 8006eba:	68bb      	ldr	r3, [r7, #8]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	08006e6d 	.word	0x08006e6d

08006ec8 <lfs_mount>:
    LFS_UNLOCK(cfg);
    return err;
}
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <lfs_mount+0x18>
        return err;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	e005      	b.n	8006eec <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff f96a 	bl	80061bc <lfs_rawmount>
 8006ee8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006eea:	68fb      	ldr	r3, [r7, #12]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <lfs_remove+0x18>
        return err;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	e005      	b.n	8006f18 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fe fe98 	bl	8005c44 <lfs_rawremove>
 8006f14:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
    if (err) {
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <lfs_file_opencfg+0x1c>
        return err;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	e01c      	b.n	8006f76 <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fa fc7c 	bl	8001840 <lfs_mlist_isopen>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f083 0301 	eor.w	r3, r3, #1
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <lfs_file_opencfg+0x42>
 8006f54:	4b0a      	ldr	r3, [pc, #40]	@ (8006f80 <lfs_file_opencfg+0x60>)
 8006f56:	4a0b      	ldr	r2, [pc, #44]	@ (8006f84 <lfs_file_opencfg+0x64>)
 8006f58:	f241 517b 	movw	r1, #5499	@ 0x157b
 8006f5c:	480a      	ldr	r0, [pc, #40]	@ (8006f88 <lfs_file_opencfg+0x68>)
 8006f5e:	f002 fe2f 	bl	8009bc0 <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fd ff35 	bl	8004ddc <lfs_file_rawopencfg>
 8006f72:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f74:	697b      	ldr	r3, [r7, #20]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	0800b464 	.word	0x0800b464
 8006f84:	0800b620 	.word	0x0800b620
 8006f88:	0800ac04 	.word	0x0800ac04

08006f8c <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <lfs_file_close+0x18>
        return err;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	e015      	b.n	8006fd0 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fa fc48 	bl	8001840 <lfs_mlist_isopen>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <lfs_file_close+0x38>
 8006fb6:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <lfs_file_close+0x4c>)
 8006fb8:	4a08      	ldr	r2, [pc, #32]	@ (8006fdc <lfs_file_close+0x50>)
 8006fba:	f241 518a 	movw	r1, #5514	@ 0x158a
 8006fbe:	4808      	ldr	r0, [pc, #32]	@ (8006fe0 <lfs_file_close+0x54>)
 8006fc0:	f002 fdfe 	bl	8009bc0 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7fe f8d8 	bl	800517c <lfs_file_rawclose>
 8006fcc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006fce:	68fb      	ldr	r3, [r7, #12]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	0800b49c 	.word	0x0800b49c
 8006fdc:	0800b634 	.word	0x0800b634
 8006fe0:	0800ac04 	.word	0x0800ac04

08006fe4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
    if (err) {
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <lfs_file_read+0x1c>
        return err;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	e017      	b.n	8007030 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fa fc1a 	bl	8001840 <lfs_mlist_isopen>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <lfs_file_read+0x3c>
 8007012:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <lfs_file_read+0x54>)
 8007014:	4a09      	ldr	r2, [pc, #36]	@ (800703c <lfs_file_read+0x58>)
 8007016:	f241 51ac 	movw	r1, #5548	@ 0x15ac
 800701a:	4809      	ldr	r0, [pc, #36]	@ (8007040 <lfs_file_read+0x5c>)
 800701c:	f002 fdd0 	bl	8009bc0 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7fe fbf4 	bl	8005814 <lfs_file_rawread>
 800702c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800702e:	693b      	ldr	r3, [r7, #16]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	0800b49c 	.word	0x0800b49c
 800703c:	0800b644 	.word	0x0800b644
 8007040:	0800ac04 	.word	0x0800ac04

08007044 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <lfs_file_rewind+0x18>
        return err;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	e005      	b.n	8007068 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fe fdbe 	bl	8005be0 <lfs_file_rawrewind>
 8007064:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 800707e:	f107 0310 	add.w	r3, r7, #16
 8007082:	4618      	mov	r0, r3
 8007084:	f7f9 fad2 	bl	800062c <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 8007088:	8abb      	ldrh	r3, [r7, #20]
 800708a:	461a      	mov	r2, r3
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 8007090:	8afb      	ldrh	r3, [r7, #22]
 8007092:	461a      	mov	r2, r3
 8007094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007096:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 8007098:	8b3b      	ldrh	r3, [r7, #24]
 800709a:	461a      	mov	r2, r3
 800709c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709e:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 80070a0:	8bbb      	ldrh	r3, [r7, #28]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 80070a8:	887a      	ldrh	r2, [r7, #2]
 80070aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    cfg->cache_size     = buffers_size;
 80070ae:	887a      	ldrh	r2, [r7, #2]
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	629a      	str	r2, [r3, #40]	@ 0x28
    cfg->read_buffer = lfsReadBuff;
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30
    cfg->prog_buffer = lfsWriteBuff;
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	635a      	str	r2, [r3, #52]	@ 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	639a      	str	r2, [r3, #56]	@ 0x38

    cfg->read   = block_device_read;
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	4a11      	ldr	r2, [pc, #68]	@ (8007110 <io_fs_init+0xa0>)
 80070ca:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	4a11      	ldr	r2, [pc, #68]	@ (8007114 <io_fs_init+0xa4>)
 80070d0:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	4a10      	ldr	r2, [pc, #64]	@ (8007118 <io_fs_init+0xa8>)
 80070d6:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 80070d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070da:	4a10      	ldr	r2, [pc, #64]	@ (800711c <io_fs_init+0xac>)
 80070dc:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070e4:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	22ff      	movs	r2, #255	@ 0xff
 80070ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80070f2:	641a      	str	r2, [r3, #64]	@ 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 80070f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44
    cfg->metadata_max	= flash_info.erase_size;
 80070fc:	8b3b      	ldrh	r3, [r7, #24]
 80070fe:	461a      	mov	r2, r3
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	649a      	str	r2, [r3, #72]	@ 0x48

    return 0;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	08007121 	.word	0x08007121
 8007114:	080071bd 	.word	0x080071bd
 8007118:	08007175 	.word	0x08007175
 800711c:	08007211 	.word	0x08007211

08007120 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	429a      	cmp	r2, r3
 8007136:	d305      	bcc.n	8007144 <block_device_read+0x24>
 8007138:	4b0b      	ldr	r3, [pc, #44]	@ (8007168 <block_device_read+0x48>)
 800713a:	4a0c      	ldr	r2, [pc, #48]	@ (800716c <block_device_read+0x4c>)
 800713c:	2148      	movs	r1, #72	@ 0x48
 800713e:	480c      	ldr	r0, [pc, #48]	@ (8007170 <block_device_read+0x50>)
 8007140:	f002 fd3e 	bl	8009bc0 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	fb03 f202 	mul.w	r2, r3, r2
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	b292      	uxth	r2, r2
 8007156:	4619      	mov	r1, r3
 8007158:	6838      	ldr	r0, [r7, #0]
 800715a:	f7f9 fc35 	bl	80009c8 <sFLASH_ReadBuffer>
	return 0;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	0800b50c 	.word	0x0800b50c
 800716c:	0800b654 	.word	0x0800b654
 8007170:	0800b524 	.word	0x0800b524

08007174 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d305      	bcc.n	8007194 <block_device_erase+0x20>
 8007188:	4b09      	ldr	r3, [pc, #36]	@ (80071b0 <block_device_erase+0x3c>)
 800718a:	4a0a      	ldr	r2, [pc, #40]	@ (80071b4 <block_device_erase+0x40>)
 800718c:	2150      	movs	r1, #80	@ 0x50
 800718e:	480a      	ldr	r0, [pc, #40]	@ (80071b8 <block_device_erase+0x44>)
 8007190:	f002 fd16 	bl	8009bc0 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	4618      	mov	r0, r3
 80071a0:	f7f9 fb10 	bl	80007c4 <sFLASH_EraseSector>
	return 0;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	0800b50c 	.word	0x0800b50c
 80071b4:	0800b668 	.word	0x0800b668
 80071b8:	0800b524 	.word	0x0800b524

080071bc <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d305      	bcc.n	80071e0 <block_device_prog+0x24>
 80071d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007204 <block_device_prog+0x48>)
 80071d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007208 <block_device_prog+0x4c>)
 80071d8:	2158      	movs	r1, #88	@ 0x58
 80071da:	480c      	ldr	r0, [pc, #48]	@ (800720c <block_device_prog+0x50>)
 80071dc:	f002 fcf0 	bl	8009bc0 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	fb03 f202 	mul.w	r2, r3, r2
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	b292      	uxth	r2, r2
 80071f2:	4619      	mov	r1, r3
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f7f9 fb3e 	bl	8000876 <sFLASH_WriteBuffer>
	return 0;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	0800b50c 	.word	0x0800b50c
 8007208:	0800b67c 	.word	0x0800b67c
 800720c:	0800b524 	.word	0x0800b524

08007210 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	return 0;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e024      	b.n	8007288 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	091a      	lsrs	r2, r3, #4
 8007242:	6939      	ldr	r1, [r7, #16]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	440b      	add	r3, r1
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	4619      	mov	r1, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	404b      	eors	r3, r1
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	4912      	ldr	r1, [pc, #72]	@ (80072a0 <lfs_crc+0x78>)
 8007256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800725a:	4053      	eors	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	091a      	lsrs	r2, r3, #4
 8007262:	6939      	ldr	r1, [r7, #16]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	440b      	add	r3, r1
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	091b      	lsrs	r3, r3, #4
 800726c:	b2db      	uxtb	r3, r3
 800726e:	4619      	mov	r1, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	404b      	eors	r3, r1
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	4909      	ldr	r1, [pc, #36]	@ (80072a0 <lfs_crc+0x78>)
 800727a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800727e:	4053      	eors	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d3d6      	bcc.n	800723e <lfs_crc+0x16>
    }

    return crc;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	0800b690 	.word	0x0800b690

080072a4 <SPI_flash_read_byte>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t SPI_flash_read_byte(void){
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&hspi1, &byte, 1, 5000);
 80072aa:	1df9      	adds	r1, r7, #7
 80072ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80072b0:	2201      	movs	r2, #1
 80072b2:	4804      	ldr	r0, [pc, #16]	@ (80072c4 <SPI_flash_read_byte+0x20>)
 80072b4:	f002 f87f 	bl	80093b6 <HAL_SPI_Receive>
	return byte;
 80072b8:	79fb      	ldrb	r3, [r7, #7]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200000a8 	.word	0x200000a8

080072c8 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 5000);
 80072d2:	1df9      	adds	r1, r7, #7
 80072d4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80072d8:	2201      	movs	r2, #1
 80072da:	4803      	ldr	r0, [pc, #12]	@ (80072e8 <SPI_flash_send_byte+0x20>)
 80072dc:	f001 ff27 	bl	800912e <HAL_SPI_Transmit>

}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	200000a8 	.word	0x200000a8

080072ec <SPI_flash_select>:

void SPI_flash_select(void){
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80072f0:	2200      	movs	r2, #0
 80072f2:	2110      	movs	r1, #16
 80072f4:	4802      	ldr	r0, [pc, #8]	@ (8007300 <SPI_flash_select+0x14>)
 80072f6:	f001 fa53 	bl	80087a0 <HAL_GPIO_WritePin>
}
 80072fa:	bf00      	nop
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40020000 	.word	0x40020000

08007304 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8007308:	2201      	movs	r2, #1
 800730a:	2110      	movs	r1, #16
 800730c:	4802      	ldr	r0, [pc, #8]	@ (8007318 <SPI_flash_deselect+0x14>)
 800730e:	f001 fa47 	bl	80087a0 <HAL_GPIO_WritePin>
}
 8007312:	bf00      	nop
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40020000 	.word	0x40020000

0800731c <jumpToApp>:

void jumpToApp(const uint32_t address)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]

	 typedef void(*pFunction)(void);//объявляем пользовательский тип
	 /* Устанавливаем адрес перехода на основную программу */
	 /* Переход производится выполнением функции, адрес которой указывается вручную */
	 /* +4 байта потому, что в самом начале расположен указатель на вектор прерывания */
	 uint32_t jumpAddress = *(__IO uint32_t*) (MAIN_PROGRAM_START_ADDRESS + 4);
 8007324:	4b16      	ldr	r3, [pc, #88]	@ (8007380 <jumpToApp+0x64>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	617b      	str	r3, [r7, #20]
	 pFunction Jump_To_Application = (pFunction) jumpAddress;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	613b      	str	r3, [r7, #16]

	 /*Сбрасываем всю периферию на APB1 */
	 RCC->APB1RSTR = 0xFFFFFFFF; RCC->APB1RSTR = 0x0;
 800732e:	4b15      	ldr	r3, [pc, #84]	@ (8007384 <jumpToApp+0x68>)
 8007330:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007334:	621a      	str	r2, [r3, #32]
 8007336:	4b13      	ldr	r3, [pc, #76]	@ (8007384 <jumpToApp+0x68>)
 8007338:	2200      	movs	r2, #0
 800733a:	621a      	str	r2, [r3, #32]
	/*Сбрасываем всю периферию на APB2 */
	 RCC->APB2RSTR = 0xFFFFFFFF; RCC->APB2RSTR = 0x0;
 800733c:	4b11      	ldr	r3, [pc, #68]	@ (8007384 <jumpToApp+0x68>)
 800733e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007342:	625a      	str	r2, [r3, #36]	@ 0x24
 8007344:	4b0f      	ldr	r3, [pc, #60]	@ (8007384 <jumpToApp+0x68>)
 8007346:	2200      	movs	r2, #0
 8007348:	625a      	str	r2, [r3, #36]	@ 0x24
	 RCC->APB1ENR = 0x0; /* Выключаем всю периферию на APB1 */
 800734a:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <jumpToApp+0x68>)
 800734c:	2200      	movs	r2, #0
 800734e:	641a      	str	r2, [r3, #64]	@ 0x40
	 RCC->APB2ENR = 0x0; /* Выключаем всю периферию на APB2 */
 8007350:	4b0c      	ldr	r3, [pc, #48]	@ (8007384 <jumpToApp+0x68>)
 8007352:	2200      	movs	r2, #0
 8007354:	645a      	str	r2, [r3, #68]	@ 0x44
	 //RCC->AHBENR = 0x0; /* Выключаем всю периферию на AHB */
	 /* Сбрасываем все источники тактования по умолчанию, переходим на HSI*/
	 //RCC_DeInit();
	 HAL_DeInit();
 8007356:	f000 fc03 	bl	8007b60 <HAL_DeInit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800735a:	b672      	cpsid	i
}
 800735c:	bf00      	nop
	 /* Выключаем прерывания */
	 __disable_irq();
	 /* Переносим адрес вектора прерываний */
	 //NVIC_SetVectorTable(NVIC_VectTab_FLASH, MAIN_PROGRAM_START_ADDRESS);
	 //NVIC_SetVector((uint32_t)0x08000000, MAIN_PROGRAM_START_ADDRESS);
	 SCB->VTOR = (uint32_t)0x08000000 | (MAIN_PROGRAM_START_ADDRESS & (uint32_t)0x1FFFFF80);
 800735e:	4b0a      	ldr	r3, [pc, #40]	@ (8007388 <jumpToApp+0x6c>)
 8007360:	4a0a      	ldr	r2, [pc, #40]	@ (800738c <jumpToApp+0x70>)
 8007362:	609a      	str	r2, [r3, #8]
	 //0x08000000 VECT_TAB_OFFSET
	 /* Переносим адрес стэка */
	  __set_MSP(*(__IO uint32_t*) MAIN_PROGRAM_START_ADDRESS);
 8007364:	4b09      	ldr	r3, [pc, #36]	@ (800738c <jumpToApp+0x70>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f383 8808 	msr	MSP, r3
}
 8007370:	bf00      	nop
	  /* Переходим в основную программу */
	  Jump_To_Application();
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4798      	blx	r3

	// let's do The Jump!
    // Jump, used asm to avoid stack optimization
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
   */
}
 8007376:	bf00      	nop
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	08010004 	.word	0x08010004
 8007384:	40023800 	.word	0x40023800
 8007388:	e000ed00 	.word	0xe000ed00
 800738c:	08010000 	.word	0x08010000

08007390 <FLASH_EraseSector>:
		ms--;
	}
}

int FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
  int status = 9; //FLASH_COMPLETE;
 80073a0:	2309      	movs	r3, #9
 80073a2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if(VoltageRange == VoltageRange_1)
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	e010      	b.n	80073d2 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d103      	bne.n	80073be <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80073b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	e009      	b.n	80073d2 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d103      	bne.n	80073cc <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80073c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e002      	b.n	80073d2 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80073cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80073d0:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073d6:	f000 fe91 	bl	80080fc <FLASH_WaitForLastOperation>
 80073da:	4603      	mov	r3, r0
 80073dc:	60bb      	str	r3, [r7, #8]

  if(status == HAL_OK)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d131      	bne.n	8007448 <FLASH_EraseSector+0xb8>
  {
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80073e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007454 <FLASH_EraseSector+0xc4>)
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007454 <FLASH_EraseSector+0xc4>)
 80073ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ee:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 80073f0:	4b18      	ldr	r3, [pc, #96]	@ (8007454 <FLASH_EraseSector+0xc4>)
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	4917      	ldr	r1, [pc, #92]	@ (8007454 <FLASH_EraseSector+0xc4>)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 80073fc:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <FLASH_EraseSector+0xc4>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	4a14      	ldr	r2, [pc, #80]	@ (8007454 <FLASH_EraseSector+0xc4>)
 8007402:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007406:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8007408:	4b12      	ldr	r3, [pc, #72]	@ (8007454 <FLASH_EraseSector+0xc4>)
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4313      	orrs	r3, r2
 8007410:	4a10      	ldr	r2, [pc, #64]	@ (8007454 <FLASH_EraseSector+0xc4>)
 8007412:	f043 0302 	orr.w	r3, r3, #2
 8007416:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8007418:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <FLASH_EraseSector+0xc4>)
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	4a0d      	ldr	r2, [pc, #52]	@ (8007454 <FLASH_EraseSector+0xc4>)
 800741e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007422:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8007424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007428:	f000 fe68 	bl	80080fc <FLASH_WaitForLastOperation>
 800742c:	4603      	mov	r3, r0
 800742e:	60bb      	str	r3, [r7, #8]

    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8007430:	4b08      	ldr	r3, [pc, #32]	@ (8007454 <FLASH_EraseSector+0xc4>)
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	4a07      	ldr	r2, [pc, #28]	@ (8007454 <FLASH_EraseSector+0xc4>)
 8007436:	f023 0302 	bic.w	r3, r3, #2
 800743a:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK;
 800743c:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <FLASH_EraseSector+0xc4>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	4a04      	ldr	r2, [pc, #16]	@ (8007454 <FLASH_EraseSector+0xc4>)
 8007442:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007446:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8007448:	68bb      	ldr	r3, [r7, #8]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40023c00 	.word	0x40023c00

08007458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007458:	b5b0      	push	{r4, r5, r7, lr}
 800745a:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800745e:	af02      	add	r7, sp, #8
	uint8_t 						lfsWriteBuff[256];
	uint8_t 						lfslookaheadBuff[256];
	uint8_t							lfs_file_buf[512];
	struct SPI_flash_info			flash_parameters;
	int 							err;
	uint32_t 						addr = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
	uint8_t 						res,data = 0;
 8007466:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800746a:	f2a3 531d 	subw	r3, r3, #1309	@ 0x51d
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007472:	f000 fb53 	bl	8007b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007476:	f000 f8b7 	bl	80075e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800747a:	f000 f94b 	bl	8007714 <MX_GPIO_Init>
  MX_SPI1_Init();
 800747e:	f000 f913 	bl	80076a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8007482:	4b4e      	ldr	r3, [pc, #312]	@ (80075bc <main+0x164>)
 8007484:	4a4e      	ldr	r2, [pc, #312]	@ (80075c0 <main+0x168>)
 8007486:	494f      	ldr	r1, [pc, #316]	@ (80075c4 <main+0x16c>)
 8007488:	484f      	ldr	r0, [pc, #316]	@ (80075c8 <main+0x170>)
 800748a:	f7f9 f895 	bl	80005b8 <SPI_flash_reg_cb>
  flash_parameters = sFLASH_GetInfo();
 800748e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8007492:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8007496:	4618      	mov	r0, r3
 8007498:	f7f9 f8c8 	bl	800062c <sFLASH_GetInfo>
  if (flash_parameters.flash_id == 0x0) jumpToApp(APP_START); // jump to APP
 800749c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80074a0:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <main+0x58>
 80074aa:	4848      	ldr	r0, [pc, #288]	@ (80075cc <main+0x174>)
 80074ac:	f7ff ff36 	bl	800731c <jumpToApp>

  io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, 256, &cfg);
 80074b0:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 80074b4:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 80074b8:	f207 4014 	addw	r0, r7, #1044	@ 0x414
 80074bc:	4b44      	ldr	r3, [pc, #272]	@ (80075d0 <main+0x178>)
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074c4:	f7ff fdd4 	bl	8007070 <io_fs_init>
	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 80074c8:	220c      	movs	r2, #12
 80074ca:	2100      	movs	r1, #0
 80074cc:	4841      	ldr	r0, [pc, #260]	@ (80075d4 <main+0x17c>)
 80074ce:	f002 fd77 	bl	8009fc0 <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 80074d2:	4a40      	ldr	r2, [pc, #256]	@ (80075d4 <main+0x17c>)
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	6013      	str	r3, [r2, #0]
	fileConf.attr_count = 0;
 80074da:	4b3e      	ldr	r3, [pc, #248]	@ (80075d4 <main+0x17c>)
 80074dc:	2200      	movs	r2, #0
 80074de:	609a      	str	r2, [r3, #8]

	err = lfs_mount(&lfs, &cfg);
 80074e0:	493b      	ldr	r1, [pc, #236]	@ (80075d0 <main+0x178>)
 80074e2:	483d      	ldr	r0, [pc, #244]	@ (80075d8 <main+0x180>)
 80074e4:	f7ff fcf0 	bl	8006ec8 <lfs_mount>
 80074e8:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	if(err < 0){
 80074ec:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da02      	bge.n	80074fa <main+0xa2>
	    jumpToApp(APP_START);
 80074f4:	4835      	ldr	r0, [pc, #212]	@ (80075cc <main+0x174>)
 80074f6:	f7ff ff11 	bl	800731c <jumpToApp>
	}

	err = lfs_file_opencfg(&lfs, &file, FIRMWARE_FILE, LFS_O_RDONLY, &fileConf);
 80074fa:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <main+0x17c>)
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	2301      	movs	r3, #1
 8007500:	4a36      	ldr	r2, [pc, #216]	@ (80075dc <main+0x184>)
 8007502:	4937      	ldr	r1, [pc, #220]	@ (80075e0 <main+0x188>)
 8007504:	4834      	ldr	r0, [pc, #208]	@ (80075d8 <main+0x180>)
 8007506:	f7ff fd0b 	bl	8006f20 <lfs_file_opencfg>
 800750a:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	if (err >= 0){
 800750e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8007512:	2b00      	cmp	r3, #0
 8007514:	db4c      	blt.n	80075b0 <main+0x158>
		HAL_FLASH_Unlock();
 8007516:	f000 fdbf 	bl	8008098 <HAL_FLASH_Unlock>
		FLASH_EraseSector(FLASH_Sector_5,VoltageRange_3);
 800751a:	2102      	movs	r1, #2
 800751c:	2028      	movs	r0, #40	@ 0x28
 800751e:	f7ff ff37 	bl	8007390 <FLASH_EraseSector>
		FLASH_EraseSector(FLASH_Sector_4,VoltageRange_3);
 8007522:	2102      	movs	r1, #2
 8007524:	2020      	movs	r0, #32
 8007526:	f7ff ff33 	bl	8007390 <FLASH_EraseSector>
		FLASH_EraseSector(FLASH_Sector_3,VoltageRange_3);
 800752a:	2102      	movs	r1, #2
 800752c:	2018      	movs	r0, #24
 800752e:	f7ff ff2f 	bl	8007390 <FLASH_EraseSector>

		lfs_file_rewind(&lfs,&file);
 8007532:	492b      	ldr	r1, [pc, #172]	@ (80075e0 <main+0x188>)
 8007534:	4828      	ldr	r0, [pc, #160]	@ (80075d8 <main+0x180>)
 8007536:	f7ff fd85 	bl	8007044 <lfs_file_rewind>

		for ( addr = APP_START ; addr < APP_END ; addr = addr + sizeof(data) ){
 800753a:	4b24      	ldr	r3, [pc, #144]	@ (80075cc <main+0x174>)
 800753c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8007540:	e021      	b.n	8007586 <main+0x12e>
			res = lfs_file_read(&lfs, &file, &data, sizeof(data));
 8007542:	1cfa      	adds	r2, r7, #3
 8007544:	2301      	movs	r3, #1
 8007546:	4926      	ldr	r1, [pc, #152]	@ (80075e0 <main+0x188>)
 8007548:	4823      	ldr	r0, [pc, #140]	@ (80075d8 <main+0x180>)
 800754a:	f7ff fd4b 	bl	8006fe4 <lfs_file_read>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
			if (res <= 0 ) break; //из файла считалось 0 байт или ошибка, выходим
 8007554:	f897 3517 	ldrb.w	r3, [r7, #1303]	@ 0x517
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01a      	beq.n	8007592 <main+0x13a>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr,data);
 800755c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8007560:	f2a3 531d 	subw	r3, r3, #1309	@ 0x51d
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2200      	movs	r2, #0
 800756a:	461c      	mov	r4, r3
 800756c:	4615      	mov	r5, r2
 800756e:	4622      	mov	r2, r4
 8007570:	462b      	mov	r3, r5
 8007572:	f8d7 151c 	ldr.w	r1, [r7, #1308]	@ 0x51c
 8007576:	2000      	movs	r0, #0
 8007578:	f000 fc8a 	bl	8007e90 <HAL_FLASH_Program>
		for ( addr = APP_START ; addr < APP_END ; addr = addr + sizeof(data) ){
 800757c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8007580:	3301      	adds	r3, #1
 8007582:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8007586:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800758a:	4a16      	ldr	r2, [pc, #88]	@ (80075e4 <main+0x18c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d9d8      	bls.n	8007542 <main+0xea>
 8007590:	e000      	b.n	8007594 <main+0x13c>
			if (res <= 0 ) break; //из файла считалось 0 байт или ошибка, выходим
 8007592:	bf00      	nop
		}

	    lfs_file_close(&lfs, &file);
 8007594:	4912      	ldr	r1, [pc, #72]	@ (80075e0 <main+0x188>)
 8007596:	4810      	ldr	r0, [pc, #64]	@ (80075d8 <main+0x180>)
 8007598:	f7ff fcf8 	bl	8006f8c <lfs_file_close>

	    lfs_remove(&lfs, FIRMWARE_FILE);
 800759c:	490f      	ldr	r1, [pc, #60]	@ (80075dc <main+0x184>)
 800759e:	480e      	ldr	r0, [pc, #56]	@ (80075d8 <main+0x180>)
 80075a0:	f7ff fca8 	bl	8006ef4 <lfs_remove>

	    HAL_FLASH_Lock();
 80075a4:	f000 fd9a 	bl	80080dc <HAL_FLASH_Lock>
	    jumpToApp(APP_START);
 80075a8:	4808      	ldr	r0, [pc, #32]	@ (80075cc <main+0x174>)
 80075aa:	f7ff feb7 	bl	800731c <jumpToApp>
 80075ae:	e003      	b.n	80075b8 <main+0x160>

	}else{
		jumpToApp(APP_START);
 80075b0:	4806      	ldr	r0, [pc, #24]	@ (80075cc <main+0x174>)
 80075b2:	f7ff feb3 	bl	800731c <jumpToApp>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <main+0x160>
 80075bc:	080072c9 	.word	0x080072c9
 80075c0:	080072a5 	.word	0x080072a5
 80075c4:	08007305 	.word	0x08007305
 80075c8:	080072ed 	.word	0x080072ed
 80075cc:	08010000 	.word	0x08010000
 80075d0:	200001cc 	.word	0x200001cc
 80075d4:	20000218 	.word	0x20000218
 80075d8:	20000100 	.word	0x20000100
 80075dc:	0800b540 	.word	0x0800b540
 80075e0:	20000178 	.word	0x20000178
 80075e4:	0803ffef 	.word	0x0803ffef

080075e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b094      	sub	sp, #80	@ 0x50
 80075ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075ee:	f107 0320 	add.w	r3, r7, #32
 80075f2:	2230      	movs	r2, #48	@ 0x30
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fce2 	bl	8009fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075fc:	f107 030c 	add.w	r3, r7, #12
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800760c:	2300      	movs	r3, #0
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	4b23      	ldr	r3, [pc, #140]	@ (80076a0 <SystemClock_Config+0xb8>)
 8007612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007614:	4a22      	ldr	r2, [pc, #136]	@ (80076a0 <SystemClock_Config+0xb8>)
 8007616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800761a:	6413      	str	r3, [r2, #64]	@ 0x40
 800761c:	4b20      	ldr	r3, [pc, #128]	@ (80076a0 <SystemClock_Config+0xb8>)
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007624:	60bb      	str	r3, [r7, #8]
 8007626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007628:	2300      	movs	r3, #0
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	4b1d      	ldr	r3, [pc, #116]	@ (80076a4 <SystemClock_Config+0xbc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <SystemClock_Config+0xbc>)
 8007636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4b19      	ldr	r3, [pc, #100]	@ (80076a4 <SystemClock_Config+0xbc>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007644:	607b      	str	r3, [r7, #4]
 8007646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007648:	2302      	movs	r3, #2
 800764a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800764c:	2301      	movs	r3, #1
 800764e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007650:	2310      	movs	r3, #16
 8007652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007654:	2300      	movs	r3, #0
 8007656:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007658:	f107 0320 	add.w	r3, r7, #32
 800765c:	4618      	mov	r0, r3
 800765e:	f001 f8b9 	bl	80087d4 <HAL_RCC_OscConfig>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8007668:	f000 f896 	bl	8007798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800766c:	230f      	movs	r3, #15
 800766e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007680:	f107 030c 	add.w	r3, r7, #12
 8007684:	2100      	movs	r1, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f001 fb1c 	bl	8008cc4 <HAL_RCC_ClockConfig>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8007692:	f000 f881 	bl	8007798 <Error_Handler>
  }
}
 8007696:	bf00      	nop
 8007698:	3750      	adds	r7, #80	@ 0x50
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40023800 	.word	0x40023800
 80076a4:	40007000 	.word	0x40007000

080076a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80076ac:	4b17      	ldr	r3, [pc, #92]	@ (800770c <MX_SPI1_Init+0x64>)
 80076ae:	4a18      	ldr	r2, [pc, #96]	@ (8007710 <MX_SPI1_Init+0x68>)
 80076b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80076b2:	4b16      	ldr	r3, [pc, #88]	@ (800770c <MX_SPI1_Init+0x64>)
 80076b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80076b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80076ba:	4b14      	ldr	r3, [pc, #80]	@ (800770c <MX_SPI1_Init+0x64>)
 80076bc:	2200      	movs	r2, #0
 80076be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80076c0:	4b12      	ldr	r3, [pc, #72]	@ (800770c <MX_SPI1_Init+0x64>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80076c6:	4b11      	ldr	r3, [pc, #68]	@ (800770c <MX_SPI1_Init+0x64>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80076cc:	4b0f      	ldr	r3, [pc, #60]	@ (800770c <MX_SPI1_Init+0x64>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80076d2:	4b0e      	ldr	r3, [pc, #56]	@ (800770c <MX_SPI1_Init+0x64>)
 80076d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076da:	4b0c      	ldr	r3, [pc, #48]	@ (800770c <MX_SPI1_Init+0x64>)
 80076dc:	2200      	movs	r2, #0
 80076de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <MX_SPI1_Init+0x64>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80076e6:	4b09      	ldr	r3, [pc, #36]	@ (800770c <MX_SPI1_Init+0x64>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076ec:	4b07      	ldr	r3, [pc, #28]	@ (800770c <MX_SPI1_Init+0x64>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80076f2:	4b06      	ldr	r3, [pc, #24]	@ (800770c <MX_SPI1_Init+0x64>)
 80076f4:	220a      	movs	r2, #10
 80076f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80076f8:	4804      	ldr	r0, [pc, #16]	@ (800770c <MX_SPI1_Init+0x64>)
 80076fa:	f001 fc8f 	bl	800901c <HAL_SPI_Init>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007704:	f000 f848 	bl	8007798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007708:	bf00      	nop
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200000a8 	.word	0x200000a8
 8007710:	40013000 	.word	0x40013000

08007714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800771a:	f107 030c 	add.w	r3, r7, #12
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	605a      	str	r2, [r3, #4]
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	60da      	str	r2, [r3, #12]
 8007728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800772a:	2300      	movs	r3, #0
 800772c:	60bb      	str	r3, [r7, #8]
 800772e:	4b18      	ldr	r3, [pc, #96]	@ (8007790 <MX_GPIO_Init+0x7c>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007732:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <MX_GPIO_Init+0x7c>)
 8007734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007738:	6313      	str	r3, [r2, #48]	@ 0x30
 800773a:	4b15      	ldr	r3, [pc, #84]	@ (8007790 <MX_GPIO_Init+0x7c>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	4b11      	ldr	r3, [pc, #68]	@ (8007790 <MX_GPIO_Init+0x7c>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774e:	4a10      	ldr	r2, [pc, #64]	@ (8007790 <MX_GPIO_Init+0x7c>)
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	6313      	str	r3, [r2, #48]	@ 0x30
 8007756:	4b0e      	ldr	r3, [pc, #56]	@ (8007790 <MX_GPIO_Init+0x7c>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	607b      	str	r3, [r7, #4]
 8007760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8007762:	2201      	movs	r2, #1
 8007764:	2110      	movs	r1, #16
 8007766:	480b      	ldr	r0, [pc, #44]	@ (8007794 <MX_GPIO_Init+0x80>)
 8007768:	f001 f81a 	bl	80087a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800776c:	2310      	movs	r3, #16
 800776e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007770:	2301      	movs	r3, #1
 8007772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007778:	2302      	movs	r3, #2
 800777a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	4619      	mov	r1, r3
 8007782:	4804      	ldr	r0, [pc, #16]	@ (8007794 <MX_GPIO_Init+0x80>)
 8007784:	f000 fe88 	bl	8008498 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007788:	bf00      	nop
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40023800 	.word	0x40023800
 8007794:	40020000 	.word	0x40020000

08007798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800779c:	b672      	cpsid	i
}
 800779e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80077a0:	bf00      	nop
 80077a2:	e7fd      	b.n	80077a0 <Error_Handler+0x8>

080077a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077aa:	2300      	movs	r3, #0
 80077ac:	607b      	str	r3, [r7, #4]
 80077ae:	4b17      	ldr	r3, [pc, #92]	@ (800780c <HAL_MspInit+0x68>)
 80077b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b2:	4a16      	ldr	r2, [pc, #88]	@ (800780c <HAL_MspInit+0x68>)
 80077b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80077ba:	4b14      	ldr	r3, [pc, #80]	@ (800780c <HAL_MspInit+0x68>)
 80077bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c2:	607b      	str	r3, [r7, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077c6:	2300      	movs	r3, #0
 80077c8:	603b      	str	r3, [r7, #0]
 80077ca:	4b10      	ldr	r3, [pc, #64]	@ (800780c <HAL_MspInit+0x68>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	4a0f      	ldr	r2, [pc, #60]	@ (800780c <HAL_MspInit+0x68>)
 80077d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80077d6:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <HAL_MspInit+0x68>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	2004      	movs	r0, #4
 80077e8:	f000 fb1b 	bl	8007e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80077ec:	2004      	movs	r0, #4
 80077ee:	f000 fb34 	bl	8007e5a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	2005      	movs	r0, #5
 80077f8:	f000 fb13 	bl	8007e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80077fc:	2005      	movs	r0, #5
 80077fe:	f000 fb2c 	bl	8007e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40023800 	.word	0x40023800

08007810 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	@ 0x28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007818:	f107 0314 	add.w	r3, r7, #20
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	609a      	str	r2, [r3, #8]
 8007824:	60da      	str	r2, [r3, #12]
 8007826:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a19      	ldr	r2, [pc, #100]	@ (8007894 <HAL_SPI_MspInit+0x84>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d12b      	bne.n	800788a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <HAL_SPI_MspInit+0x88>)
 8007838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783a:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <HAL_SPI_MspInit+0x88>)
 800783c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007840:	6453      	str	r3, [r2, #68]	@ 0x44
 8007842:	4b15      	ldr	r3, [pc, #84]	@ (8007898 <HAL_SPI_MspInit+0x88>)
 8007844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	4b11      	ldr	r3, [pc, #68]	@ (8007898 <HAL_SPI_MspInit+0x88>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007856:	4a10      	ldr	r2, [pc, #64]	@ (8007898 <HAL_SPI_MspInit+0x88>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	6313      	str	r3, [r2, #48]	@ 0x30
 800785e:	4b0e      	ldr	r3, [pc, #56]	@ (8007898 <HAL_SPI_MspInit+0x88>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800786a:	23e0      	movs	r3, #224	@ 0xe0
 800786c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800786e:	2302      	movs	r3, #2
 8007870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007872:	2300      	movs	r3, #0
 8007874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007876:	2303      	movs	r3, #3
 8007878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800787a:	2305      	movs	r3, #5
 800787c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800787e:	f107 0314 	add.w	r3, r7, #20
 8007882:	4619      	mov	r1, r3
 8007884:	4805      	ldr	r0, [pc, #20]	@ (800789c <HAL_SPI_MspInit+0x8c>)
 8007886:	f000 fe07 	bl	8008498 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800788a:	bf00      	nop
 800788c:	3728      	adds	r7, #40	@ 0x28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	40013000 	.word	0x40013000
 8007898:	40023800 	.word	0x40023800
 800789c:	40020000 	.word	0x40020000

080078a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <NMI_Handler+0x4>

080078a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078ac:	bf00      	nop
 80078ae:	e7fd      	b.n	80078ac <HardFault_Handler+0x4>

080078b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <MemManage_Handler+0x4>

080078b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078bc:	bf00      	nop
 80078be:	e7fd      	b.n	80078bc <BusFault_Handler+0x4>

080078c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <UsageFault_Handler+0x4>

080078c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078cc:	bf00      	nop
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078d6:	b480      	push	{r7}
 80078d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078da:	bf00      	nop
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078e8:	bf00      	nop
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078f6:	f000 f999 	bl	8007c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078fa:	bf00      	nop
 80078fc:	bd80      	pop	{r7, pc}

080078fe <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8007902:	f000 fb19 	bl	8007f38 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8007906:	bf00      	nop
 8007908:	bd80      	pop	{r7, pc}

0800790a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800790a:	b480      	push	{r7}
 800790c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800790e:	bf00      	nop
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  return 1;
 800791c:	2301      	movs	r3, #1
}
 800791e:	4618      	mov	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <_kill>:

int _kill(int pid, int sig)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007932:	f002 fb5d 	bl	8009ff0 <__errno>
 8007936:	4603      	mov	r3, r0
 8007938:	2216      	movs	r2, #22
 800793a:	601a      	str	r2, [r3, #0]
  return -1;
 800793c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <_exit>:

void _exit (int status)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007950:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ffe7 	bl	8007928 <_kill>
  while (1) {}    /* Make sure we hang here */
 800795a:	bf00      	nop
 800795c:	e7fd      	b.n	800795a <_exit+0x12>

0800795e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b086      	sub	sp, #24
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	e00a      	b.n	8007986 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007970:	f3af 8000 	nop.w
 8007974:	4601      	mov	r1, r0
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	60ba      	str	r2, [r7, #8]
 800797c:	b2ca      	uxtb	r2, r1
 800797e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	3301      	adds	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	429a      	cmp	r2, r3
 800798c:	dbf0      	blt.n	8007970 <_read+0x12>
  }

  return len;
 800798e:	687b      	ldr	r3, [r7, #4]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e009      	b.n	80079be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	60ba      	str	r2, [r7, #8]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	3301      	adds	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	dbf1      	blt.n	80079aa <_write+0x12>
  }
  return len;
 80079c6:	687b      	ldr	r3, [r7, #4]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <_close>:

int _close(int file)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80079f8:	605a      	str	r2, [r3, #4]
  return 0;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <_isatty>:

int _isatty(int file)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007a10:	2301      	movs	r3, #1
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a40:	4a14      	ldr	r2, [pc, #80]	@ (8007a94 <_sbrk+0x5c>)
 8007a42:	4b15      	ldr	r3, [pc, #84]	@ (8007a98 <_sbrk+0x60>)
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a4c:	4b13      	ldr	r3, [pc, #76]	@ (8007a9c <_sbrk+0x64>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a54:	4b11      	ldr	r3, [pc, #68]	@ (8007a9c <_sbrk+0x64>)
 8007a56:	4a12      	ldr	r2, [pc, #72]	@ (8007aa0 <_sbrk+0x68>)
 8007a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a5a:	4b10      	ldr	r3, [pc, #64]	@ (8007a9c <_sbrk+0x64>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d207      	bcs.n	8007a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a68:	f002 fac2 	bl	8009ff0 <__errno>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	220c      	movs	r2, #12
 8007a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a76:	e009      	b.n	8007a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a78:	4b08      	ldr	r3, [pc, #32]	@ (8007a9c <_sbrk+0x64>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a7e:	4b07      	ldr	r3, [pc, #28]	@ (8007a9c <_sbrk+0x64>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	4a05      	ldr	r2, [pc, #20]	@ (8007a9c <_sbrk+0x64>)
 8007a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20010000 	.word	0x20010000
 8007a98:	00000400 	.word	0x00000400
 8007a9c:	20000224 	.word	0x20000224
 8007aa0:	20000398 	.word	0x20000398

08007aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007aa8:	4b06      	ldr	r3, [pc, #24]	@ (8007ac4 <SystemInit+0x20>)
 8007aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aae:	4a05      	ldr	r2, [pc, #20]	@ (8007ac4 <SystemInit+0x20>)
 8007ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	e000ed00 	.word	0xe000ed00

08007ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007acc:	f7ff ffea 	bl	8007aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007ad0:	480c      	ldr	r0, [pc, #48]	@ (8007b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007ad2:	490d      	ldr	r1, [pc, #52]	@ (8007b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8007b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ad8:	e002      	b.n	8007ae0 <LoopCopyDataInit>

08007ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ade:	3304      	adds	r3, #4

08007ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ae4:	d3f9      	bcc.n	8007ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8007b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8007b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007aec:	e001      	b.n	8007af2 <LoopFillZerobss>

08007aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007af0:	3204      	adds	r2, #4

08007af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007af4:	d3fb      	bcc.n	8007aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007af6:	f002 fa81 	bl	8009ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007afa:	f7ff fcad 	bl	8007458 <main>
  bx  lr    
 8007afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007b00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8007b0c:	0800b760 	.word	0x0800b760
  ldr r2, =_sbss
 8007b10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8007b14:	20000398 	.word	0x20000398

08007b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b18:	e7fe      	b.n	8007b18 <ADC_IRQHandler>
	...

08007b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007b20:	4b0e      	ldr	r3, [pc, #56]	@ (8007b5c <HAL_Init+0x40>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0d      	ldr	r2, [pc, #52]	@ (8007b5c <HAL_Init+0x40>)
 8007b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <HAL_Init+0x40>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	@ (8007b5c <HAL_Init+0x40>)
 8007b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b38:	4b08      	ldr	r3, [pc, #32]	@ (8007b5c <HAL_Init+0x40>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a07      	ldr	r2, [pc, #28]	@ (8007b5c <HAL_Init+0x40>)
 8007b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b44:	2003      	movs	r0, #3
 8007b46:	f000 f961 	bl	8007e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b4a:	200f      	movs	r0, #15
 8007b4c:	f000 f83e 	bl	8007bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b50:	f7ff fe28 	bl	80077a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40023c00 	.word	0x40023c00

08007b60 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8007b64:	4b11      	ldr	r3, [pc, #68]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b66:	4a12      	ldr	r2, [pc, #72]	@ (8007bb0 <HAL_DeInit+0x50>)
 8007b68:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8007b6a:	4b10      	ldr	r3, [pc, #64]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8007b70:	4b0e      	ldr	r3, [pc, #56]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b72:	4a10      	ldr	r2, [pc, #64]	@ (8007bb4 <HAL_DeInit+0x54>)
 8007b74:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8007b76:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8007bb8 <HAL_DeInit+0x58>)
 8007b80:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8007b82:	4b0a      	ldr	r3, [pc, #40]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8007b88:	4b08      	ldr	r3, [pc, #32]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b8a:	2280      	movs	r2, #128	@ 0x80
 8007b8c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8007b8e:	4b07      	ldr	r3, [pc, #28]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8007b94:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b9a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8007b9c:	4b03      	ldr	r3, [pc, #12]	@ (8007bac <HAL_DeInit+0x4c>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8007ba2:	f000 f80b 	bl	8007bbc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	10e2c80f 	.word	0x10e2c80f
 8007bb4:	00077931 	.word	0x00077931
 8007bb8:	0060109f 	.word	0x0060109f

08007bbc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8007bc0:	bf00      	nop
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007bd4:	4b12      	ldr	r3, [pc, #72]	@ (8007c20 <HAL_InitTick+0x54>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <HAL_InitTick+0x58>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f943 	bl	8007e76 <HAL_SYSTICK_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e00e      	b.n	8007c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b0f      	cmp	r3, #15
 8007bfe:	d80a      	bhi.n	8007c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c00:	2200      	movs	r2, #0
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c08:	f000 f90b 	bl	8007e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c0c:	4a06      	ldr	r2, [pc, #24]	@ (8007c28 <HAL_InitTick+0x5c>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e000      	b.n	8007c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20000000 	.word	0x20000000
 8007c24:	20000008 	.word	0x20000008
 8007c28:	20000004 	.word	0x20000004

08007c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007c30:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <HAL_IncTick+0x20>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <HAL_IncTick+0x24>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	4a04      	ldr	r2, [pc, #16]	@ (8007c50 <HAL_IncTick+0x24>)
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000008 	.word	0x20000008
 8007c50:	20000228 	.word	0x20000228

08007c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  return uwTick;
 8007c58:	4b03      	ldr	r3, [pc, #12]	@ (8007c68 <HAL_GetTick+0x14>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20000228 	.word	0x20000228

08007c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007c88:	4013      	ands	r3, r2
 8007c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c9e:	4a04      	ldr	r2, [pc, #16]	@ (8007cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	60d3      	str	r3, [r2, #12]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	e000ed00 	.word	0xe000ed00

08007cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007cb8:	4b04      	ldr	r3, [pc, #16]	@ (8007ccc <__NVIC_GetPriorityGrouping+0x18>)
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	0a1b      	lsrs	r3, r3, #8
 8007cbe:	f003 0307 	and.w	r3, r3, #7
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	e000ed00 	.word	0xe000ed00

08007cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	db0b      	blt.n	8007cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	f003 021f 	and.w	r2, r3, #31
 8007ce8:	4907      	ldr	r1, [pc, #28]	@ (8007d08 <__NVIC_EnableIRQ+0x38>)
 8007cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8007cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	e000e100 	.word	0xe000e100

08007d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	6039      	str	r1, [r7, #0]
 8007d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	db0a      	blt.n	8007d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	490c      	ldr	r1, [pc, #48]	@ (8007d58 <__NVIC_SetPriority+0x4c>)
 8007d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d2a:	0112      	lsls	r2, r2, #4
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	440b      	add	r3, r1
 8007d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d34:	e00a      	b.n	8007d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	4908      	ldr	r1, [pc, #32]	@ (8007d5c <__NVIC_SetPriority+0x50>)
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	3b04      	subs	r3, #4
 8007d44:	0112      	lsls	r2, r2, #4
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	440b      	add	r3, r1
 8007d4a:	761a      	strb	r2, [r3, #24]
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	e000e100 	.word	0xe000e100
 8007d5c:	e000ed00 	.word	0xe000ed00

08007d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b089      	sub	sp, #36	@ 0x24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f1c3 0307 	rsb	r3, r3, #7
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	bf28      	it	cs
 8007d7e:	2304      	movcs	r3, #4
 8007d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3304      	adds	r3, #4
 8007d86:	2b06      	cmp	r3, #6
 8007d88:	d902      	bls.n	8007d90 <NVIC_EncodePriority+0x30>
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	3b03      	subs	r3, #3
 8007d8e:	e000      	b.n	8007d92 <NVIC_EncodePriority+0x32>
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	43da      	mvns	r2, r3
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	401a      	ands	r2, r3
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007da8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	fa01 f303 	lsl.w	r3, r1, r3
 8007db2:	43d9      	mvns	r1, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007db8:	4313      	orrs	r3, r2
         );
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3724      	adds	r7, #36	@ 0x24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dd8:	d301      	bcc.n	8007dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e00f      	b.n	8007dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007dde:	4a0a      	ldr	r2, [pc, #40]	@ (8007e08 <SysTick_Config+0x40>)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007de6:	210f      	movs	r1, #15
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dec:	f7ff ff8e 	bl	8007d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007df0:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <SysTick_Config+0x40>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007df6:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <SysTick_Config+0x40>)
 8007df8:	2207      	movs	r2, #7
 8007dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	e000e010 	.word	0xe000e010

08007e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff ff29 	bl	8007c6c <__NVIC_SetPriorityGrouping>
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	4603      	mov	r3, r0
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e34:	f7ff ff3e 	bl	8007cb4 <__NVIC_GetPriorityGrouping>
 8007e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	6978      	ldr	r0, [r7, #20]
 8007e40:	f7ff ff8e 	bl	8007d60 <NVIC_EncodePriority>
 8007e44:	4602      	mov	r2, r0
 8007e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff ff5d 	bl	8007d0c <__NVIC_SetPriority>
}
 8007e52:	bf00      	nop
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	4603      	mov	r3, r0
 8007e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff ff31 	bl	8007cd0 <__NVIC_EnableIRQ>
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff ffa2 	bl	8007dc8 <SysTick_Config>
 8007e84:	4603      	mov	r3, r0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007ea2:	4b23      	ldr	r3, [pc, #140]	@ (8007f30 <HAL_FLASH_Program+0xa0>)
 8007ea4:	7e1b      	ldrb	r3, [r3, #24]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_FLASH_Program+0x1e>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e03b      	b.n	8007f26 <HAL_FLASH_Program+0x96>
 8007eae:	4b20      	ldr	r3, [pc, #128]	@ (8007f30 <HAL_FLASH_Program+0xa0>)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007eb4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007eb8:	f000 f920 	bl	80080fc <FLASH_WaitForLastOperation>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d12b      	bne.n	8007f1e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007ecc:	783b      	ldrb	r3, [r7, #0]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	68b8      	ldr	r0, [r7, #8]
 8007ed2:	f000 f9cb 	bl	800826c <FLASH_Program_Byte>
 8007ed6:	e016      	b.n	8007f06 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d105      	bne.n	8007eea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007ede:	883b      	ldrh	r3, [r7, #0]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	68b8      	ldr	r0, [r7, #8]
 8007ee4:	f000 f99e 	bl	8008224 <FLASH_Program_HalfWord>
 8007ee8:	e00d      	b.n	8007f06 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d105      	bne.n	8007efc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68b8      	ldr	r0, [r7, #8]
 8007ef6:	f000 f973 	bl	80081e0 <FLASH_Program_Word>
 8007efa:	e004      	b.n	8007f06 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f00:	68b8      	ldr	r0, [r7, #8]
 8007f02:	f000 f93b 	bl	800817c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f06:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007f0a:	f000 f8f7 	bl	80080fc <FLASH_WaitForLastOperation>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8007f12:	4b08      	ldr	r3, [pc, #32]	@ (8007f34 <HAL_FLASH_Program+0xa4>)
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	4a07      	ldr	r2, [pc, #28]	@ (8007f34 <HAL_FLASH_Program+0xa4>)
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007f1e:	4b04      	ldr	r3, [pc, #16]	@ (8007f30 <HAL_FLASH_Program+0xa0>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	761a      	strb	r2, [r3, #24]

  return status;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	2000022c 	.word	0x2000022c
 8007f34:	40023c00 	.word	0x40023c00

08007f38 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]

  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007f42:	4b49      	ldr	r3, [pc, #292]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d020      	beq.n	8007f90 <HAL_FLASH_IRQHandler+0x58>
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007f4e:	4b47      	ldr	r3, [pc, #284]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d107      	bne.n	8007f68 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8007f58:	4b44      	ldr	r3, [pc, #272]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8007f5e:	4b43      	ldr	r3, [pc, #268]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f64:	60da      	str	r2, [r3, #12]
 8007f66:	e00b      	b.n	8007f80 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8007f68:	4b40      	ldr	r3, [pc, #256]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d103      	bne.n	8007f7a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8007f72:	4b3e      	ldr	r3, [pc, #248]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	e002      	b.n	8007f80 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8007f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8007f80:	f000 f996 	bl	80082b0 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f87d 	bl	8008084 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007f8a:	4b38      	ldr	r3, [pc, #224]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007f90:	4b35      	ldr	r3, [pc, #212]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d04a      	beq.n	8008032 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007f9c:	4b32      	ldr	r3, [pc, #200]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007fa2:	4b32      	ldr	r3, [pc, #200]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d12d      	bne.n	8008008 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8007fac:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fb4:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8007fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d015      	beq.n	8007fea <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f853 	bl	8008070 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8007fca:	4b28      	ldr	r3, [pc, #160]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	4a26      	ldr	r2, [pc, #152]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fd2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8007fd4:	4b25      	ldr	r3, [pc, #148]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8007fda:	4b24      	ldr	r3, [pc, #144]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007fdc:	7a1b      	ldrb	r3, [r3, #8]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f9ca 	bl	800837c <FLASH_Erase_Sector>
 8007fe8:	e023      	b.n	8008032 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8007ffc:	f000 fa06 	bl	800840c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f835 	bl	8008070 <HAL_FLASH_EndOfOperationCallback>
 8008006:	e014      	b.n	8008032 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8008008:	4b18      	ldr	r3, [pc, #96]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d107      	bne.n	8008022 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8008012:	f000 f9fb 	bl	800840c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f828 	bl	8008070 <HAL_FLASH_EndOfOperationCallback>
 8008020:	e004      	b.n	800802c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8008022:	4b12      	ldr	r3, [pc, #72]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f822 	bl	8008070 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800802c:	4b0f      	ldr	r3, [pc, #60]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8008032:	4b0e      	ldr	r3, [pc, #56]	@ (800806c <HAL_FLASH_IRQHandler+0x134>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d111      	bne.n	8008060 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800803c:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	4a09      	ldr	r2, [pc, #36]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 8008042:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008046:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8008048:	4b07      	ldr	r3, [pc, #28]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	4a06      	ldr	r2, [pc, #24]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 800804e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008052:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8008054:	4b04      	ldr	r3, [pc, #16]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	4a03      	ldr	r2, [pc, #12]	@ (8008068 <HAL_FLASH_IRQHandler+0x130>)
 800805a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800805e:	6113      	str	r3, [r2, #16]
  }
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40023c00 	.word	0x40023c00
 800806c:	2000022c 	.word	0x2000022c

08008070 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80080a2:	4b0b      	ldr	r3, [pc, #44]	@ (80080d0 <HAL_FLASH_Unlock+0x38>)
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da0b      	bge.n	80080c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80080aa:	4b09      	ldr	r3, [pc, #36]	@ (80080d0 <HAL_FLASH_Unlock+0x38>)
 80080ac:	4a09      	ldr	r2, [pc, #36]	@ (80080d4 <HAL_FLASH_Unlock+0x3c>)
 80080ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80080b0:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <HAL_FLASH_Unlock+0x38>)
 80080b2:	4a09      	ldr	r2, [pc, #36]	@ (80080d8 <HAL_FLASH_Unlock+0x40>)
 80080b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80080b6:	4b06      	ldr	r3, [pc, #24]	@ (80080d0 <HAL_FLASH_Unlock+0x38>)
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	da01      	bge.n	80080c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80080c2:	79fb      	ldrb	r3, [r7, #7]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	40023c00 	.word	0x40023c00
 80080d4:	45670123 	.word	0x45670123
 80080d8:	cdef89ab 	.word	0xcdef89ab

080080dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80080e0:	4b05      	ldr	r3, [pc, #20]	@ (80080f8 <HAL_FLASH_Lock+0x1c>)
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	4a04      	ldr	r2, [pc, #16]	@ (80080f8 <HAL_FLASH_Lock+0x1c>)
 80080e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080ea:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	40023c00 	.word	0x40023c00

080080fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008108:	4b1a      	ldr	r3, [pc, #104]	@ (8008174 <FLASH_WaitForLastOperation+0x78>)
 800810a:	2200      	movs	r2, #0
 800810c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800810e:	f7ff fda1 	bl	8007c54 <HAL_GetTick>
 8008112:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8008114:	e010      	b.n	8008138 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800811c:	d00c      	beq.n	8008138 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <FLASH_WaitForLastOperation+0x38>
 8008124:	f7ff fd96 	bl	8007c54 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d201      	bcs.n	8008138 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e019      	b.n	800816c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8008138:	4b0f      	ldr	r3, [pc, #60]	@ (8008178 <FLASH_WaitForLastOperation+0x7c>)
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e8      	bne.n	8008116 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008144:	4b0c      	ldr	r3, [pc, #48]	@ (8008178 <FLASH_WaitForLastOperation+0x7c>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008150:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <FLASH_WaitForLastOperation+0x7c>)
 8008152:	2201      	movs	r2, #1
 8008154:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008156:	4b08      	ldr	r3, [pc, #32]	@ (8008178 <FLASH_WaitForLastOperation+0x7c>)
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008162:	f000 f8a5 	bl	80082b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800816a:	2300      	movs	r3, #0

}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	2000022c 	.word	0x2000022c
 8008178:	40023c00 	.word	0x40023c00

0800817c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008188:	4b14      	ldr	r3, [pc, #80]	@ (80081dc <FLASH_Program_DoubleWord+0x60>)
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	4a13      	ldr	r2, [pc, #76]	@ (80081dc <FLASH_Program_DoubleWord+0x60>)
 800818e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008192:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008194:	4b11      	ldr	r3, [pc, #68]	@ (80081dc <FLASH_Program_DoubleWord+0x60>)
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	4a10      	ldr	r2, [pc, #64]	@ (80081dc <FLASH_Program_DoubleWord+0x60>)
 800819a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800819e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80081a0:	4b0e      	ldr	r3, [pc, #56]	@ (80081dc <FLASH_Program_DoubleWord+0x60>)
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	4a0d      	ldr	r2, [pc, #52]	@ (80081dc <FLASH_Program_DoubleWord+0x60>)
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80081b2:	f3bf 8f6f 	isb	sy
}
 80081b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80081b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	000a      	movs	r2, r1
 80081c6:	2300      	movs	r3, #0
 80081c8:	68f9      	ldr	r1, [r7, #12]
 80081ca:	3104      	adds	r1, #4
 80081cc:	4613      	mov	r3, r2
 80081ce:	600b      	str	r3, [r1, #0]
}
 80081d0:	bf00      	nop
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	40023c00 	.word	0x40023c00

080081e0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80081ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008220 <FLASH_Program_Word+0x40>)
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008220 <FLASH_Program_Word+0x40>)
 80081f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80081f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <FLASH_Program_Word+0x40>)
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	4a09      	ldr	r2, [pc, #36]	@ (8008220 <FLASH_Program_Word+0x40>)
 80081fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008200:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008202:	4b07      	ldr	r3, [pc, #28]	@ (8008220 <FLASH_Program_Word+0x40>)
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	4a06      	ldr	r2, [pc, #24]	@ (8008220 <FLASH_Program_Word+0x40>)
 8008208:	f043 0301 	orr.w	r3, r3, #1
 800820c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	40023c00 	.word	0x40023c00

08008224 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008230:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <FLASH_Program_HalfWord+0x44>)
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	4a0c      	ldr	r2, [pc, #48]	@ (8008268 <FLASH_Program_HalfWord+0x44>)
 8008236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800823a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800823c:	4b0a      	ldr	r3, [pc, #40]	@ (8008268 <FLASH_Program_HalfWord+0x44>)
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	4a09      	ldr	r2, [pc, #36]	@ (8008268 <FLASH_Program_HalfWord+0x44>)
 8008242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008248:	4b07      	ldr	r3, [pc, #28]	@ (8008268 <FLASH_Program_HalfWord+0x44>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	4a06      	ldr	r2, [pc, #24]	@ (8008268 <FLASH_Program_HalfWord+0x44>)
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	887a      	ldrh	r2, [r7, #2]
 8008258:	801a      	strh	r2, [r3, #0]
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40023c00 	.word	0x40023c00

0800826c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008278:	4b0c      	ldr	r3, [pc, #48]	@ (80082ac <FLASH_Program_Byte+0x40>)
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	4a0b      	ldr	r2, [pc, #44]	@ (80082ac <FLASH_Program_Byte+0x40>)
 800827e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008282:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008284:	4b09      	ldr	r3, [pc, #36]	@ (80082ac <FLASH_Program_Byte+0x40>)
 8008286:	4a09      	ldr	r2, [pc, #36]	@ (80082ac <FLASH_Program_Byte+0x40>)
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800828c:	4b07      	ldr	r3, [pc, #28]	@ (80082ac <FLASH_Program_Byte+0x40>)
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	4a06      	ldr	r2, [pc, #24]	@ (80082ac <FLASH_Program_Byte+0x40>)
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	701a      	strb	r2, [r3, #0]
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40023c00 	.word	0x40023c00

080082b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80082b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0310 	and.w	r3, r3, #16
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80082c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	f043 0310 	orr.w	r3, r3, #16
 80082c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 80082ca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80082cc:	4b29      	ldr	r3, [pc, #164]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 80082ce:	2210      	movs	r2, #16
 80082d0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80082d2:	4b28      	ldr	r3, [pc, #160]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80082de:	4b26      	ldr	r3, [pc, #152]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	f043 0308 	orr.w	r3, r3, #8
 80082e6:	4a24      	ldr	r2, [pc, #144]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 80082e8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80082ea:	4b22      	ldr	r3, [pc, #136]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 80082ec:	2220      	movs	r2, #32
 80082ee:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80082f0:	4b20      	ldr	r3, [pc, #128]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80082fc:	4b1e      	ldr	r3, [pc, #120]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f043 0304 	orr.w	r3, r3, #4
 8008304:	4a1c      	ldr	r2, [pc, #112]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 8008306:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008308:	4b1a      	ldr	r3, [pc, #104]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 800830a:	2240      	movs	r2, #64	@ 0x40
 800830c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800830e:	4b19      	ldr	r3, [pc, #100]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008316:	2b00      	cmp	r3, #0
 8008318:	d008      	beq.n	800832c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800831a:	4b17      	ldr	r3, [pc, #92]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f043 0302 	orr.w	r3, r3, #2
 8008322:	4a15      	ldr	r2, [pc, #84]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 8008324:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008326:	4b13      	ldr	r3, [pc, #76]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 8008328:	2280      	movs	r2, #128	@ 0x80
 800832a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800832c:	4b11      	ldr	r3, [pc, #68]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008338:	4b0f      	ldr	r3, [pc, #60]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	4a0d      	ldr	r2, [pc, #52]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 8008342:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8008344:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 8008346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800834a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800834c:	4b09      	ldr	r3, [pc, #36]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d008      	beq.n	800836a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008358:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	f043 0320 	orr.w	r3, r3, #32
 8008360:	4a05      	ldr	r2, [pc, #20]	@ (8008378 <FLASH_SetErrorCode+0xc8>)
 8008362:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008364:	4b03      	ldr	r3, [pc, #12]	@ (8008374 <FLASH_SetErrorCode+0xc4>)
 8008366:	2202      	movs	r2, #2
 8008368:	60da      	str	r2, [r3, #12]
  }
}
 800836a:	bf00      	nop
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40023c00 	.word	0x40023c00
 8008378:	2000022c 	.word	0x2000022c

0800837c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e010      	b.n	80083ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d103      	bne.n	80083a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800839e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e009      	b.n	80083ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d103      	bne.n	80083b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80083ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	e002      	b.n	80083ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80083b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80083b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80083ba:	4b13      	ldr	r3, [pc, #76]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	4a12      	ldr	r2, [pc, #72]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80083c6:	4b10      	ldr	r3, [pc, #64]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	490f      	ldr	r1, [pc, #60]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80083d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80083dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80083de:	4b0a      	ldr	r3, [pc, #40]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	4313      	orrs	r3, r2
 80083e8:	4a07      	ldr	r2, [pc, #28]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083ea:	f043 0302 	orr.w	r3, r3, #2
 80083ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80083f0:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	4a04      	ldr	r2, [pc, #16]	@ (8008408 <FLASH_Erase_Sector+0x8c>)
 80083f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083fa:	6113      	str	r3, [r2, #16]
}
 80083fc:	bf00      	nop
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	40023c00 	.word	0x40023c00

0800840c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008410:	4b20      	ldr	r3, [pc, #128]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008418:	2b00      	cmp	r3, #0
 800841a:	d017      	beq.n	800844c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800841c:	4b1d      	ldr	r3, [pc, #116]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1c      	ldr	r2, [pc, #112]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008422:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008426:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008428:	4b1a      	ldr	r3, [pc, #104]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a19      	ldr	r2, [pc, #100]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800842e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	4b17      	ldr	r3, [pc, #92]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a16      	ldr	r2, [pc, #88]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800843a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800843e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008440:	4b14      	ldr	r3, [pc, #80]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a13      	ldr	r2, [pc, #76]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800844a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800844c:	4b11      	ldr	r3, [pc, #68]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008454:	2b00      	cmp	r3, #0
 8008456:	d017      	beq.n	8008488 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008458:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a0d      	ldr	r2, [pc, #52]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800845e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008462:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008464:	4b0b      	ldr	r3, [pc, #44]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a0a      	ldr	r2, [pc, #40]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800846a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	4b08      	ldr	r3, [pc, #32]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a07      	ldr	r2, [pc, #28]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800847a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800847c:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <FLASH_FlushCaches+0x88>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a04      	ldr	r2, [pc, #16]	@ (8008494 <FLASH_FlushCaches+0x88>)
 8008482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008486:	6013      	str	r3, [r2, #0]
  }
}
 8008488:	bf00      	nop
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40023c00 	.word	0x40023c00

08008498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008498:	b480      	push	{r7}
 800849a:	b089      	sub	sp, #36	@ 0x24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084ae:	2300      	movs	r3, #0
 80084b0:	61fb      	str	r3, [r7, #28]
 80084b2:	e159      	b.n	8008768 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084b4:	2201      	movs	r2, #1
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4013      	ands	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	f040 8148 	bne.w	8008762 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d005      	beq.n	80084ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d130      	bne.n	800854c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	2203      	movs	r2, #3
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	43db      	mvns	r3, r3
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4013      	ands	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	4313      	orrs	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008520:	2201      	movs	r2, #1
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	43db      	mvns	r3, r3
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	4013      	ands	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	091b      	lsrs	r3, r3, #4
 8008536:	f003 0201 	and.w	r2, r3, #1
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	fa02 f303 	lsl.w	r3, r2, r3
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	4313      	orrs	r3, r2
 8008544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	2b03      	cmp	r3, #3
 8008556:	d017      	beq.n	8008588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	2203      	movs	r2, #3
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	43db      	mvns	r3, r3
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	4013      	ands	r3, r2
 800856e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	fa02 f303 	lsl.w	r3, r2, r3
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	4313      	orrs	r3, r2
 8008580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f003 0303 	and.w	r3, r3, #3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d123      	bne.n	80085dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	08da      	lsrs	r2, r3, #3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3208      	adds	r2, #8
 800859c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	220f      	movs	r2, #15
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	43db      	mvns	r3, r3
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	4013      	ands	r3, r2
 80085b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	08da      	lsrs	r2, r3, #3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3208      	adds	r2, #8
 80085d6:	69b9      	ldr	r1, [r7, #24]
 80085d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	2203      	movs	r2, #3
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	43db      	mvns	r3, r3
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	4013      	ands	r3, r2
 80085f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f003 0203 	and.w	r2, r3, #3
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	4313      	orrs	r3, r2
 8008608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80a2 	beq.w	8008762 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	4b57      	ldr	r3, [pc, #348]	@ (8008780 <HAL_GPIO_Init+0x2e8>)
 8008624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008626:	4a56      	ldr	r2, [pc, #344]	@ (8008780 <HAL_GPIO_Init+0x2e8>)
 8008628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800862c:	6453      	str	r3, [r2, #68]	@ 0x44
 800862e:	4b54      	ldr	r3, [pc, #336]	@ (8008780 <HAL_GPIO_Init+0x2e8>)
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800863a:	4a52      	ldr	r2, [pc, #328]	@ (8008784 <HAL_GPIO_Init+0x2ec>)
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	089b      	lsrs	r3, r3, #2
 8008640:	3302      	adds	r3, #2
 8008642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	220f      	movs	r2, #15
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	43db      	mvns	r3, r3
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	4013      	ands	r3, r2
 800865c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a49      	ldr	r2, [pc, #292]	@ (8008788 <HAL_GPIO_Init+0x2f0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d019      	beq.n	800869a <HAL_GPIO_Init+0x202>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a48      	ldr	r2, [pc, #288]	@ (800878c <HAL_GPIO_Init+0x2f4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <HAL_GPIO_Init+0x1fe>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a47      	ldr	r2, [pc, #284]	@ (8008790 <HAL_GPIO_Init+0x2f8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00d      	beq.n	8008692 <HAL_GPIO_Init+0x1fa>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a46      	ldr	r2, [pc, #280]	@ (8008794 <HAL_GPIO_Init+0x2fc>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d007      	beq.n	800868e <HAL_GPIO_Init+0x1f6>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a45      	ldr	r2, [pc, #276]	@ (8008798 <HAL_GPIO_Init+0x300>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d101      	bne.n	800868a <HAL_GPIO_Init+0x1f2>
 8008686:	2304      	movs	r3, #4
 8008688:	e008      	b.n	800869c <HAL_GPIO_Init+0x204>
 800868a:	2307      	movs	r3, #7
 800868c:	e006      	b.n	800869c <HAL_GPIO_Init+0x204>
 800868e:	2303      	movs	r3, #3
 8008690:	e004      	b.n	800869c <HAL_GPIO_Init+0x204>
 8008692:	2302      	movs	r3, #2
 8008694:	e002      	b.n	800869c <HAL_GPIO_Init+0x204>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <HAL_GPIO_Init+0x204>
 800869a:	2300      	movs	r3, #0
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	f002 0203 	and.w	r2, r2, #3
 80086a2:	0092      	lsls	r2, r2, #2
 80086a4:	4093      	lsls	r3, r2
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086ac:	4935      	ldr	r1, [pc, #212]	@ (8008784 <HAL_GPIO_Init+0x2ec>)
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	089b      	lsrs	r3, r3, #2
 80086b2:	3302      	adds	r3, #2
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086ba:	4b38      	ldr	r3, [pc, #224]	@ (800879c <HAL_GPIO_Init+0x304>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	43db      	mvns	r3, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4013      	ands	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086de:	4a2f      	ldr	r2, [pc, #188]	@ (800879c <HAL_GPIO_Init+0x304>)
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80086e4:	4b2d      	ldr	r3, [pc, #180]	@ (800879c <HAL_GPIO_Init+0x304>)
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	43db      	mvns	r3, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4013      	ands	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008708:	4a24      	ldr	r2, [pc, #144]	@ (800879c <HAL_GPIO_Init+0x304>)
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800870e:	4b23      	ldr	r3, [pc, #140]	@ (800879c <HAL_GPIO_Init+0x304>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	43db      	mvns	r3, r3
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	4013      	ands	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008732:	4a1a      	ldr	r2, [pc, #104]	@ (800879c <HAL_GPIO_Init+0x304>)
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008738:	4b18      	ldr	r3, [pc, #96]	@ (800879c <HAL_GPIO_Init+0x304>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	43db      	mvns	r3, r3
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	4013      	ands	r3, r2
 8008746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800875c:	4a0f      	ldr	r2, [pc, #60]	@ (800879c <HAL_GPIO_Init+0x304>)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	3301      	adds	r3, #1
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2b0f      	cmp	r3, #15
 800876c:	f67f aea2 	bls.w	80084b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	3724      	adds	r7, #36	@ 0x24
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	40023800 	.word	0x40023800
 8008784:	40013800 	.word	0x40013800
 8008788:	40020000 	.word	0x40020000
 800878c:	40020400 	.word	0x40020400
 8008790:	40020800 	.word	0x40020800
 8008794:	40020c00 	.word	0x40020c00
 8008798:	40021000 	.word	0x40021000
 800879c:	40013c00 	.word	0x40013c00

080087a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
 80087ac:	4613      	mov	r3, r2
 80087ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087b0:	787b      	ldrb	r3, [r7, #1]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087b6:	887a      	ldrh	r2, [r7, #2]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80087bc:	e003      	b.n	80087c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80087be:	887b      	ldrh	r3, [r7, #2]
 80087c0:	041a      	lsls	r2, r3, #16
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	619a      	str	r2, [r3, #24]
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
	...

080087d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e267      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d075      	beq.n	80088de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80087f2:	4b88      	ldr	r3, [pc, #544]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 030c 	and.w	r3, r3, #12
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d00c      	beq.n	8008818 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087fe:	4b85      	ldr	r3, [pc, #532]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008806:	2b08      	cmp	r3, #8
 8008808:	d112      	bne.n	8008830 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800880a:	4b82      	ldr	r3, [pc, #520]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008816:	d10b      	bne.n	8008830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008818:	4b7e      	ldr	r3, [pc, #504]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d05b      	beq.n	80088dc <HAL_RCC_OscConfig+0x108>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d157      	bne.n	80088dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e242      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008838:	d106      	bne.n	8008848 <HAL_RCC_OscConfig+0x74>
 800883a:	4b76      	ldr	r3, [pc, #472]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a75      	ldr	r2, [pc, #468]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	e01d      	b.n	8008884 <HAL_RCC_OscConfig+0xb0>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008850:	d10c      	bne.n	800886c <HAL_RCC_OscConfig+0x98>
 8008852:	4b70      	ldr	r3, [pc, #448]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a6f      	ldr	r2, [pc, #444]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	4b6d      	ldr	r3, [pc, #436]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a6c      	ldr	r2, [pc, #432]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	e00b      	b.n	8008884 <HAL_RCC_OscConfig+0xb0>
 800886c:	4b69      	ldr	r3, [pc, #420]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a68      	ldr	r2, [pc, #416]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	4b66      	ldr	r3, [pc, #408]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a65      	ldr	r2, [pc, #404]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 800887e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d013      	beq.n	80088b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800888c:	f7ff f9e2 	bl	8007c54 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008894:	f7ff f9de 	bl	8007c54 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b64      	cmp	r3, #100	@ 0x64
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e207      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088a6:	4b5b      	ldr	r3, [pc, #364]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0xc0>
 80088b2:	e014      	b.n	80088de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b4:	f7ff f9ce 	bl	8007c54 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088bc:	f7ff f9ca 	bl	8007c54 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b64      	cmp	r3, #100	@ 0x64
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e1f3      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088ce:	4b51      	ldr	r3, [pc, #324]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1f0      	bne.n	80088bc <HAL_RCC_OscConfig+0xe8>
 80088da:	e000      	b.n	80088de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d063      	beq.n	80089b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80088ea:	4b4a      	ldr	r3, [pc, #296]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 030c 	and.w	r3, r3, #12
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00b      	beq.n	800890e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088f6:	4b47      	ldr	r3, [pc, #284]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80088fe:	2b08      	cmp	r3, #8
 8008900:	d11c      	bne.n	800893c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008902:	4b44      	ldr	r3, [pc, #272]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d116      	bne.n	800893c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800890e:	4b41      	ldr	r3, [pc, #260]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <HAL_RCC_OscConfig+0x152>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d001      	beq.n	8008926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e1c7      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008926:	4b3b      	ldr	r3, [pc, #236]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	4937      	ldr	r1, [pc, #220]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008936:	4313      	orrs	r3, r2
 8008938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800893a:	e03a      	b.n	80089b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d020      	beq.n	8008986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008944:	4b34      	ldr	r3, [pc, #208]	@ (8008a18 <HAL_RCC_OscConfig+0x244>)
 8008946:	2201      	movs	r2, #1
 8008948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800894a:	f7ff f983 	bl	8007c54 <HAL_GetTick>
 800894e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008950:	e008      	b.n	8008964 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008952:	f7ff f97f 	bl	8007c54 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	2b02      	cmp	r3, #2
 800895e:	d901      	bls.n	8008964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e1a8      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008964:	4b2b      	ldr	r3, [pc, #172]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0f0      	beq.n	8008952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008970:	4b28      	ldr	r3, [pc, #160]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	4925      	ldr	r1, [pc, #148]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 8008980:	4313      	orrs	r3, r2
 8008982:	600b      	str	r3, [r1, #0]
 8008984:	e015      	b.n	80089b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008986:	4b24      	ldr	r3, [pc, #144]	@ (8008a18 <HAL_RCC_OscConfig+0x244>)
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898c:	f7ff f962 	bl	8007c54 <HAL_GetTick>
 8008990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008994:	f7ff f95e 	bl	8007c54 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e187      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f0      	bne.n	8008994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0308 	and.w	r3, r3, #8
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d036      	beq.n	8008a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d016      	beq.n	80089f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089c6:	4b15      	ldr	r3, [pc, #84]	@ (8008a1c <HAL_RCC_OscConfig+0x248>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089cc:	f7ff f942 	bl	8007c54 <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089d4:	f7ff f93e 	bl	8007c54 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e167      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008a14 <HAL_RCC_OscConfig+0x240>)
 80089e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0f0      	beq.n	80089d4 <HAL_RCC_OscConfig+0x200>
 80089f2:	e01b      	b.n	8008a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089f4:	4b09      	ldr	r3, [pc, #36]	@ (8008a1c <HAL_RCC_OscConfig+0x248>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089fa:	f7ff f92b 	bl	8007c54 <HAL_GetTick>
 80089fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a00:	e00e      	b.n	8008a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a02:	f7ff f927 	bl	8007c54 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d907      	bls.n	8008a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e150      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
 8008a14:	40023800 	.word	0x40023800
 8008a18:	42470000 	.word	0x42470000
 8008a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a20:	4b88      	ldr	r3, [pc, #544]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1ea      	bne.n	8008a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8097 	beq.w	8008b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a3e:	4b81      	ldr	r3, [pc, #516]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10f      	bne.n	8008a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
 8008a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a52:	4a7c      	ldr	r2, [pc, #496]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a62:	60bb      	str	r3, [r7, #8]
 8008a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a66:	2301      	movs	r3, #1
 8008a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a6a:	4b77      	ldr	r3, [pc, #476]	@ (8008c48 <HAL_RCC_OscConfig+0x474>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d118      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a76:	4b74      	ldr	r3, [pc, #464]	@ (8008c48 <HAL_RCC_OscConfig+0x474>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a73      	ldr	r2, [pc, #460]	@ (8008c48 <HAL_RCC_OscConfig+0x474>)
 8008a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a82:	f7ff f8e7 	bl	8007c54 <HAL_GetTick>
 8008a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a88:	e008      	b.n	8008a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a8a:	f7ff f8e3 	bl	8007c54 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d901      	bls.n	8008a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e10c      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8008c48 <HAL_RCC_OscConfig+0x474>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0f0      	beq.n	8008a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d106      	bne.n	8008abe <HAL_RCC_OscConfig+0x2ea>
 8008ab0:	4b64      	ldr	r3, [pc, #400]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ab4:	4a63      	ldr	r2, [pc, #396]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ab6:	f043 0301 	orr.w	r3, r3, #1
 8008aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8008abc:	e01c      	b.n	8008af8 <HAL_RCC_OscConfig+0x324>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d10c      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x30c>
 8008ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aca:	4a5e      	ldr	r2, [pc, #376]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008acc:	f043 0304 	orr.w	r3, r3, #4
 8008ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ad8:	f043 0301 	orr.w	r3, r3, #1
 8008adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ade:	e00b      	b.n	8008af8 <HAL_RCC_OscConfig+0x324>
 8008ae0:	4b58      	ldr	r3, [pc, #352]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ae4:	4a57      	ldr	r2, [pc, #348]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ae6:	f023 0301 	bic.w	r3, r3, #1
 8008aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8008aec:	4b55      	ldr	r3, [pc, #340]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af0:	4a54      	ldr	r2, [pc, #336]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008af2:	f023 0304 	bic.w	r3, r3, #4
 8008af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d015      	beq.n	8008b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b00:	f7ff f8a8 	bl	8007c54 <HAL_GetTick>
 8008b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b06:	e00a      	b.n	8008b1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b08:	f7ff f8a4 	bl	8007c54 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e0cb      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b1e:	4b49      	ldr	r3, [pc, #292]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0ee      	beq.n	8008b08 <HAL_RCC_OscConfig+0x334>
 8008b2a:	e014      	b.n	8008b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b2c:	f7ff f892 	bl	8007c54 <HAL_GetTick>
 8008b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b32:	e00a      	b.n	8008b4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b34:	f7ff f88e 	bl	8007c54 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e0b5      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1ee      	bne.n	8008b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d105      	bne.n	8008b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b5c:	4b39      	ldr	r3, [pc, #228]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b60:	4a38      	ldr	r2, [pc, #224]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80a1 	beq.w	8008cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b72:	4b34      	ldr	r3, [pc, #208]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 030c 	and.w	r3, r3, #12
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d05c      	beq.n	8008c38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d141      	bne.n	8008c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b86:	4b31      	ldr	r3, [pc, #196]	@ (8008c4c <HAL_RCC_OscConfig+0x478>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b8c:	f7ff f862 	bl	8007c54 <HAL_GetTick>
 8008b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b94:	f7ff f85e 	bl	8007c54 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e087      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ba6:	4b27      	ldr	r3, [pc, #156]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f0      	bne.n	8008b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69da      	ldr	r2, [r3, #28]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	019b      	lsls	r3, r3, #6
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	041b      	lsls	r3, r3, #16
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd4:	061b      	lsls	r3, r3, #24
 8008bd6:	491b      	ldr	r1, [pc, #108]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8008c4c <HAL_RCC_OscConfig+0x478>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be2:	f7ff f837 	bl	8007c54 <HAL_GetTick>
 8008be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bea:	f7ff f833 	bl	8007c54 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e05c      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfc:	4b11      	ldr	r3, [pc, #68]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0f0      	beq.n	8008bea <HAL_RCC_OscConfig+0x416>
 8008c08:	e054      	b.n	8008cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c0a:	4b10      	ldr	r3, [pc, #64]	@ (8008c4c <HAL_RCC_OscConfig+0x478>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c10:	f7ff f820 	bl	8007c54 <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c16:	e008      	b.n	8008c2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c18:	f7ff f81c 	bl	8007c54 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e045      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c2a:	4b06      	ldr	r3, [pc, #24]	@ (8008c44 <HAL_RCC_OscConfig+0x470>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1f0      	bne.n	8008c18 <HAL_RCC_OscConfig+0x444>
 8008c36:	e03d      	b.n	8008cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d107      	bne.n	8008c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e038      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
 8008c44:	40023800 	.word	0x40023800
 8008c48:	40007000 	.word	0x40007000
 8008c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c50:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <HAL_RCC_OscConfig+0x4ec>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d028      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d121      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d11a      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008c80:	4013      	ands	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d111      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c96:	085b      	lsrs	r3, r3, #1
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d107      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d001      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	40023800 	.word	0x40023800

08008cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e0cc      	b.n	8008e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cd8:	4b68      	ldr	r3, [pc, #416]	@ (8008e7c <HAL_RCC_ClockConfig+0x1b8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d90c      	bls.n	8008d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ce6:	4b65      	ldr	r3, [pc, #404]	@ (8008e7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cee:	4b63      	ldr	r3, [pc, #396]	@ (8008e7c <HAL_RCC_ClockConfig+0x1b8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d001      	beq.n	8008d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e0b8      	b.n	8008e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d020      	beq.n	8008d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d18:	4b59      	ldr	r3, [pc, #356]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	4a58      	ldr	r2, [pc, #352]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0308 	and.w	r3, r3, #8
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d30:	4b53      	ldr	r3, [pc, #332]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	4a52      	ldr	r2, [pc, #328]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d3c:	4b50      	ldr	r3, [pc, #320]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	494d      	ldr	r1, [pc, #308]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d044      	beq.n	8008de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d107      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d62:	4b47      	ldr	r3, [pc, #284]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d119      	bne.n	8008da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e07f      	b.n	8008e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d003      	beq.n	8008d82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d107      	bne.n	8008d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d82:	4b3f      	ldr	r3, [pc, #252]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e06f      	b.n	8008e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d92:	4b3b      	ldr	r3, [pc, #236]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e067      	b.n	8008e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008da2:	4b37      	ldr	r3, [pc, #220]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f023 0203 	bic.w	r2, r3, #3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	4934      	ldr	r1, [pc, #208]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008db4:	f7fe ff4e 	bl	8007c54 <HAL_GetTick>
 8008db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dba:	e00a      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dbc:	f7fe ff4a 	bl	8007c54 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e04f      	b.n	8008e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f003 020c 	and.w	r2, r3, #12
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d1eb      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008de4:	4b25      	ldr	r3, [pc, #148]	@ (8008e7c <HAL_RCC_ClockConfig+0x1b8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d20c      	bcs.n	8008e0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df2:	4b22      	ldr	r3, [pc, #136]	@ (8008e7c <HAL_RCC_ClockConfig+0x1b8>)
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dfa:	4b20      	ldr	r3, [pc, #128]	@ (8008e7c <HAL_RCC_ClockConfig+0x1b8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0307 	and.w	r3, r3, #7
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d001      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e032      	b.n	8008e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d008      	beq.n	8008e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e18:	4b19      	ldr	r3, [pc, #100]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	4916      	ldr	r1, [pc, #88]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e36:	4b12      	ldr	r3, [pc, #72]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	490e      	ldr	r1, [pc, #56]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e4a:	f000 f821 	bl	8008e90 <HAL_RCC_GetSysClockFreq>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	4b0b      	ldr	r3, [pc, #44]	@ (8008e80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	091b      	lsrs	r3, r3, #4
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	490a      	ldr	r1, [pc, #40]	@ (8008e84 <HAL_RCC_ClockConfig+0x1c0>)
 8008e5c:	5ccb      	ldrb	r3, [r1, r3]
 8008e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e62:	4a09      	ldr	r2, [pc, #36]	@ (8008e88 <HAL_RCC_ClockConfig+0x1c4>)
 8008e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008e66:	4b09      	ldr	r3, [pc, #36]	@ (8008e8c <HAL_RCC_ClockConfig+0x1c8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe feae 	bl	8007bcc <HAL_InitTick>

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	40023c00 	.word	0x40023c00
 8008e80:	40023800 	.word	0x40023800
 8008e84:	0800b6d0 	.word	0x0800b6d0
 8008e88:	20000000 	.word	0x20000000
 8008e8c:	20000004 	.word	0x20000004

08008e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e94:	b090      	sub	sp, #64	@ 0x40
 8008e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ea8:	4b59      	ldr	r3, [pc, #356]	@ (8009010 <HAL_RCC_GetSysClockFreq+0x180>)
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f003 030c 	and.w	r3, r3, #12
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d00d      	beq.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	f200 80a1 	bhi.w	8008ffc <HAL_RCC_GetSysClockFreq+0x16c>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d003      	beq.n	8008eca <HAL_RCC_GetSysClockFreq+0x3a>
 8008ec2:	e09b      	b.n	8008ffc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ec4:	4b53      	ldr	r3, [pc, #332]	@ (8009014 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ec8:	e09b      	b.n	8009002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008eca:	4b53      	ldr	r3, [pc, #332]	@ (8009018 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ece:	e098      	b.n	8009002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8009010 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008eda:	4b4d      	ldr	r3, [pc, #308]	@ (8009010 <HAL_RCC_GetSysClockFreq+0x180>)
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d028      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8009010 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	099b      	lsrs	r3, r3, #6
 8008eec:	2200      	movs	r2, #0
 8008eee:	623b      	str	r3, [r7, #32]
 8008ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4b47      	ldr	r3, [pc, #284]	@ (8009018 <HAL_RCC_GetSysClockFreq+0x188>)
 8008efc:	fb03 f201 	mul.w	r2, r3, r1
 8008f00:	2300      	movs	r3, #0
 8008f02:	fb00 f303 	mul.w	r3, r0, r3
 8008f06:	4413      	add	r3, r2
 8008f08:	4a43      	ldr	r2, [pc, #268]	@ (8009018 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f0a:	fba0 1202 	umull	r1, r2, r0, r2
 8008f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f10:	460a      	mov	r2, r1
 8008f12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f16:	4413      	add	r3, r2
 8008f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	61bb      	str	r3, [r7, #24]
 8008f20:	61fa      	str	r2, [r7, #28]
 8008f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008f2a:	f7f7 f9b1 	bl	8000290 <__aeabi_uldivmod>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4613      	mov	r3, r2
 8008f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f36:	e053      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f38:	4b35      	ldr	r3, [pc, #212]	@ (8009010 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	099b      	lsrs	r3, r3, #6
 8008f3e:	2200      	movs	r2, #0
 8008f40:	613b      	str	r3, [r7, #16]
 8008f42:	617a      	str	r2, [r7, #20]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008f4a:	f04f 0b00 	mov.w	fp, #0
 8008f4e:	4652      	mov	r2, sl
 8008f50:	465b      	mov	r3, fp
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f04f 0100 	mov.w	r1, #0
 8008f5a:	0159      	lsls	r1, r3, #5
 8008f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f60:	0150      	lsls	r0, r2, #5
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	ebb2 080a 	subs.w	r8, r2, sl
 8008f6a:	eb63 090b 	sbc.w	r9, r3, fp
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	f04f 0300 	mov.w	r3, #0
 8008f76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008f7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008f7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008f82:	ebb2 0408 	subs.w	r4, r2, r8
 8008f86:	eb63 0509 	sbc.w	r5, r3, r9
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	00eb      	lsls	r3, r5, #3
 8008f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f98:	00e2      	lsls	r2, r4, #3
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	461d      	mov	r5, r3
 8008f9e:	eb14 030a 	adds.w	r3, r4, sl
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	eb45 030b 	adc.w	r3, r5, fp
 8008fa8:	607b      	str	r3, [r7, #4]
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	f04f 0300 	mov.w	r3, #0
 8008fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	028b      	lsls	r3, r1, #10
 8008fba:	4621      	mov	r1, r4
 8008fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	028a      	lsls	r2, r1, #10
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fca:	2200      	movs	r2, #0
 8008fcc:	60bb      	str	r3, [r7, #8]
 8008fce:	60fa      	str	r2, [r7, #12]
 8008fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fd4:	f7f7 f95c 	bl	8000290 <__aeabi_uldivmod>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4613      	mov	r3, r2
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8009010 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	0c1b      	lsrs	r3, r3, #16
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	3301      	adds	r3, #1
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008ff0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ffa:	e002      	b.n	8009002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ffc:	4b05      	ldr	r3, [pc, #20]	@ (8009014 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009004:	4618      	mov	r0, r3
 8009006:	3740      	adds	r7, #64	@ 0x40
 8009008:	46bd      	mov	sp, r7
 800900a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800900e:	bf00      	nop
 8009010:	40023800 	.word	0x40023800
 8009014:	00f42400 	.word	0x00f42400
 8009018:	017d7840 	.word	0x017d7840

0800901c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e07b      	b.n	8009126 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	d108      	bne.n	8009048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800903e:	d009      	beq.n	8009054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	61da      	str	r2, [r3, #28]
 8009046:	e005      	b.n	8009054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fe fbce 	bl	8007810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800908a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	431a      	orrs	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d8:	ea42 0103 	orr.w	r1, r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	0c1b      	lsrs	r3, r3, #16
 80090f2:	f003 0104 	and.w	r1, r3, #4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fa:	f003 0210 	and.w	r2, r3, #16
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009114:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b088      	sub	sp, #32
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	603b      	str	r3, [r7, #0]
 800913a:	4613      	mov	r3, r2
 800913c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800913e:	f7fe fd89 	bl	8007c54 <HAL_GetTick>
 8009142:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009144:	88fb      	ldrh	r3, [r7, #6]
 8009146:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	d001      	beq.n	8009158 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009154:	2302      	movs	r3, #2
 8009156:	e12a      	b.n	80093ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <HAL_SPI_Transmit+0x36>
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e122      	b.n	80093ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <HAL_SPI_Transmit+0x48>
 8009172:	2302      	movs	r3, #2
 8009174:	e11b      	b.n	80093ae <HAL_SPI_Transmit+0x280>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2203      	movs	r2, #3
 8009182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091c4:	d10f      	bne.n	80091e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f0:	2b40      	cmp	r3, #64	@ 0x40
 80091f2:	d007      	beq.n	8009204 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800920c:	d152      	bne.n	80092b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_SPI_Transmit+0xee>
 8009216:	8b7b      	ldrh	r3, [r7, #26]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d145      	bne.n	80092a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	881a      	ldrh	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922c:	1c9a      	adds	r2, r3, #2
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009240:	e032      	b.n	80092a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b02      	cmp	r3, #2
 800924e:	d112      	bne.n	8009276 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009254:	881a      	ldrh	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009260:	1c9a      	adds	r2, r3, #2
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800926a:	b29b      	uxth	r3, r3
 800926c:	3b01      	subs	r3, #1
 800926e:	b29a      	uxth	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009274:	e018      	b.n	80092a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009276:	f7fe fced 	bl	8007c54 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d803      	bhi.n	800928e <HAL_SPI_Transmit+0x160>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800928c:	d102      	bne.n	8009294 <HAL_SPI_Transmit+0x166>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d109      	bne.n	80092a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e082      	b.n	80093ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1c7      	bne.n	8009242 <HAL_SPI_Transmit+0x114>
 80092b2:	e053      	b.n	800935c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <HAL_SPI_Transmit+0x194>
 80092bc:	8b7b      	ldrh	r3, [r7, #26]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d147      	bne.n	8009352 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	7812      	ldrb	r2, [r2, #0]
 80092ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80092e8:	e033      	b.n	8009352 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d113      	bne.n	8009320 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	330c      	adds	r3, #12
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800931e:	e018      	b.n	8009352 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009320:	f7fe fc98 	bl	8007c54 <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d803      	bhi.n	8009338 <HAL_SPI_Transmit+0x20a>
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009336:	d102      	bne.n	800933e <HAL_SPI_Transmit+0x210>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e02d      	b.n	80093ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009356:	b29b      	uxth	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1c6      	bne.n	80092ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fbd9 	bl	8009b18 <SPI_EndRxTxTransaction>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2220      	movs	r2, #32
 8009370:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800937a:	2300      	movs	r3, #0
 800937c:	617b      	str	r3, [r7, #20]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	617b      	str	r3, [r7, #20]
 800938e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80093ac:	2300      	movs	r3, #0
  }
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b088      	sub	sp, #32
 80093ba:	af02      	add	r7, sp, #8
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d001      	beq.n	80093d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80093d2:	2302      	movs	r3, #2
 80093d4:	e104      	b.n	80095e0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093de:	d112      	bne.n	8009406 <HAL_SPI_Receive+0x50>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10e      	bne.n	8009406 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2204      	movs	r2, #4
 80093ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80093f0:	88fa      	ldrh	r2, [r7, #6]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	4613      	mov	r3, r2
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f8f3 	bl	80095e8 <HAL_SPI_TransmitReceive>
 8009402:	4603      	mov	r3, r0
 8009404:	e0ec      	b.n	80095e0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009406:	f7fe fc25 	bl	8007c54 <HAL_GetTick>
 800940a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <HAL_SPI_Receive+0x62>
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e0e1      	b.n	80095e0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_SPI_Receive+0x74>
 8009426:	2302      	movs	r3, #2
 8009428:	e0da      	b.n	80095e0 <HAL_SPI_Receive+0x22a>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2204      	movs	r2, #4
 8009436:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	88fa      	ldrh	r2, [r7, #6]
 800944a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009478:	d10f      	bne.n	800949a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009488:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009498:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a4:	2b40      	cmp	r3, #64	@ 0x40
 80094a6:	d007      	beq.n	80094b8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d170      	bne.n	80095a2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80094c0:	e035      	b.n	800952e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d115      	bne.n	80094fc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f103 020c 	add.w	r2, r3, #12
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	b2d2      	uxtb	r2, r2
 80094e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094fa:	e018      	b.n	800952e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094fc:	f7fe fbaa 	bl	8007c54 <HAL_GetTick>
 8009500:	4602      	mov	r2, r0
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	d803      	bhi.n	8009514 <HAL_SPI_Receive+0x15e>
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009512:	d102      	bne.n	800951a <HAL_SPI_Receive+0x164>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e058      	b.n	80095e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1c4      	bne.n	80094c2 <HAL_SPI_Receive+0x10c>
 8009538:	e038      	b.n	80095ac <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b01      	cmp	r3, #1
 8009546:	d113      	bne.n	8009570 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009552:	b292      	uxth	r2, r2
 8009554:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955a:	1c9a      	adds	r2, r3, #2
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009564:	b29b      	uxth	r3, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800956e:	e018      	b.n	80095a2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009570:	f7fe fb70 	bl	8007c54 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d803      	bhi.n	8009588 <HAL_SPI_Receive+0x1d2>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009586:	d102      	bne.n	800958e <HAL_SPI_Receive+0x1d8>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d109      	bne.n	80095a2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e01e      	b.n	80095e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1c6      	bne.n	800953a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fa4b 	bl	8009a4c <SPI_EndRxTransaction>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2220      	movs	r2, #32
 80095c0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80095de:	2300      	movs	r3, #0
  }
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	@ 0x28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095f6:	2301      	movs	r3, #1
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095fa:	f7fe fb2b 	bl	8007c54 <HAL_GetTick>
 80095fe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009606:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800960e:	887b      	ldrh	r3, [r7, #2]
 8009610:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d00c      	beq.n	8009632 <HAL_SPI_TransmitReceive+0x4a>
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800961e:	d106      	bne.n	800962e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d102      	bne.n	800962e <HAL_SPI_TransmitReceive+0x46>
 8009628:	7ffb      	ldrb	r3, [r7, #31]
 800962a:	2b04      	cmp	r3, #4
 800962c:	d001      	beq.n	8009632 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800962e:	2302      	movs	r3, #2
 8009630:	e17f      	b.n	8009932 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_SPI_TransmitReceive+0x5c>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_SPI_TransmitReceive+0x5c>
 800963e:	887b      	ldrh	r3, [r7, #2]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e174      	b.n	8009932 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800964e:	2b01      	cmp	r3, #1
 8009650:	d101      	bne.n	8009656 <HAL_SPI_TransmitReceive+0x6e>
 8009652:	2302      	movs	r3, #2
 8009654:	e16d      	b.n	8009932 <HAL_SPI_TransmitReceive+0x34a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b04      	cmp	r3, #4
 8009668:	d003      	beq.n	8009672 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2205      	movs	r2, #5
 800966e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	887a      	ldrh	r2, [r7, #2]
 8009682:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	887a      	ldrh	r2, [r7, #2]
 8009688:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	887a      	ldrh	r2, [r7, #2]
 8009694:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	887a      	ldrh	r2, [r7, #2]
 800969a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b2:	2b40      	cmp	r3, #64	@ 0x40
 80096b4:	d007      	beq.n	80096c6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096ce:	d17e      	bne.n	80097ce <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <HAL_SPI_TransmitReceive+0xf6>
 80096d8:	8afb      	ldrh	r3, [r7, #22]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d16c      	bne.n	80097b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	881a      	ldrh	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ee:	1c9a      	adds	r2, r3, #2
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009702:	e059      	b.n	80097b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b02      	cmp	r3, #2
 8009710:	d11b      	bne.n	800974a <HAL_SPI_TransmitReceive+0x162>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009716:	b29b      	uxth	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d016      	beq.n	800974a <HAL_SPI_TransmitReceive+0x162>
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	2b01      	cmp	r3, #1
 8009720:	d113      	bne.n	800974a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009726:	881a      	ldrh	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009732:	1c9a      	adds	r2, r3, #2
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b01      	cmp	r3, #1
 8009756:	d119      	bne.n	800978c <HAL_SPI_TransmitReceive+0x1a4>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800975c:	b29b      	uxth	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d014      	beq.n	800978c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	b292      	uxth	r2, r2
 800976e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009774:	1c9a      	adds	r2, r3, #2
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009788:	2301      	movs	r3, #1
 800978a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800978c:	f7fe fa62 	bl	8007c54 <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009798:	429a      	cmp	r2, r3
 800979a:	d80d      	bhi.n	80097b8 <HAL_SPI_TransmitReceive+0x1d0>
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097a2:	d009      	beq.n	80097b8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e0bc      	b.n	8009932 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097bc:	b29b      	uxth	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1a0      	bne.n	8009704 <HAL_SPI_TransmitReceive+0x11c>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d19b      	bne.n	8009704 <HAL_SPI_TransmitReceive+0x11c>
 80097cc:	e082      	b.n	80098d4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <HAL_SPI_TransmitReceive+0x1f4>
 80097d6:	8afb      	ldrh	r3, [r7, #22]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d171      	bne.n	80098c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	330c      	adds	r3, #12
 80097e6:	7812      	ldrb	r2, [r2, #0]
 80097e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009802:	e05d      	b.n	80098c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b02      	cmp	r3, #2
 8009810:	d11c      	bne.n	800984c <HAL_SPI_TransmitReceive+0x264>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009816:	b29b      	uxth	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d017      	beq.n	800984c <HAL_SPI_TransmitReceive+0x264>
 800981c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981e:	2b01      	cmp	r3, #1
 8009820:	d114      	bne.n	800984c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	330c      	adds	r3, #12
 800982c:	7812      	ldrb	r2, [r2, #0]
 800982e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800983e:	b29b      	uxth	r3, r3
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b01      	cmp	r3, #1
 8009858:	d119      	bne.n	800988e <HAL_SPI_TransmitReceive+0x2a6>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800985e:	b29b      	uxth	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d014      	beq.n	800988e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009880:	b29b      	uxth	r3, r3
 8009882:	3b01      	subs	r3, #1
 8009884:	b29a      	uxth	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800988a:	2301      	movs	r3, #1
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800988e:	f7fe f9e1 	bl	8007c54 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800989a:	429a      	cmp	r2, r3
 800989c:	d803      	bhi.n	80098a6 <HAL_SPI_TransmitReceive+0x2be>
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098a4:	d102      	bne.n	80098ac <HAL_SPI_TransmitReceive+0x2c4>
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e038      	b.n	8009932 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d19c      	bne.n	8009804 <HAL_SPI_TransmitReceive+0x21c>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d197      	bne.n	8009804 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098d4:	6a3a      	ldr	r2, [r7, #32]
 80098d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 f91d 	bl	8009b18 <SPI_EndRxTxTransaction>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d008      	beq.n	80098f6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e01d      	b.n	8009932 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10a      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098fe:	2300      	movs	r3, #0
 8009900:	613b      	str	r3, [r7, #16]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e000      	b.n	8009932 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009930:	2300      	movs	r3, #0
  }
}
 8009932:	4618      	mov	r0, r3
 8009934:	3728      	adds	r7, #40	@ 0x28
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	4613      	mov	r3, r2
 800994a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800994c:	f7fe f982 	bl	8007c54 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4413      	add	r3, r2
 800995a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800995c:	f7fe f97a 	bl	8007c54 <HAL_GetTick>
 8009960:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009962:	4b39      	ldr	r3, [pc, #228]	@ (8009a48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	015b      	lsls	r3, r3, #5
 8009968:	0d1b      	lsrs	r3, r3, #20
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	fb02 f303 	mul.w	r3, r2, r3
 8009970:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009972:	e054      	b.n	8009a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800997a:	d050      	beq.n	8009a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800997c:	f7fe f96a 	bl	8007c54 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	429a      	cmp	r2, r3
 800998a:	d902      	bls.n	8009992 <SPI_WaitFlagStateUntilTimeout+0x56>
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d13d      	bne.n	8009a0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099aa:	d111      	bne.n	80099d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099b4:	d004      	beq.n	80099c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099be:	d107      	bne.n	80099d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099d8:	d10f      	bne.n	80099fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e017      	b.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4013      	ands	r3, r2
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	bf0c      	ite	eq
 8009a2e:	2301      	moveq	r3, #1
 8009a30:	2300      	movne	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d19b      	bne.n	8009974 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000000 	.word	0x20000000

08009a4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a60:	d111      	bne.n	8009a86 <SPI_EndRxTransaction+0x3a>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a6a:	d004      	beq.n	8009a76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a74:	d107      	bne.n	8009a86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a8e:	d12a      	bne.n	8009ae6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a98:	d012      	beq.n	8009ac0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2180      	movs	r1, #128	@ 0x80
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f7ff ff49 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d02d      	beq.n	8009b0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab4:	f043 0220 	orr.w	r2, r3, #32
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e026      	b.n	8009b0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2101      	movs	r1, #1
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff ff36 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01a      	beq.n	8009b0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ada:	f043 0220 	orr.w	r2, r3, #32
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e013      	b.n	8009b0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2101      	movs	r1, #1
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7ff ff23 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b00:	f043 0220 	orr.w	r2, r3, #32
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e000      	b.n	8009b0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	2102      	movs	r1, #2
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff ff04 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d007      	beq.n	8009b4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b3e:	f043 0220 	orr.w	r2, r3, #32
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e032      	b.n	8009bb0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb8 <SPI_EndRxTxTransaction+0xa0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8009bbc <SPI_EndRxTxTransaction+0xa4>)
 8009b50:	fba2 2303 	umull	r2, r3, r2, r3
 8009b54:	0d5b      	lsrs	r3, r3, #21
 8009b56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b5a:	fb02 f303 	mul.w	r3, r2, r3
 8009b5e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b68:	d112      	bne.n	8009b90 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2200      	movs	r2, #0
 8009b72:	2180      	movs	r1, #128	@ 0x80
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff fee1 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d016      	beq.n	8009bae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b84:	f043 0220 	orr.w	r2, r3, #32
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e00f      	b.n	8009bb0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ba6:	2b80      	cmp	r3, #128	@ 0x80
 8009ba8:	d0f2      	beq.n	8009b90 <SPI_EndRxTxTransaction+0x78>
 8009baa:	e000      	b.n	8009bae <SPI_EndRxTxTransaction+0x96>
        break;
 8009bac:	bf00      	nop
  }

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20000000 	.word	0x20000000
 8009bbc:	165e9f81 	.word	0x165e9f81

08009bc0 <__assert_func>:
 8009bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bc2:	4614      	mov	r4, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4b09      	ldr	r3, [pc, #36]	@ (8009bec <__assert_func+0x2c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4605      	mov	r5, r0
 8009bcc:	68d8      	ldr	r0, [r3, #12]
 8009bce:	b954      	cbnz	r4, 8009be6 <__assert_func+0x26>
 8009bd0:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <__assert_func+0x30>)
 8009bd2:	461c      	mov	r4, r3
 8009bd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bd8:	9100      	str	r1, [sp, #0]
 8009bda:	462b      	mov	r3, r5
 8009bdc:	4905      	ldr	r1, [pc, #20]	@ (8009bf4 <__assert_func+0x34>)
 8009bde:	f000 f96f 	bl	8009ec0 <fiprintf>
 8009be2:	f000 fa40 	bl	800a066 <abort>
 8009be6:	4b04      	ldr	r3, [pc, #16]	@ (8009bf8 <__assert_func+0x38>)
 8009be8:	e7f4      	b.n	8009bd4 <__assert_func+0x14>
 8009bea:	bf00      	nop
 8009bec:	20000018 	.word	0x20000018
 8009bf0:	0800b71b 	.word	0x0800b71b
 8009bf4:	0800b6ed 	.word	0x0800b6ed
 8009bf8:	0800b6e0 	.word	0x0800b6e0

08009bfc <malloc>:
 8009bfc:	4b02      	ldr	r3, [pc, #8]	@ (8009c08 <malloc+0xc>)
 8009bfe:	4601      	mov	r1, r0
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	f000 b82d 	b.w	8009c60 <_malloc_r>
 8009c06:	bf00      	nop
 8009c08:	20000018 	.word	0x20000018

08009c0c <free>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <free+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f000 ba2f 	b.w	800a074 <_free_r>
 8009c16:	bf00      	nop
 8009c18:	20000018 	.word	0x20000018

08009c1c <sbrk_aligned>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009c5c <sbrk_aligned+0x40>)
 8009c20:	460c      	mov	r4, r1
 8009c22:	6831      	ldr	r1, [r6, #0]
 8009c24:	4605      	mov	r5, r0
 8009c26:	b911      	cbnz	r1, 8009c2e <sbrk_aligned+0x12>
 8009c28:	f000 f9d2 	bl	8009fd0 <_sbrk_r>
 8009c2c:	6030      	str	r0, [r6, #0]
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f000 f9cd 	bl	8009fd0 <_sbrk_r>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d103      	bne.n	8009c42 <sbrk_aligned+0x26>
 8009c3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009c3e:	4620      	mov	r0, r4
 8009c40:	bd70      	pop	{r4, r5, r6, pc}
 8009c42:	1cc4      	adds	r4, r0, #3
 8009c44:	f024 0403 	bic.w	r4, r4, #3
 8009c48:	42a0      	cmp	r0, r4
 8009c4a:	d0f8      	beq.n	8009c3e <sbrk_aligned+0x22>
 8009c4c:	1a21      	subs	r1, r4, r0
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 f9be 	bl	8009fd0 <_sbrk_r>
 8009c54:	3001      	adds	r0, #1
 8009c56:	d1f2      	bne.n	8009c3e <sbrk_aligned+0x22>
 8009c58:	e7ef      	b.n	8009c3a <sbrk_aligned+0x1e>
 8009c5a:	bf00      	nop
 8009c5c:	2000024c 	.word	0x2000024c

08009c60 <_malloc_r>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	1ccd      	adds	r5, r1, #3
 8009c66:	f025 0503 	bic.w	r5, r5, #3
 8009c6a:	3508      	adds	r5, #8
 8009c6c:	2d0c      	cmp	r5, #12
 8009c6e:	bf38      	it	cc
 8009c70:	250c      	movcc	r5, #12
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	4606      	mov	r6, r0
 8009c76:	db01      	blt.n	8009c7c <_malloc_r+0x1c>
 8009c78:	42a9      	cmp	r1, r5
 8009c7a:	d904      	bls.n	8009c86 <_malloc_r+0x26>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	6033      	str	r3, [r6, #0]
 8009c80:	2000      	movs	r0, #0
 8009c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d5c <_malloc_r+0xfc>
 8009c8a:	f000 f869 	bl	8009d60 <__malloc_lock>
 8009c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c92:	461c      	mov	r4, r3
 8009c94:	bb44      	cbnz	r4, 8009ce8 <_malloc_r+0x88>
 8009c96:	4629      	mov	r1, r5
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff ffbf 	bl	8009c1c <sbrk_aligned>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	d158      	bne.n	8009d56 <_malloc_r+0xf6>
 8009ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ca8:	4627      	mov	r7, r4
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	d143      	bne.n	8009d36 <_malloc_r+0xd6>
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	d04b      	beq.n	8009d4a <_malloc_r+0xea>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	eb04 0903 	add.w	r9, r4, r3
 8009cbc:	f000 f988 	bl	8009fd0 <_sbrk_r>
 8009cc0:	4581      	cmp	r9, r0
 8009cc2:	d142      	bne.n	8009d4a <_malloc_r+0xea>
 8009cc4:	6821      	ldr	r1, [r4, #0]
 8009cc6:	1a6d      	subs	r5, r5, r1
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ffa6 	bl	8009c1c <sbrk_aligned>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d03a      	beq.n	8009d4a <_malloc_r+0xea>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	442b      	add	r3, r5
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	f8d8 3000 	ldr.w	r3, [r8]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	bb62      	cbnz	r2, 8009d3c <_malloc_r+0xdc>
 8009ce2:	f8c8 7000 	str.w	r7, [r8]
 8009ce6:	e00f      	b.n	8009d08 <_malloc_r+0xa8>
 8009ce8:	6822      	ldr	r2, [r4, #0]
 8009cea:	1b52      	subs	r2, r2, r5
 8009cec:	d420      	bmi.n	8009d30 <_malloc_r+0xd0>
 8009cee:	2a0b      	cmp	r2, #11
 8009cf0:	d917      	bls.n	8009d22 <_malloc_r+0xc2>
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	6025      	str	r5, [r4, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	6059      	strne	r1, [r3, #4]
 8009cfc:	6863      	ldr	r3, [r4, #4]
 8009cfe:	bf08      	it	eq
 8009d00:	f8c8 1000 	streq.w	r1, [r8]
 8009d04:	5162      	str	r2, [r4, r5]
 8009d06:	604b      	str	r3, [r1, #4]
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 f82f 	bl	8009d6c <__malloc_unlock>
 8009d0e:	f104 000b 	add.w	r0, r4, #11
 8009d12:	1d23      	adds	r3, r4, #4
 8009d14:	f020 0007 	bic.w	r0, r0, #7
 8009d18:	1ac2      	subs	r2, r0, r3
 8009d1a:	bf1c      	itt	ne
 8009d1c:	1a1b      	subne	r3, r3, r0
 8009d1e:	50a3      	strne	r3, [r4, r2]
 8009d20:	e7af      	b.n	8009c82 <_malloc_r+0x22>
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bf0c      	ite	eq
 8009d28:	f8c8 2000 	streq.w	r2, [r8]
 8009d2c:	605a      	strne	r2, [r3, #4]
 8009d2e:	e7eb      	b.n	8009d08 <_malloc_r+0xa8>
 8009d30:	4623      	mov	r3, r4
 8009d32:	6864      	ldr	r4, [r4, #4]
 8009d34:	e7ae      	b.n	8009c94 <_malloc_r+0x34>
 8009d36:	463c      	mov	r4, r7
 8009d38:	687f      	ldr	r7, [r7, #4]
 8009d3a:	e7b6      	b.n	8009caa <_malloc_r+0x4a>
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d1fb      	bne.n	8009d3c <_malloc_r+0xdc>
 8009d44:	2300      	movs	r3, #0
 8009d46:	6053      	str	r3, [r2, #4]
 8009d48:	e7de      	b.n	8009d08 <_malloc_r+0xa8>
 8009d4a:	230c      	movs	r3, #12
 8009d4c:	6033      	str	r3, [r6, #0]
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 f80c 	bl	8009d6c <__malloc_unlock>
 8009d54:	e794      	b.n	8009c80 <_malloc_r+0x20>
 8009d56:	6005      	str	r5, [r0, #0]
 8009d58:	e7d6      	b.n	8009d08 <_malloc_r+0xa8>
 8009d5a:	bf00      	nop
 8009d5c:	20000250 	.word	0x20000250

08009d60 <__malloc_lock>:
 8009d60:	4801      	ldr	r0, [pc, #4]	@ (8009d68 <__malloc_lock+0x8>)
 8009d62:	f000 b970 	b.w	800a046 <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	20000390 	.word	0x20000390

08009d6c <__malloc_unlock>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	@ (8009d74 <__malloc_unlock+0x8>)
 8009d6e:	f000 b96b 	b.w	800a048 <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	20000390 	.word	0x20000390

08009d78 <std>:
 8009d78:	2300      	movs	r3, #0
 8009d7a:	b510      	push	{r4, lr}
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d86:	6083      	str	r3, [r0, #8]
 8009d88:	8181      	strh	r1, [r0, #12]
 8009d8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d8c:	81c2      	strh	r2, [r0, #14]
 8009d8e:	6183      	str	r3, [r0, #24]
 8009d90:	4619      	mov	r1, r3
 8009d92:	2208      	movs	r2, #8
 8009d94:	305c      	adds	r0, #92	@ 0x5c
 8009d96:	f000 f913 	bl	8009fc0 <memset>
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd0 <std+0x58>)
 8009d9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd4 <std+0x5c>)
 8009da0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <std+0x60>)
 8009da4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009da6:	4b0d      	ldr	r3, [pc, #52]	@ (8009ddc <std+0x64>)
 8009da8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009daa:	4b0d      	ldr	r3, [pc, #52]	@ (8009de0 <std+0x68>)
 8009dac:	6224      	str	r4, [r4, #32]
 8009dae:	429c      	cmp	r4, r3
 8009db0:	d006      	beq.n	8009dc0 <std+0x48>
 8009db2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009db6:	4294      	cmp	r4, r2
 8009db8:	d002      	beq.n	8009dc0 <std+0x48>
 8009dba:	33d0      	adds	r3, #208	@ 0xd0
 8009dbc:	429c      	cmp	r4, r3
 8009dbe:	d105      	bne.n	8009dcc <std+0x54>
 8009dc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dc8:	f000 b93c 	b.w	800a044 <__retarget_lock_init_recursive>
 8009dcc:	bd10      	pop	{r4, pc}
 8009dce:	bf00      	nop
 8009dd0:	0800a801 	.word	0x0800a801
 8009dd4:	0800a823 	.word	0x0800a823
 8009dd8:	0800a85b 	.word	0x0800a85b
 8009ddc:	0800a87f 	.word	0x0800a87f
 8009de0:	20000254 	.word	0x20000254

08009de4 <stdio_exit_handler>:
 8009de4:	4a02      	ldr	r2, [pc, #8]	@ (8009df0 <stdio_exit_handler+0xc>)
 8009de6:	4903      	ldr	r1, [pc, #12]	@ (8009df4 <stdio_exit_handler+0x10>)
 8009de8:	4803      	ldr	r0, [pc, #12]	@ (8009df8 <stdio_exit_handler+0x14>)
 8009dea:	f000 b87b 	b.w	8009ee4 <_fwalk_sglue>
 8009dee:	bf00      	nop
 8009df0:	2000000c 	.word	0x2000000c
 8009df4:	0800a7b1 	.word	0x0800a7b1
 8009df8:	2000001c 	.word	0x2000001c

08009dfc <cleanup_stdio>:
 8009dfc:	6841      	ldr	r1, [r0, #4]
 8009dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009e30 <cleanup_stdio+0x34>)
 8009e00:	4299      	cmp	r1, r3
 8009e02:	b510      	push	{r4, lr}
 8009e04:	4604      	mov	r4, r0
 8009e06:	d001      	beq.n	8009e0c <cleanup_stdio+0x10>
 8009e08:	f000 fcd2 	bl	800a7b0 <_fflush_r>
 8009e0c:	68a1      	ldr	r1, [r4, #8]
 8009e0e:	4b09      	ldr	r3, [pc, #36]	@ (8009e34 <cleanup_stdio+0x38>)
 8009e10:	4299      	cmp	r1, r3
 8009e12:	d002      	beq.n	8009e1a <cleanup_stdio+0x1e>
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fccb 	bl	800a7b0 <_fflush_r>
 8009e1a:	68e1      	ldr	r1, [r4, #12]
 8009e1c:	4b06      	ldr	r3, [pc, #24]	@ (8009e38 <cleanup_stdio+0x3c>)
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	d004      	beq.n	8009e2c <cleanup_stdio+0x30>
 8009e22:	4620      	mov	r0, r4
 8009e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e28:	f000 bcc2 	b.w	800a7b0 <_fflush_r>
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000254 	.word	0x20000254
 8009e34:	200002bc 	.word	0x200002bc
 8009e38:	20000324 	.word	0x20000324

08009e3c <global_stdio_init.part.0>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e6c <global_stdio_init.part.0+0x30>)
 8009e40:	4c0b      	ldr	r4, [pc, #44]	@ (8009e70 <global_stdio_init.part.0+0x34>)
 8009e42:	4a0c      	ldr	r2, [pc, #48]	@ (8009e74 <global_stdio_init.part.0+0x38>)
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	4620      	mov	r0, r4
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2104      	movs	r1, #4
 8009e4c:	f7ff ff94 	bl	8009d78 <std>
 8009e50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e54:	2201      	movs	r2, #1
 8009e56:	2109      	movs	r1, #9
 8009e58:	f7ff ff8e 	bl	8009d78 <std>
 8009e5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e60:	2202      	movs	r2, #2
 8009e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e66:	2112      	movs	r1, #18
 8009e68:	f7ff bf86 	b.w	8009d78 <std>
 8009e6c:	2000038c 	.word	0x2000038c
 8009e70:	20000254 	.word	0x20000254
 8009e74:	08009de5 	.word	0x08009de5

08009e78 <__sfp_lock_acquire>:
 8009e78:	4801      	ldr	r0, [pc, #4]	@ (8009e80 <__sfp_lock_acquire+0x8>)
 8009e7a:	f000 b8e4 	b.w	800a046 <__retarget_lock_acquire_recursive>
 8009e7e:	bf00      	nop
 8009e80:	20000391 	.word	0x20000391

08009e84 <__sfp_lock_release>:
 8009e84:	4801      	ldr	r0, [pc, #4]	@ (8009e8c <__sfp_lock_release+0x8>)
 8009e86:	f000 b8df 	b.w	800a048 <__retarget_lock_release_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	20000391 	.word	0x20000391

08009e90 <__sinit>:
 8009e90:	b510      	push	{r4, lr}
 8009e92:	4604      	mov	r4, r0
 8009e94:	f7ff fff0 	bl	8009e78 <__sfp_lock_acquire>
 8009e98:	6a23      	ldr	r3, [r4, #32]
 8009e9a:	b11b      	cbz	r3, 8009ea4 <__sinit+0x14>
 8009e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea0:	f7ff bff0 	b.w	8009e84 <__sfp_lock_release>
 8009ea4:	4b04      	ldr	r3, [pc, #16]	@ (8009eb8 <__sinit+0x28>)
 8009ea6:	6223      	str	r3, [r4, #32]
 8009ea8:	4b04      	ldr	r3, [pc, #16]	@ (8009ebc <__sinit+0x2c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1f5      	bne.n	8009e9c <__sinit+0xc>
 8009eb0:	f7ff ffc4 	bl	8009e3c <global_stdio_init.part.0>
 8009eb4:	e7f2      	b.n	8009e9c <__sinit+0xc>
 8009eb6:	bf00      	nop
 8009eb8:	08009dfd 	.word	0x08009dfd
 8009ebc:	2000038c 	.word	0x2000038c

08009ec0 <fiprintf>:
 8009ec0:	b40e      	push	{r1, r2, r3}
 8009ec2:	b503      	push	{r0, r1, lr}
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	4805      	ldr	r0, [pc, #20]	@ (8009ee0 <fiprintf+0x20>)
 8009eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ece:	6800      	ldr	r0, [r0, #0]
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	f000 f943 	bl	800a15c <_vfiprintf_r>
 8009ed6:	b002      	add	sp, #8
 8009ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009edc:	b003      	add	sp, #12
 8009ede:	4770      	bx	lr
 8009ee0:	20000018 	.word	0x20000018

08009ee4 <_fwalk_sglue>:
 8009ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee8:	4607      	mov	r7, r0
 8009eea:	4688      	mov	r8, r1
 8009eec:	4614      	mov	r4, r2
 8009eee:	2600      	movs	r6, #0
 8009ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ef8:	d505      	bpl.n	8009f06 <_fwalk_sglue+0x22>
 8009efa:	6824      	ldr	r4, [r4, #0]
 8009efc:	2c00      	cmp	r4, #0
 8009efe:	d1f7      	bne.n	8009ef0 <_fwalk_sglue+0xc>
 8009f00:	4630      	mov	r0, r6
 8009f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d907      	bls.n	8009f1c <_fwalk_sglue+0x38>
 8009f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f10:	3301      	adds	r3, #1
 8009f12:	d003      	beq.n	8009f1c <_fwalk_sglue+0x38>
 8009f14:	4629      	mov	r1, r5
 8009f16:	4638      	mov	r0, r7
 8009f18:	47c0      	blx	r8
 8009f1a:	4306      	orrs	r6, r0
 8009f1c:	3568      	adds	r5, #104	@ 0x68
 8009f1e:	e7e9      	b.n	8009ef4 <_fwalk_sglue+0x10>

08009f20 <iprintf>:
 8009f20:	b40f      	push	{r0, r1, r2, r3}
 8009f22:	b507      	push	{r0, r1, r2, lr}
 8009f24:	4906      	ldr	r1, [pc, #24]	@ (8009f40 <iprintf+0x20>)
 8009f26:	ab04      	add	r3, sp, #16
 8009f28:	6808      	ldr	r0, [r1, #0]
 8009f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2e:	6881      	ldr	r1, [r0, #8]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	f000 f913 	bl	800a15c <_vfiprintf_r>
 8009f36:	b003      	add	sp, #12
 8009f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f3c:	b004      	add	sp, #16
 8009f3e:	4770      	bx	lr
 8009f40:	20000018 	.word	0x20000018

08009f44 <strchr>:
 8009f44:	b2c9      	uxtb	r1, r1
 8009f46:	4603      	mov	r3, r0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f4e:	b112      	cbz	r2, 8009f56 <strchr+0x12>
 8009f50:	428a      	cmp	r2, r1
 8009f52:	d1f9      	bne.n	8009f48 <strchr+0x4>
 8009f54:	4770      	bx	lr
 8009f56:	2900      	cmp	r1, #0
 8009f58:	bf18      	it	ne
 8009f5a:	2000      	movne	r0, #0
 8009f5c:	4770      	bx	lr

08009f5e <strcspn>:
 8009f5e:	b570      	push	{r4, r5, r6, lr}
 8009f60:	4603      	mov	r3, r0
 8009f62:	461e      	mov	r6, r3
 8009f64:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009f68:	b144      	cbz	r4, 8009f7c <strcspn+0x1e>
 8009f6a:	1e4a      	subs	r2, r1, #1
 8009f6c:	e001      	b.n	8009f72 <strcspn+0x14>
 8009f6e:	42a5      	cmp	r5, r4
 8009f70:	d004      	beq.n	8009f7c <strcspn+0x1e>
 8009f72:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	d1f9      	bne.n	8009f6e <strcspn+0x10>
 8009f7a:	e7f2      	b.n	8009f62 <strcspn+0x4>
 8009f7c:	1a30      	subs	r0, r6, r0
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}

08009f80 <strspn>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	4603      	mov	r3, r0
 8009f84:	461e      	mov	r6, r3
 8009f86:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009f8a:	b13c      	cbz	r4, 8009f9c <strspn+0x1c>
 8009f8c:	1e4a      	subs	r2, r1, #1
 8009f8e:	e001      	b.n	8009f94 <strspn+0x14>
 8009f90:	42a5      	cmp	r5, r4
 8009f92:	d0f7      	beq.n	8009f84 <strspn+0x4>
 8009f94:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	d1f9      	bne.n	8009f90 <strspn+0x10>
 8009f9c:	1a30      	subs	r0, r6, r0
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}

08009fa0 <memcmp>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	3901      	subs	r1, #1
 8009fa4:	4402      	add	r2, r0
 8009fa6:	4290      	cmp	r0, r2
 8009fa8:	d101      	bne.n	8009fae <memcmp+0xe>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e005      	b.n	8009fba <memcmp+0x1a>
 8009fae:	7803      	ldrb	r3, [r0, #0]
 8009fb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009fb4:	42a3      	cmp	r3, r4
 8009fb6:	d001      	beq.n	8009fbc <memcmp+0x1c>
 8009fb8:	1b18      	subs	r0, r3, r4
 8009fba:	bd10      	pop	{r4, pc}
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	e7f2      	b.n	8009fa6 <memcmp+0x6>

08009fc0 <memset>:
 8009fc0:	4402      	add	r2, r0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d100      	bne.n	8009fca <memset+0xa>
 8009fc8:	4770      	bx	lr
 8009fca:	f803 1b01 	strb.w	r1, [r3], #1
 8009fce:	e7f9      	b.n	8009fc4 <memset+0x4>

08009fd0 <_sbrk_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d06      	ldr	r5, [pc, #24]	@ (8009fec <_sbrk_r+0x1c>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7fd fd2c 	bl	8007a38 <_sbrk>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_sbrk_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_sbrk_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	20000394 	.word	0x20000394

08009ff0 <__errno>:
 8009ff0:	4b01      	ldr	r3, [pc, #4]	@ (8009ff8 <__errno+0x8>)
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000018 	.word	0x20000018

08009ffc <__libc_init_array>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	4d0d      	ldr	r5, [pc, #52]	@ (800a034 <__libc_init_array+0x38>)
 800a000:	4c0d      	ldr	r4, [pc, #52]	@ (800a038 <__libc_init_array+0x3c>)
 800a002:	1b64      	subs	r4, r4, r5
 800a004:	10a4      	asrs	r4, r4, #2
 800a006:	2600      	movs	r6, #0
 800a008:	42a6      	cmp	r6, r4
 800a00a:	d109      	bne.n	800a020 <__libc_init_array+0x24>
 800a00c:	4d0b      	ldr	r5, [pc, #44]	@ (800a03c <__libc_init_array+0x40>)
 800a00e:	4c0c      	ldr	r4, [pc, #48]	@ (800a040 <__libc_init_array+0x44>)
 800a010:	f000 fddc 	bl	800abcc <_init>
 800a014:	1b64      	subs	r4, r4, r5
 800a016:	10a4      	asrs	r4, r4, #2
 800a018:	2600      	movs	r6, #0
 800a01a:	42a6      	cmp	r6, r4
 800a01c:	d105      	bne.n	800a02a <__libc_init_array+0x2e>
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	f855 3b04 	ldr.w	r3, [r5], #4
 800a024:	4798      	blx	r3
 800a026:	3601      	adds	r6, #1
 800a028:	e7ee      	b.n	800a008 <__libc_init_array+0xc>
 800a02a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02e:	4798      	blx	r3
 800a030:	3601      	adds	r6, #1
 800a032:	e7f2      	b.n	800a01a <__libc_init_array+0x1e>
 800a034:	0800b758 	.word	0x0800b758
 800a038:	0800b758 	.word	0x0800b758
 800a03c:	0800b758 	.word	0x0800b758
 800a040:	0800b75c 	.word	0x0800b75c

0800a044 <__retarget_lock_init_recursive>:
 800a044:	4770      	bx	lr

0800a046 <__retarget_lock_acquire_recursive>:
 800a046:	4770      	bx	lr

0800a048 <__retarget_lock_release_recursive>:
 800a048:	4770      	bx	lr

0800a04a <memcpy>:
 800a04a:	440a      	add	r2, r1
 800a04c:	4291      	cmp	r1, r2
 800a04e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a052:	d100      	bne.n	800a056 <memcpy+0xc>
 800a054:	4770      	bx	lr
 800a056:	b510      	push	{r4, lr}
 800a058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a05c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a060:	4291      	cmp	r1, r2
 800a062:	d1f9      	bne.n	800a058 <memcpy+0xe>
 800a064:	bd10      	pop	{r4, pc}

0800a066 <abort>:
 800a066:	b508      	push	{r3, lr}
 800a068:	2006      	movs	r0, #6
 800a06a:	f000 fd6f 	bl	800ab4c <raise>
 800a06e:	2001      	movs	r0, #1
 800a070:	f7fd fc6a 	bl	8007948 <_exit>

0800a074 <_free_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4605      	mov	r5, r0
 800a078:	2900      	cmp	r1, #0
 800a07a:	d041      	beq.n	800a100 <_free_r+0x8c>
 800a07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a080:	1f0c      	subs	r4, r1, #4
 800a082:	2b00      	cmp	r3, #0
 800a084:	bfb8      	it	lt
 800a086:	18e4      	addlt	r4, r4, r3
 800a088:	f7ff fe6a 	bl	8009d60 <__malloc_lock>
 800a08c:	4a1d      	ldr	r2, [pc, #116]	@ (800a104 <_free_r+0x90>)
 800a08e:	6813      	ldr	r3, [r2, #0]
 800a090:	b933      	cbnz	r3, 800a0a0 <_free_r+0x2c>
 800a092:	6063      	str	r3, [r4, #4]
 800a094:	6014      	str	r4, [r2, #0]
 800a096:	4628      	mov	r0, r5
 800a098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a09c:	f7ff be66 	b.w	8009d6c <__malloc_unlock>
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	d908      	bls.n	800a0b6 <_free_r+0x42>
 800a0a4:	6820      	ldr	r0, [r4, #0]
 800a0a6:	1821      	adds	r1, r4, r0
 800a0a8:	428b      	cmp	r3, r1
 800a0aa:	bf01      	itttt	eq
 800a0ac:	6819      	ldreq	r1, [r3, #0]
 800a0ae:	685b      	ldreq	r3, [r3, #4]
 800a0b0:	1809      	addeq	r1, r1, r0
 800a0b2:	6021      	streq	r1, [r4, #0]
 800a0b4:	e7ed      	b.n	800a092 <_free_r+0x1e>
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	b10b      	cbz	r3, 800a0c0 <_free_r+0x4c>
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	d9fa      	bls.n	800a0b6 <_free_r+0x42>
 800a0c0:	6811      	ldr	r1, [r2, #0]
 800a0c2:	1850      	adds	r0, r2, r1
 800a0c4:	42a0      	cmp	r0, r4
 800a0c6:	d10b      	bne.n	800a0e0 <_free_r+0x6c>
 800a0c8:	6820      	ldr	r0, [r4, #0]
 800a0ca:	4401      	add	r1, r0
 800a0cc:	1850      	adds	r0, r2, r1
 800a0ce:	4283      	cmp	r3, r0
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	d1e0      	bne.n	800a096 <_free_r+0x22>
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	6053      	str	r3, [r2, #4]
 800a0da:	4408      	add	r0, r1
 800a0dc:	6010      	str	r0, [r2, #0]
 800a0de:	e7da      	b.n	800a096 <_free_r+0x22>
 800a0e0:	d902      	bls.n	800a0e8 <_free_r+0x74>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	602b      	str	r3, [r5, #0]
 800a0e6:	e7d6      	b.n	800a096 <_free_r+0x22>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	1821      	adds	r1, r4, r0
 800a0ec:	428b      	cmp	r3, r1
 800a0ee:	bf04      	itt	eq
 800a0f0:	6819      	ldreq	r1, [r3, #0]
 800a0f2:	685b      	ldreq	r3, [r3, #4]
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	bf04      	itt	eq
 800a0f8:	1809      	addeq	r1, r1, r0
 800a0fa:	6021      	streq	r1, [r4, #0]
 800a0fc:	6054      	str	r4, [r2, #4]
 800a0fe:	e7ca      	b.n	800a096 <_free_r+0x22>
 800a100:	bd38      	pop	{r3, r4, r5, pc}
 800a102:	bf00      	nop
 800a104:	20000250 	.word	0x20000250

0800a108 <__sfputc_r>:
 800a108:	6893      	ldr	r3, [r2, #8]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	b410      	push	{r4}
 800a110:	6093      	str	r3, [r2, #8]
 800a112:	da08      	bge.n	800a126 <__sfputc_r+0x1e>
 800a114:	6994      	ldr	r4, [r2, #24]
 800a116:	42a3      	cmp	r3, r4
 800a118:	db01      	blt.n	800a11e <__sfputc_r+0x16>
 800a11a:	290a      	cmp	r1, #10
 800a11c:	d103      	bne.n	800a126 <__sfputc_r+0x1e>
 800a11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a122:	f000 bbb0 	b.w	800a886 <__swbuf_r>
 800a126:	6813      	ldr	r3, [r2, #0]
 800a128:	1c58      	adds	r0, r3, #1
 800a12a:	6010      	str	r0, [r2, #0]
 800a12c:	7019      	strb	r1, [r3, #0]
 800a12e:	4608      	mov	r0, r1
 800a130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <__sfputs_r>:
 800a136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a138:	4606      	mov	r6, r0
 800a13a:	460f      	mov	r7, r1
 800a13c:	4614      	mov	r4, r2
 800a13e:	18d5      	adds	r5, r2, r3
 800a140:	42ac      	cmp	r4, r5
 800a142:	d101      	bne.n	800a148 <__sfputs_r+0x12>
 800a144:	2000      	movs	r0, #0
 800a146:	e007      	b.n	800a158 <__sfputs_r+0x22>
 800a148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14c:	463a      	mov	r2, r7
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff ffda 	bl	800a108 <__sfputc_r>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d1f3      	bne.n	800a140 <__sfputs_r+0xa>
 800a158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a15c <_vfiprintf_r>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	460d      	mov	r5, r1
 800a162:	b09d      	sub	sp, #116	@ 0x74
 800a164:	4614      	mov	r4, r2
 800a166:	4698      	mov	r8, r3
 800a168:	4606      	mov	r6, r0
 800a16a:	b118      	cbz	r0, 800a174 <_vfiprintf_r+0x18>
 800a16c:	6a03      	ldr	r3, [r0, #32]
 800a16e:	b90b      	cbnz	r3, 800a174 <_vfiprintf_r+0x18>
 800a170:	f7ff fe8e 	bl	8009e90 <__sinit>
 800a174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a176:	07d9      	lsls	r1, r3, #31
 800a178:	d405      	bmi.n	800a186 <_vfiprintf_r+0x2a>
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	059a      	lsls	r2, r3, #22
 800a17e:	d402      	bmi.n	800a186 <_vfiprintf_r+0x2a>
 800a180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a182:	f7ff ff60 	bl	800a046 <__retarget_lock_acquire_recursive>
 800a186:	89ab      	ldrh	r3, [r5, #12]
 800a188:	071b      	lsls	r3, r3, #28
 800a18a:	d501      	bpl.n	800a190 <_vfiprintf_r+0x34>
 800a18c:	692b      	ldr	r3, [r5, #16]
 800a18e:	b99b      	cbnz	r3, 800a1b8 <_vfiprintf_r+0x5c>
 800a190:	4629      	mov	r1, r5
 800a192:	4630      	mov	r0, r6
 800a194:	f000 fbb6 	bl	800a904 <__swsetup_r>
 800a198:	b170      	cbz	r0, 800a1b8 <_vfiprintf_r+0x5c>
 800a19a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a19c:	07dc      	lsls	r4, r3, #31
 800a19e:	d504      	bpl.n	800a1aa <_vfiprintf_r+0x4e>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1a4:	b01d      	add	sp, #116	@ 0x74
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	0598      	lsls	r0, r3, #22
 800a1ae:	d4f7      	bmi.n	800a1a0 <_vfiprintf_r+0x44>
 800a1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1b2:	f7ff ff49 	bl	800a048 <__retarget_lock_release_recursive>
 800a1b6:	e7f3      	b.n	800a1a0 <_vfiprintf_r+0x44>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1bc:	2320      	movs	r3, #32
 800a1be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1c6:	2330      	movs	r3, #48	@ 0x30
 800a1c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a378 <_vfiprintf_r+0x21c>
 800a1cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1d0:	f04f 0901 	mov.w	r9, #1
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	469a      	mov	sl, r3
 800a1d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1dc:	b10a      	cbz	r2, 800a1e2 <_vfiprintf_r+0x86>
 800a1de:	2a25      	cmp	r2, #37	@ 0x25
 800a1e0:	d1f9      	bne.n	800a1d6 <_vfiprintf_r+0x7a>
 800a1e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1e6:	d00b      	beq.n	800a200 <_vfiprintf_r+0xa4>
 800a1e8:	465b      	mov	r3, fp
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ffa1 	bl	800a136 <__sfputs_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f000 80a7 	beq.w	800a348 <_vfiprintf_r+0x1ec>
 800a1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1fc:	445a      	add	r2, fp
 800a1fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800a200:	f89a 3000 	ldrb.w	r3, [sl]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 809f 	beq.w	800a348 <_vfiprintf_r+0x1ec>
 800a20a:	2300      	movs	r3, #0
 800a20c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a214:	f10a 0a01 	add.w	sl, sl, #1
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a220:	931a      	str	r3, [sp, #104]	@ 0x68
 800a222:	4654      	mov	r4, sl
 800a224:	2205      	movs	r2, #5
 800a226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a22a:	4853      	ldr	r0, [pc, #332]	@ (800a378 <_vfiprintf_r+0x21c>)
 800a22c:	f7f5 ffe0 	bl	80001f0 <memchr>
 800a230:	9a04      	ldr	r2, [sp, #16]
 800a232:	b9d8      	cbnz	r0, 800a26c <_vfiprintf_r+0x110>
 800a234:	06d1      	lsls	r1, r2, #27
 800a236:	bf44      	itt	mi
 800a238:	2320      	movmi	r3, #32
 800a23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a23e:	0713      	lsls	r3, r2, #28
 800a240:	bf44      	itt	mi
 800a242:	232b      	movmi	r3, #43	@ 0x2b
 800a244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a248:	f89a 3000 	ldrb.w	r3, [sl]
 800a24c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a24e:	d015      	beq.n	800a27c <_vfiprintf_r+0x120>
 800a250:	9a07      	ldr	r2, [sp, #28]
 800a252:	4654      	mov	r4, sl
 800a254:	2000      	movs	r0, #0
 800a256:	f04f 0c0a 	mov.w	ip, #10
 800a25a:	4621      	mov	r1, r4
 800a25c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a260:	3b30      	subs	r3, #48	@ 0x30
 800a262:	2b09      	cmp	r3, #9
 800a264:	d94b      	bls.n	800a2fe <_vfiprintf_r+0x1a2>
 800a266:	b1b0      	cbz	r0, 800a296 <_vfiprintf_r+0x13a>
 800a268:	9207      	str	r2, [sp, #28]
 800a26a:	e014      	b.n	800a296 <_vfiprintf_r+0x13a>
 800a26c:	eba0 0308 	sub.w	r3, r0, r8
 800a270:	fa09 f303 	lsl.w	r3, r9, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	46a2      	mov	sl, r4
 800a27a:	e7d2      	b.n	800a222 <_vfiprintf_r+0xc6>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	1d19      	adds	r1, r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	9103      	str	r1, [sp, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	bfbb      	ittet	lt
 800a288:	425b      	neglt	r3, r3
 800a28a:	f042 0202 	orrlt.w	r2, r2, #2
 800a28e:	9307      	strge	r3, [sp, #28]
 800a290:	9307      	strlt	r3, [sp, #28]
 800a292:	bfb8      	it	lt
 800a294:	9204      	strlt	r2, [sp, #16]
 800a296:	7823      	ldrb	r3, [r4, #0]
 800a298:	2b2e      	cmp	r3, #46	@ 0x2e
 800a29a:	d10a      	bne.n	800a2b2 <_vfiprintf_r+0x156>
 800a29c:	7863      	ldrb	r3, [r4, #1]
 800a29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2a0:	d132      	bne.n	800a308 <_vfiprintf_r+0x1ac>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	1d1a      	adds	r2, r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	9203      	str	r2, [sp, #12]
 800a2aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2ae:	3402      	adds	r4, #2
 800a2b0:	9305      	str	r3, [sp, #20]
 800a2b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a388 <_vfiprintf_r+0x22c>
 800a2b6:	7821      	ldrb	r1, [r4, #0]
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	4650      	mov	r0, sl
 800a2bc:	f7f5 ff98 	bl	80001f0 <memchr>
 800a2c0:	b138      	cbz	r0, 800a2d2 <_vfiprintf_r+0x176>
 800a2c2:	9b04      	ldr	r3, [sp, #16]
 800a2c4:	eba0 000a 	sub.w	r0, r0, sl
 800a2c8:	2240      	movs	r2, #64	@ 0x40
 800a2ca:	4082      	lsls	r2, r0
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	3401      	adds	r4, #1
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d6:	4829      	ldr	r0, [pc, #164]	@ (800a37c <_vfiprintf_r+0x220>)
 800a2d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2dc:	2206      	movs	r2, #6
 800a2de:	f7f5 ff87 	bl	80001f0 <memchr>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d03f      	beq.n	800a366 <_vfiprintf_r+0x20a>
 800a2e6:	4b26      	ldr	r3, [pc, #152]	@ (800a380 <_vfiprintf_r+0x224>)
 800a2e8:	bb1b      	cbnz	r3, 800a332 <_vfiprintf_r+0x1d6>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	3307      	adds	r3, #7
 800a2ee:	f023 0307 	bic.w	r3, r3, #7
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	9303      	str	r3, [sp, #12]
 800a2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f8:	443b      	add	r3, r7
 800a2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2fc:	e76a      	b.n	800a1d4 <_vfiprintf_r+0x78>
 800a2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a302:	460c      	mov	r4, r1
 800a304:	2001      	movs	r0, #1
 800a306:	e7a8      	b.n	800a25a <_vfiprintf_r+0xfe>
 800a308:	2300      	movs	r3, #0
 800a30a:	3401      	adds	r4, #1
 800a30c:	9305      	str	r3, [sp, #20]
 800a30e:	4619      	mov	r1, r3
 800a310:	f04f 0c0a 	mov.w	ip, #10
 800a314:	4620      	mov	r0, r4
 800a316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a31a:	3a30      	subs	r2, #48	@ 0x30
 800a31c:	2a09      	cmp	r2, #9
 800a31e:	d903      	bls.n	800a328 <_vfiprintf_r+0x1cc>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0c6      	beq.n	800a2b2 <_vfiprintf_r+0x156>
 800a324:	9105      	str	r1, [sp, #20]
 800a326:	e7c4      	b.n	800a2b2 <_vfiprintf_r+0x156>
 800a328:	fb0c 2101 	mla	r1, ip, r1, r2
 800a32c:	4604      	mov	r4, r0
 800a32e:	2301      	movs	r3, #1
 800a330:	e7f0      	b.n	800a314 <_vfiprintf_r+0x1b8>
 800a332:	ab03      	add	r3, sp, #12
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	462a      	mov	r2, r5
 800a338:	4b12      	ldr	r3, [pc, #72]	@ (800a384 <_vfiprintf_r+0x228>)
 800a33a:	a904      	add	r1, sp, #16
 800a33c:	4630      	mov	r0, r6
 800a33e:	f3af 8000 	nop.w
 800a342:	4607      	mov	r7, r0
 800a344:	1c78      	adds	r0, r7, #1
 800a346:	d1d6      	bne.n	800a2f6 <_vfiprintf_r+0x19a>
 800a348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a34a:	07d9      	lsls	r1, r3, #31
 800a34c:	d405      	bmi.n	800a35a <_vfiprintf_r+0x1fe>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	059a      	lsls	r2, r3, #22
 800a352:	d402      	bmi.n	800a35a <_vfiprintf_r+0x1fe>
 800a354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a356:	f7ff fe77 	bl	800a048 <__retarget_lock_release_recursive>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	065b      	lsls	r3, r3, #25
 800a35e:	f53f af1f 	bmi.w	800a1a0 <_vfiprintf_r+0x44>
 800a362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a364:	e71e      	b.n	800a1a4 <_vfiprintf_r+0x48>
 800a366:	ab03      	add	r3, sp, #12
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	462a      	mov	r2, r5
 800a36c:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <_vfiprintf_r+0x228>)
 800a36e:	a904      	add	r1, sp, #16
 800a370:	4630      	mov	r0, r6
 800a372:	f000 f879 	bl	800a468 <_printf_i>
 800a376:	e7e4      	b.n	800a342 <_vfiprintf_r+0x1e6>
 800a378:	0800b71c 	.word	0x0800b71c
 800a37c:	0800b726 	.word	0x0800b726
 800a380:	00000000 	.word	0x00000000
 800a384:	0800a137 	.word	0x0800a137
 800a388:	0800b722 	.word	0x0800b722

0800a38c <_printf_common>:
 800a38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a390:	4616      	mov	r6, r2
 800a392:	4698      	mov	r8, r3
 800a394:	688a      	ldr	r2, [r1, #8]
 800a396:	690b      	ldr	r3, [r1, #16]
 800a398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a39c:	4293      	cmp	r3, r2
 800a39e:	bfb8      	it	lt
 800a3a0:	4613      	movlt	r3, r2
 800a3a2:	6033      	str	r3, [r6, #0]
 800a3a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	b10a      	cbz	r2, 800a3b2 <_printf_common+0x26>
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	6033      	str	r3, [r6, #0]
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	0699      	lsls	r1, r3, #26
 800a3b6:	bf42      	ittt	mi
 800a3b8:	6833      	ldrmi	r3, [r6, #0]
 800a3ba:	3302      	addmi	r3, #2
 800a3bc:	6033      	strmi	r3, [r6, #0]
 800a3be:	6825      	ldr	r5, [r4, #0]
 800a3c0:	f015 0506 	ands.w	r5, r5, #6
 800a3c4:	d106      	bne.n	800a3d4 <_printf_common+0x48>
 800a3c6:	f104 0a19 	add.w	sl, r4, #25
 800a3ca:	68e3      	ldr	r3, [r4, #12]
 800a3cc:	6832      	ldr	r2, [r6, #0]
 800a3ce:	1a9b      	subs	r3, r3, r2
 800a3d0:	42ab      	cmp	r3, r5
 800a3d2:	dc26      	bgt.n	800a422 <_printf_common+0x96>
 800a3d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3d8:	6822      	ldr	r2, [r4, #0]
 800a3da:	3b00      	subs	r3, #0
 800a3dc:	bf18      	it	ne
 800a3de:	2301      	movne	r3, #1
 800a3e0:	0692      	lsls	r2, r2, #26
 800a3e2:	d42b      	bmi.n	800a43c <_printf_common+0xb0>
 800a3e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c8      	blx	r9
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d01e      	beq.n	800a430 <_printf_common+0xa4>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	6922      	ldr	r2, [r4, #16]
 800a3f6:	f003 0306 	and.w	r3, r3, #6
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	bf02      	ittt	eq
 800a3fe:	68e5      	ldreq	r5, [r4, #12]
 800a400:	6833      	ldreq	r3, [r6, #0]
 800a402:	1aed      	subeq	r5, r5, r3
 800a404:	68a3      	ldr	r3, [r4, #8]
 800a406:	bf0c      	ite	eq
 800a408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a40c:	2500      	movne	r5, #0
 800a40e:	4293      	cmp	r3, r2
 800a410:	bfc4      	itt	gt
 800a412:	1a9b      	subgt	r3, r3, r2
 800a414:	18ed      	addgt	r5, r5, r3
 800a416:	2600      	movs	r6, #0
 800a418:	341a      	adds	r4, #26
 800a41a:	42b5      	cmp	r5, r6
 800a41c:	d11a      	bne.n	800a454 <_printf_common+0xc8>
 800a41e:	2000      	movs	r0, #0
 800a420:	e008      	b.n	800a434 <_printf_common+0xa8>
 800a422:	2301      	movs	r3, #1
 800a424:	4652      	mov	r2, sl
 800a426:	4641      	mov	r1, r8
 800a428:	4638      	mov	r0, r7
 800a42a:	47c8      	blx	r9
 800a42c:	3001      	adds	r0, #1
 800a42e:	d103      	bne.n	800a438 <_printf_common+0xac>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a438:	3501      	adds	r5, #1
 800a43a:	e7c6      	b.n	800a3ca <_printf_common+0x3e>
 800a43c:	18e1      	adds	r1, r4, r3
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	2030      	movs	r0, #48	@ 0x30
 800a442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a446:	4422      	add	r2, r4
 800a448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a44c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a450:	3302      	adds	r3, #2
 800a452:	e7c7      	b.n	800a3e4 <_printf_common+0x58>
 800a454:	2301      	movs	r3, #1
 800a456:	4622      	mov	r2, r4
 800a458:	4641      	mov	r1, r8
 800a45a:	4638      	mov	r0, r7
 800a45c:	47c8      	blx	r9
 800a45e:	3001      	adds	r0, #1
 800a460:	d0e6      	beq.n	800a430 <_printf_common+0xa4>
 800a462:	3601      	adds	r6, #1
 800a464:	e7d9      	b.n	800a41a <_printf_common+0x8e>
	...

0800a468 <_printf_i>:
 800a468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a46c:	7e0f      	ldrb	r7, [r1, #24]
 800a46e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a470:	2f78      	cmp	r7, #120	@ 0x78
 800a472:	4691      	mov	r9, r2
 800a474:	4680      	mov	r8, r0
 800a476:	460c      	mov	r4, r1
 800a478:	469a      	mov	sl, r3
 800a47a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a47e:	d807      	bhi.n	800a490 <_printf_i+0x28>
 800a480:	2f62      	cmp	r7, #98	@ 0x62
 800a482:	d80a      	bhi.n	800a49a <_printf_i+0x32>
 800a484:	2f00      	cmp	r7, #0
 800a486:	f000 80d2 	beq.w	800a62e <_printf_i+0x1c6>
 800a48a:	2f58      	cmp	r7, #88	@ 0x58
 800a48c:	f000 80b9 	beq.w	800a602 <_printf_i+0x19a>
 800a490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a498:	e03a      	b.n	800a510 <_printf_i+0xa8>
 800a49a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a49e:	2b15      	cmp	r3, #21
 800a4a0:	d8f6      	bhi.n	800a490 <_printf_i+0x28>
 800a4a2:	a101      	add	r1, pc, #4	@ (adr r1, 800a4a8 <_printf_i+0x40>)
 800a4a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4a8:	0800a501 	.word	0x0800a501
 800a4ac:	0800a515 	.word	0x0800a515
 800a4b0:	0800a491 	.word	0x0800a491
 800a4b4:	0800a491 	.word	0x0800a491
 800a4b8:	0800a491 	.word	0x0800a491
 800a4bc:	0800a491 	.word	0x0800a491
 800a4c0:	0800a515 	.word	0x0800a515
 800a4c4:	0800a491 	.word	0x0800a491
 800a4c8:	0800a491 	.word	0x0800a491
 800a4cc:	0800a491 	.word	0x0800a491
 800a4d0:	0800a491 	.word	0x0800a491
 800a4d4:	0800a615 	.word	0x0800a615
 800a4d8:	0800a53f 	.word	0x0800a53f
 800a4dc:	0800a5cf 	.word	0x0800a5cf
 800a4e0:	0800a491 	.word	0x0800a491
 800a4e4:	0800a491 	.word	0x0800a491
 800a4e8:	0800a637 	.word	0x0800a637
 800a4ec:	0800a491 	.word	0x0800a491
 800a4f0:	0800a53f 	.word	0x0800a53f
 800a4f4:	0800a491 	.word	0x0800a491
 800a4f8:	0800a491 	.word	0x0800a491
 800a4fc:	0800a5d7 	.word	0x0800a5d7
 800a500:	6833      	ldr	r3, [r6, #0]
 800a502:	1d1a      	adds	r2, r3, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6032      	str	r2, [r6, #0]
 800a508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a50c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a510:	2301      	movs	r3, #1
 800a512:	e09d      	b.n	800a650 <_printf_i+0x1e8>
 800a514:	6833      	ldr	r3, [r6, #0]
 800a516:	6820      	ldr	r0, [r4, #0]
 800a518:	1d19      	adds	r1, r3, #4
 800a51a:	6031      	str	r1, [r6, #0]
 800a51c:	0606      	lsls	r6, r0, #24
 800a51e:	d501      	bpl.n	800a524 <_printf_i+0xbc>
 800a520:	681d      	ldr	r5, [r3, #0]
 800a522:	e003      	b.n	800a52c <_printf_i+0xc4>
 800a524:	0645      	lsls	r5, r0, #25
 800a526:	d5fb      	bpl.n	800a520 <_printf_i+0xb8>
 800a528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	da03      	bge.n	800a538 <_printf_i+0xd0>
 800a530:	232d      	movs	r3, #45	@ 0x2d
 800a532:	426d      	negs	r5, r5
 800a534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a538:	4859      	ldr	r0, [pc, #356]	@ (800a6a0 <_printf_i+0x238>)
 800a53a:	230a      	movs	r3, #10
 800a53c:	e011      	b.n	800a562 <_printf_i+0xfa>
 800a53e:	6821      	ldr	r1, [r4, #0]
 800a540:	6833      	ldr	r3, [r6, #0]
 800a542:	0608      	lsls	r0, r1, #24
 800a544:	f853 5b04 	ldr.w	r5, [r3], #4
 800a548:	d402      	bmi.n	800a550 <_printf_i+0xe8>
 800a54a:	0649      	lsls	r1, r1, #25
 800a54c:	bf48      	it	mi
 800a54e:	b2ad      	uxthmi	r5, r5
 800a550:	2f6f      	cmp	r7, #111	@ 0x6f
 800a552:	4853      	ldr	r0, [pc, #332]	@ (800a6a0 <_printf_i+0x238>)
 800a554:	6033      	str	r3, [r6, #0]
 800a556:	bf14      	ite	ne
 800a558:	230a      	movne	r3, #10
 800a55a:	2308      	moveq	r3, #8
 800a55c:	2100      	movs	r1, #0
 800a55e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a562:	6866      	ldr	r6, [r4, #4]
 800a564:	60a6      	str	r6, [r4, #8]
 800a566:	2e00      	cmp	r6, #0
 800a568:	bfa2      	ittt	ge
 800a56a:	6821      	ldrge	r1, [r4, #0]
 800a56c:	f021 0104 	bicge.w	r1, r1, #4
 800a570:	6021      	strge	r1, [r4, #0]
 800a572:	b90d      	cbnz	r5, 800a578 <_printf_i+0x110>
 800a574:	2e00      	cmp	r6, #0
 800a576:	d04b      	beq.n	800a610 <_printf_i+0x1a8>
 800a578:	4616      	mov	r6, r2
 800a57a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a57e:	fb03 5711 	mls	r7, r3, r1, r5
 800a582:	5dc7      	ldrb	r7, [r0, r7]
 800a584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a588:	462f      	mov	r7, r5
 800a58a:	42bb      	cmp	r3, r7
 800a58c:	460d      	mov	r5, r1
 800a58e:	d9f4      	bls.n	800a57a <_printf_i+0x112>
 800a590:	2b08      	cmp	r3, #8
 800a592:	d10b      	bne.n	800a5ac <_printf_i+0x144>
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	07df      	lsls	r7, r3, #31
 800a598:	d508      	bpl.n	800a5ac <_printf_i+0x144>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	6861      	ldr	r1, [r4, #4]
 800a59e:	4299      	cmp	r1, r3
 800a5a0:	bfde      	ittt	le
 800a5a2:	2330      	movle	r3, #48	@ 0x30
 800a5a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a5ac:	1b92      	subs	r2, r2, r6
 800a5ae:	6122      	str	r2, [r4, #16]
 800a5b0:	f8cd a000 	str.w	sl, [sp]
 800a5b4:	464b      	mov	r3, r9
 800a5b6:	aa03      	add	r2, sp, #12
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	f7ff fee6 	bl	800a38c <_printf_common>
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d14a      	bne.n	800a65a <_printf_i+0x1f2>
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5c8:	b004      	add	sp, #16
 800a5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	f043 0320 	orr.w	r3, r3, #32
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	4833      	ldr	r0, [pc, #204]	@ (800a6a4 <_printf_i+0x23c>)
 800a5d8:	2778      	movs	r7, #120	@ 0x78
 800a5da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	6831      	ldr	r1, [r6, #0]
 800a5e2:	061f      	lsls	r7, r3, #24
 800a5e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5e8:	d402      	bmi.n	800a5f0 <_printf_i+0x188>
 800a5ea:	065f      	lsls	r7, r3, #25
 800a5ec:	bf48      	it	mi
 800a5ee:	b2ad      	uxthmi	r5, r5
 800a5f0:	6031      	str	r1, [r6, #0]
 800a5f2:	07d9      	lsls	r1, r3, #31
 800a5f4:	bf44      	itt	mi
 800a5f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5fa:	6023      	strmi	r3, [r4, #0]
 800a5fc:	b11d      	cbz	r5, 800a606 <_printf_i+0x19e>
 800a5fe:	2310      	movs	r3, #16
 800a600:	e7ac      	b.n	800a55c <_printf_i+0xf4>
 800a602:	4827      	ldr	r0, [pc, #156]	@ (800a6a0 <_printf_i+0x238>)
 800a604:	e7e9      	b.n	800a5da <_printf_i+0x172>
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	f023 0320 	bic.w	r3, r3, #32
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	e7f6      	b.n	800a5fe <_printf_i+0x196>
 800a610:	4616      	mov	r6, r2
 800a612:	e7bd      	b.n	800a590 <_printf_i+0x128>
 800a614:	6833      	ldr	r3, [r6, #0]
 800a616:	6825      	ldr	r5, [r4, #0]
 800a618:	6961      	ldr	r1, [r4, #20]
 800a61a:	1d18      	adds	r0, r3, #4
 800a61c:	6030      	str	r0, [r6, #0]
 800a61e:	062e      	lsls	r6, r5, #24
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	d501      	bpl.n	800a628 <_printf_i+0x1c0>
 800a624:	6019      	str	r1, [r3, #0]
 800a626:	e002      	b.n	800a62e <_printf_i+0x1c6>
 800a628:	0668      	lsls	r0, r5, #25
 800a62a:	d5fb      	bpl.n	800a624 <_printf_i+0x1bc>
 800a62c:	8019      	strh	r1, [r3, #0]
 800a62e:	2300      	movs	r3, #0
 800a630:	6123      	str	r3, [r4, #16]
 800a632:	4616      	mov	r6, r2
 800a634:	e7bc      	b.n	800a5b0 <_printf_i+0x148>
 800a636:	6833      	ldr	r3, [r6, #0]
 800a638:	1d1a      	adds	r2, r3, #4
 800a63a:	6032      	str	r2, [r6, #0]
 800a63c:	681e      	ldr	r6, [r3, #0]
 800a63e:	6862      	ldr	r2, [r4, #4]
 800a640:	2100      	movs	r1, #0
 800a642:	4630      	mov	r0, r6
 800a644:	f7f5 fdd4 	bl	80001f0 <memchr>
 800a648:	b108      	cbz	r0, 800a64e <_printf_i+0x1e6>
 800a64a:	1b80      	subs	r0, r0, r6
 800a64c:	6060      	str	r0, [r4, #4]
 800a64e:	6863      	ldr	r3, [r4, #4]
 800a650:	6123      	str	r3, [r4, #16]
 800a652:	2300      	movs	r3, #0
 800a654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a658:	e7aa      	b.n	800a5b0 <_printf_i+0x148>
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	4632      	mov	r2, r6
 800a65e:	4649      	mov	r1, r9
 800a660:	4640      	mov	r0, r8
 800a662:	47d0      	blx	sl
 800a664:	3001      	adds	r0, #1
 800a666:	d0ad      	beq.n	800a5c4 <_printf_i+0x15c>
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	079b      	lsls	r3, r3, #30
 800a66c:	d413      	bmi.n	800a696 <_printf_i+0x22e>
 800a66e:	68e0      	ldr	r0, [r4, #12]
 800a670:	9b03      	ldr	r3, [sp, #12]
 800a672:	4298      	cmp	r0, r3
 800a674:	bfb8      	it	lt
 800a676:	4618      	movlt	r0, r3
 800a678:	e7a6      	b.n	800a5c8 <_printf_i+0x160>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4632      	mov	r2, r6
 800a67e:	4649      	mov	r1, r9
 800a680:	4640      	mov	r0, r8
 800a682:	47d0      	blx	sl
 800a684:	3001      	adds	r0, #1
 800a686:	d09d      	beq.n	800a5c4 <_printf_i+0x15c>
 800a688:	3501      	adds	r5, #1
 800a68a:	68e3      	ldr	r3, [r4, #12]
 800a68c:	9903      	ldr	r1, [sp, #12]
 800a68e:	1a5b      	subs	r3, r3, r1
 800a690:	42ab      	cmp	r3, r5
 800a692:	dcf2      	bgt.n	800a67a <_printf_i+0x212>
 800a694:	e7eb      	b.n	800a66e <_printf_i+0x206>
 800a696:	2500      	movs	r5, #0
 800a698:	f104 0619 	add.w	r6, r4, #25
 800a69c:	e7f5      	b.n	800a68a <_printf_i+0x222>
 800a69e:	bf00      	nop
 800a6a0:	0800b72d 	.word	0x0800b72d
 800a6a4:	0800b73e 	.word	0x0800b73e

0800a6a8 <__sflush_r>:
 800a6a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b0:	0716      	lsls	r6, r2, #28
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	d454      	bmi.n	800a762 <__sflush_r+0xba>
 800a6b8:	684b      	ldr	r3, [r1, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dc02      	bgt.n	800a6c4 <__sflush_r+0x1c>
 800a6be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dd48      	ble.n	800a756 <__sflush_r+0xae>
 800a6c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	d045      	beq.n	800a756 <__sflush_r+0xae>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6d0:	682f      	ldr	r7, [r5, #0]
 800a6d2:	6a21      	ldr	r1, [r4, #32]
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	d030      	beq.n	800a73a <__sflush_r+0x92>
 800a6d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	0759      	lsls	r1, r3, #29
 800a6de:	d505      	bpl.n	800a6ec <__sflush_r+0x44>
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	1ad2      	subs	r2, r2, r3
 800a6e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6e6:	b10b      	cbz	r3, 800a6ec <__sflush_r+0x44>
 800a6e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6ea:	1ad2      	subs	r2, r2, r3
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6f0:	6a21      	ldr	r1, [r4, #32]
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b0      	blx	r6
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	d106      	bne.n	800a70a <__sflush_r+0x62>
 800a6fc:	6829      	ldr	r1, [r5, #0]
 800a6fe:	291d      	cmp	r1, #29
 800a700:	d82b      	bhi.n	800a75a <__sflush_r+0xb2>
 800a702:	4a2a      	ldr	r2, [pc, #168]	@ (800a7ac <__sflush_r+0x104>)
 800a704:	410a      	asrs	r2, r1
 800a706:	07d6      	lsls	r6, r2, #31
 800a708:	d427      	bmi.n	800a75a <__sflush_r+0xb2>
 800a70a:	2200      	movs	r2, #0
 800a70c:	6062      	str	r2, [r4, #4]
 800a70e:	04d9      	lsls	r1, r3, #19
 800a710:	6922      	ldr	r2, [r4, #16]
 800a712:	6022      	str	r2, [r4, #0]
 800a714:	d504      	bpl.n	800a720 <__sflush_r+0x78>
 800a716:	1c42      	adds	r2, r0, #1
 800a718:	d101      	bne.n	800a71e <__sflush_r+0x76>
 800a71a:	682b      	ldr	r3, [r5, #0]
 800a71c:	b903      	cbnz	r3, 800a720 <__sflush_r+0x78>
 800a71e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a722:	602f      	str	r7, [r5, #0]
 800a724:	b1b9      	cbz	r1, 800a756 <__sflush_r+0xae>
 800a726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a72a:	4299      	cmp	r1, r3
 800a72c:	d002      	beq.n	800a734 <__sflush_r+0x8c>
 800a72e:	4628      	mov	r0, r5
 800a730:	f7ff fca0 	bl	800a074 <_free_r>
 800a734:	2300      	movs	r3, #0
 800a736:	6363      	str	r3, [r4, #52]	@ 0x34
 800a738:	e00d      	b.n	800a756 <__sflush_r+0xae>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4628      	mov	r0, r5
 800a73e:	47b0      	blx	r6
 800a740:	4602      	mov	r2, r0
 800a742:	1c50      	adds	r0, r2, #1
 800a744:	d1c9      	bne.n	800a6da <__sflush_r+0x32>
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0c6      	beq.n	800a6da <__sflush_r+0x32>
 800a74c:	2b1d      	cmp	r3, #29
 800a74e:	d001      	beq.n	800a754 <__sflush_r+0xac>
 800a750:	2b16      	cmp	r3, #22
 800a752:	d11e      	bne.n	800a792 <__sflush_r+0xea>
 800a754:	602f      	str	r7, [r5, #0]
 800a756:	2000      	movs	r0, #0
 800a758:	e022      	b.n	800a7a0 <__sflush_r+0xf8>
 800a75a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a75e:	b21b      	sxth	r3, r3
 800a760:	e01b      	b.n	800a79a <__sflush_r+0xf2>
 800a762:	690f      	ldr	r7, [r1, #16]
 800a764:	2f00      	cmp	r7, #0
 800a766:	d0f6      	beq.n	800a756 <__sflush_r+0xae>
 800a768:	0793      	lsls	r3, r2, #30
 800a76a:	680e      	ldr	r6, [r1, #0]
 800a76c:	bf08      	it	eq
 800a76e:	694b      	ldreq	r3, [r1, #20]
 800a770:	600f      	str	r7, [r1, #0]
 800a772:	bf18      	it	ne
 800a774:	2300      	movne	r3, #0
 800a776:	eba6 0807 	sub.w	r8, r6, r7
 800a77a:	608b      	str	r3, [r1, #8]
 800a77c:	f1b8 0f00 	cmp.w	r8, #0
 800a780:	dde9      	ble.n	800a756 <__sflush_r+0xae>
 800a782:	6a21      	ldr	r1, [r4, #32]
 800a784:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a786:	4643      	mov	r3, r8
 800a788:	463a      	mov	r2, r7
 800a78a:	4628      	mov	r0, r5
 800a78c:	47b0      	blx	r6
 800a78e:	2800      	cmp	r0, #0
 800a790:	dc08      	bgt.n	800a7a4 <__sflush_r+0xfc>
 800a792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a4:	4407      	add	r7, r0
 800a7a6:	eba8 0800 	sub.w	r8, r8, r0
 800a7aa:	e7e7      	b.n	800a77c <__sflush_r+0xd4>
 800a7ac:	dfbffffe 	.word	0xdfbffffe

0800a7b0 <_fflush_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	690b      	ldr	r3, [r1, #16]
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	b913      	cbnz	r3, 800a7c0 <_fflush_r+0x10>
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	4628      	mov	r0, r5
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	b118      	cbz	r0, 800a7ca <_fflush_r+0x1a>
 800a7c2:	6a03      	ldr	r3, [r0, #32]
 800a7c4:	b90b      	cbnz	r3, 800a7ca <_fflush_r+0x1a>
 800a7c6:	f7ff fb63 	bl	8009e90 <__sinit>
 800a7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f3      	beq.n	800a7ba <_fflush_r+0xa>
 800a7d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7d4:	07d0      	lsls	r0, r2, #31
 800a7d6:	d404      	bmi.n	800a7e2 <_fflush_r+0x32>
 800a7d8:	0599      	lsls	r1, r3, #22
 800a7da:	d402      	bmi.n	800a7e2 <_fflush_r+0x32>
 800a7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7de:	f7ff fc32 	bl	800a046 <__retarget_lock_acquire_recursive>
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	f7ff ff5f 	bl	800a6a8 <__sflush_r>
 800a7ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7ec:	07da      	lsls	r2, r3, #31
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	d4e4      	bmi.n	800a7bc <_fflush_r+0xc>
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	059b      	lsls	r3, r3, #22
 800a7f6:	d4e1      	bmi.n	800a7bc <_fflush_r+0xc>
 800a7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7fa:	f7ff fc25 	bl	800a048 <__retarget_lock_release_recursive>
 800a7fe:	e7dd      	b.n	800a7bc <_fflush_r+0xc>

0800a800 <__sread>:
 800a800:	b510      	push	{r4, lr}
 800a802:	460c      	mov	r4, r1
 800a804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a808:	f000 f9a8 	bl	800ab5c <_read_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	bfab      	itete	ge
 800a810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a812:	89a3      	ldrhlt	r3, [r4, #12]
 800a814:	181b      	addge	r3, r3, r0
 800a816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a81a:	bfac      	ite	ge
 800a81c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a81e:	81a3      	strhlt	r3, [r4, #12]
 800a820:	bd10      	pop	{r4, pc}

0800a822 <__swrite>:
 800a822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a826:	461f      	mov	r7, r3
 800a828:	898b      	ldrh	r3, [r1, #12]
 800a82a:	05db      	lsls	r3, r3, #23
 800a82c:	4605      	mov	r5, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	4616      	mov	r6, r2
 800a832:	d505      	bpl.n	800a840 <__swrite+0x1e>
 800a834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a838:	2302      	movs	r3, #2
 800a83a:	2200      	movs	r2, #0
 800a83c:	f000 f94c 	bl	800aad8 <_lseek_r>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	4632      	mov	r2, r6
 800a84e:	463b      	mov	r3, r7
 800a850:	4628      	mov	r0, r5
 800a852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a856:	f000 b9a7 	b.w	800aba8 <_write_r>

0800a85a <__sseek>:
 800a85a:	b510      	push	{r4, lr}
 800a85c:	460c      	mov	r4, r1
 800a85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a862:	f000 f939 	bl	800aad8 <_lseek_r>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	bf15      	itete	ne
 800a86c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a86e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a876:	81a3      	strheq	r3, [r4, #12]
 800a878:	bf18      	it	ne
 800a87a:	81a3      	strhne	r3, [r4, #12]
 800a87c:	bd10      	pop	{r4, pc}

0800a87e <__sclose>:
 800a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a882:	f000 b8f7 	b.w	800aa74 <_close_r>

0800a886 <__swbuf_r>:
 800a886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a888:	460e      	mov	r6, r1
 800a88a:	4614      	mov	r4, r2
 800a88c:	4605      	mov	r5, r0
 800a88e:	b118      	cbz	r0, 800a898 <__swbuf_r+0x12>
 800a890:	6a03      	ldr	r3, [r0, #32]
 800a892:	b90b      	cbnz	r3, 800a898 <__swbuf_r+0x12>
 800a894:	f7ff fafc 	bl	8009e90 <__sinit>
 800a898:	69a3      	ldr	r3, [r4, #24]
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	071a      	lsls	r2, r3, #28
 800a8a0:	d501      	bpl.n	800a8a6 <__swbuf_r+0x20>
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	b943      	cbnz	r3, 800a8b8 <__swbuf_r+0x32>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f000 f82b 	bl	800a904 <__swsetup_r>
 800a8ae:	b118      	cbz	r0, 800a8b8 <__swbuf_r+0x32>
 800a8b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	6922      	ldr	r2, [r4, #16]
 800a8bc:	1a98      	subs	r0, r3, r2
 800a8be:	6963      	ldr	r3, [r4, #20]
 800a8c0:	b2f6      	uxtb	r6, r6
 800a8c2:	4283      	cmp	r3, r0
 800a8c4:	4637      	mov	r7, r6
 800a8c6:	dc05      	bgt.n	800a8d4 <__swbuf_r+0x4e>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f7ff ff70 	bl	800a7b0 <_fflush_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1ed      	bne.n	800a8b0 <__swbuf_r+0x2a>
 800a8d4:	68a3      	ldr	r3, [r4, #8]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	60a3      	str	r3, [r4, #8]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	6022      	str	r2, [r4, #0]
 800a8e0:	701e      	strb	r6, [r3, #0]
 800a8e2:	6962      	ldr	r2, [r4, #20]
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d004      	beq.n	800a8f4 <__swbuf_r+0x6e>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	07db      	lsls	r3, r3, #31
 800a8ee:	d5e1      	bpl.n	800a8b4 <__swbuf_r+0x2e>
 800a8f0:	2e0a      	cmp	r6, #10
 800a8f2:	d1df      	bne.n	800a8b4 <__swbuf_r+0x2e>
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f7ff ff5a 	bl	800a7b0 <_fflush_r>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d0d9      	beq.n	800a8b4 <__swbuf_r+0x2e>
 800a900:	e7d6      	b.n	800a8b0 <__swbuf_r+0x2a>
	...

0800a904 <__swsetup_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4b29      	ldr	r3, [pc, #164]	@ (800a9ac <__swsetup_r+0xa8>)
 800a908:	4605      	mov	r5, r0
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	460c      	mov	r4, r1
 800a90e:	b118      	cbz	r0, 800a918 <__swsetup_r+0x14>
 800a910:	6a03      	ldr	r3, [r0, #32]
 800a912:	b90b      	cbnz	r3, 800a918 <__swsetup_r+0x14>
 800a914:	f7ff fabc 	bl	8009e90 <__sinit>
 800a918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a91c:	0719      	lsls	r1, r3, #28
 800a91e:	d422      	bmi.n	800a966 <__swsetup_r+0x62>
 800a920:	06da      	lsls	r2, r3, #27
 800a922:	d407      	bmi.n	800a934 <__swsetup_r+0x30>
 800a924:	2209      	movs	r2, #9
 800a926:	602a      	str	r2, [r5, #0]
 800a928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a932:	e033      	b.n	800a99c <__swsetup_r+0x98>
 800a934:	0758      	lsls	r0, r3, #29
 800a936:	d512      	bpl.n	800a95e <__swsetup_r+0x5a>
 800a938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a93a:	b141      	cbz	r1, 800a94e <__swsetup_r+0x4a>
 800a93c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a940:	4299      	cmp	r1, r3
 800a942:	d002      	beq.n	800a94a <__swsetup_r+0x46>
 800a944:	4628      	mov	r0, r5
 800a946:	f7ff fb95 	bl	800a074 <_free_r>
 800a94a:	2300      	movs	r3, #0
 800a94c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	2300      	movs	r3, #0
 800a958:	6063      	str	r3, [r4, #4]
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f043 0308 	orr.w	r3, r3, #8
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	b94b      	cbnz	r3, 800a97e <__swsetup_r+0x7a>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a974:	d003      	beq.n	800a97e <__swsetup_r+0x7a>
 800a976:	4621      	mov	r1, r4
 800a978:	4628      	mov	r0, r5
 800a97a:	f000 f83f 	bl	800a9fc <__smakebuf_r>
 800a97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a982:	f013 0201 	ands.w	r2, r3, #1
 800a986:	d00a      	beq.n	800a99e <__swsetup_r+0x9a>
 800a988:	2200      	movs	r2, #0
 800a98a:	60a2      	str	r2, [r4, #8]
 800a98c:	6962      	ldr	r2, [r4, #20]
 800a98e:	4252      	negs	r2, r2
 800a990:	61a2      	str	r2, [r4, #24]
 800a992:	6922      	ldr	r2, [r4, #16]
 800a994:	b942      	cbnz	r2, 800a9a8 <__swsetup_r+0xa4>
 800a996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a99a:	d1c5      	bne.n	800a928 <__swsetup_r+0x24>
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
 800a99e:	0799      	lsls	r1, r3, #30
 800a9a0:	bf58      	it	pl
 800a9a2:	6962      	ldrpl	r2, [r4, #20]
 800a9a4:	60a2      	str	r2, [r4, #8]
 800a9a6:	e7f4      	b.n	800a992 <__swsetup_r+0x8e>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e7f7      	b.n	800a99c <__swsetup_r+0x98>
 800a9ac:	20000018 	.word	0x20000018

0800a9b0 <__swhatbuf_r>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	b096      	sub	sp, #88	@ 0x58
 800a9bc:	4615      	mov	r5, r2
 800a9be:	461e      	mov	r6, r3
 800a9c0:	da0d      	bge.n	800a9de <__swhatbuf_r+0x2e>
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9c8:	f04f 0100 	mov.w	r1, #0
 800a9cc:	bf14      	ite	ne
 800a9ce:	2340      	movne	r3, #64	@ 0x40
 800a9d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	6031      	str	r1, [r6, #0]
 800a9d8:	602b      	str	r3, [r5, #0]
 800a9da:	b016      	add	sp, #88	@ 0x58
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
 800a9de:	466a      	mov	r2, sp
 800a9e0:	f000 f858 	bl	800aa94 <_fstat_r>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	dbec      	blt.n	800a9c2 <__swhatbuf_r+0x12>
 800a9e8:	9901      	ldr	r1, [sp, #4]
 800a9ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9f2:	4259      	negs	r1, r3
 800a9f4:	4159      	adcs	r1, r3
 800a9f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9fa:	e7eb      	b.n	800a9d4 <__swhatbuf_r+0x24>

0800a9fc <__smakebuf_r>:
 800a9fc:	898b      	ldrh	r3, [r1, #12]
 800a9fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa00:	079d      	lsls	r5, r3, #30
 800aa02:	4606      	mov	r6, r0
 800aa04:	460c      	mov	r4, r1
 800aa06:	d507      	bpl.n	800aa18 <__smakebuf_r+0x1c>
 800aa08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	6123      	str	r3, [r4, #16]
 800aa10:	2301      	movs	r3, #1
 800aa12:	6163      	str	r3, [r4, #20]
 800aa14:	b003      	add	sp, #12
 800aa16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa18:	ab01      	add	r3, sp, #4
 800aa1a:	466a      	mov	r2, sp
 800aa1c:	f7ff ffc8 	bl	800a9b0 <__swhatbuf_r>
 800aa20:	9f00      	ldr	r7, [sp, #0]
 800aa22:	4605      	mov	r5, r0
 800aa24:	4639      	mov	r1, r7
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff f91a 	bl	8009c60 <_malloc_r>
 800aa2c:	b948      	cbnz	r0, 800aa42 <__smakebuf_r+0x46>
 800aa2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa32:	059a      	lsls	r2, r3, #22
 800aa34:	d4ee      	bmi.n	800aa14 <__smakebuf_r+0x18>
 800aa36:	f023 0303 	bic.w	r3, r3, #3
 800aa3a:	f043 0302 	orr.w	r3, r3, #2
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	e7e2      	b.n	800aa08 <__smakebuf_r+0xc>
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	6020      	str	r0, [r4, #0]
 800aa46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	9b01      	ldr	r3, [sp, #4]
 800aa4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa52:	b15b      	cbz	r3, 800aa6c <__smakebuf_r+0x70>
 800aa54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f000 f82d 	bl	800aab8 <_isatty_r>
 800aa5e:	b128      	cbz	r0, 800aa6c <__smakebuf_r+0x70>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	f043 0301 	orr.w	r3, r3, #1
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	431d      	orrs	r5, r3
 800aa70:	81a5      	strh	r5, [r4, #12]
 800aa72:	e7cf      	b.n	800aa14 <__smakebuf_r+0x18>

0800aa74 <_close_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4d06      	ldr	r5, [pc, #24]	@ (800aa90 <_close_r+0x1c>)
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	f7fc ffa6 	bl	80079d0 <_close>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_close_r+0x1a>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_close_r+0x1a>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000394 	.word	0x20000394

0800aa94 <_fstat_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	@ (800aab4 <_fstat_r+0x20>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	f7fc ffa1 	bl	80079e8 <_fstat>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	d102      	bne.n	800aab0 <_fstat_r+0x1c>
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	b103      	cbz	r3, 800aab0 <_fstat_r+0x1c>
 800aaae:	6023      	str	r3, [r4, #0]
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
 800aab2:	bf00      	nop
 800aab4:	20000394 	.word	0x20000394

0800aab8 <_isatty_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d06      	ldr	r5, [pc, #24]	@ (800aad4 <_isatty_r+0x1c>)
 800aabc:	2300      	movs	r3, #0
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	f7fc ffa0 	bl	8007a08 <_isatty>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_isatty_r+0x1a>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_isatty_r+0x1a>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	20000394 	.word	0x20000394

0800aad8 <_lseek_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4d07      	ldr	r5, [pc, #28]	@ (800aaf8 <_lseek_r+0x20>)
 800aadc:	4604      	mov	r4, r0
 800aade:	4608      	mov	r0, r1
 800aae0:	4611      	mov	r1, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	602a      	str	r2, [r5, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	f7fc ff99 	bl	8007a1e <_lseek>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_lseek_r+0x1e>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_lseek_r+0x1e>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	20000394 	.word	0x20000394

0800aafc <_raise_r>:
 800aafc:	291f      	cmp	r1, #31
 800aafe:	b538      	push	{r3, r4, r5, lr}
 800ab00:	4605      	mov	r5, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	d904      	bls.n	800ab10 <_raise_r+0x14>
 800ab06:	2316      	movs	r3, #22
 800ab08:	6003      	str	r3, [r0, #0]
 800ab0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab12:	b112      	cbz	r2, 800ab1a <_raise_r+0x1e>
 800ab14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab18:	b94b      	cbnz	r3, 800ab2e <_raise_r+0x32>
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 f842 	bl	800aba4 <_getpid_r>
 800ab20:	4622      	mov	r2, r4
 800ab22:	4601      	mov	r1, r0
 800ab24:	4628      	mov	r0, r5
 800ab26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab2a:	f000 b829 	b.w	800ab80 <_kill_r>
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d00a      	beq.n	800ab48 <_raise_r+0x4c>
 800ab32:	1c59      	adds	r1, r3, #1
 800ab34:	d103      	bne.n	800ab3e <_raise_r+0x42>
 800ab36:	2316      	movs	r3, #22
 800ab38:	6003      	str	r3, [r0, #0]
 800ab3a:	2001      	movs	r0, #1
 800ab3c:	e7e7      	b.n	800ab0e <_raise_r+0x12>
 800ab3e:	2100      	movs	r1, #0
 800ab40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab44:	4620      	mov	r0, r4
 800ab46:	4798      	blx	r3
 800ab48:	2000      	movs	r0, #0
 800ab4a:	e7e0      	b.n	800ab0e <_raise_r+0x12>

0800ab4c <raise>:
 800ab4c:	4b02      	ldr	r3, [pc, #8]	@ (800ab58 <raise+0xc>)
 800ab4e:	4601      	mov	r1, r0
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	f7ff bfd3 	b.w	800aafc <_raise_r>
 800ab56:	bf00      	nop
 800ab58:	20000018 	.word	0x20000018

0800ab5c <_read_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d07      	ldr	r5, [pc, #28]	@ (800ab7c <_read_r+0x20>)
 800ab60:	4604      	mov	r4, r0
 800ab62:	4608      	mov	r0, r1
 800ab64:	4611      	mov	r1, r2
 800ab66:	2200      	movs	r2, #0
 800ab68:	602a      	str	r2, [r5, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	f7fc fef7 	bl	800795e <_read>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_read_r+0x1e>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_read_r+0x1e>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	20000394 	.word	0x20000394

0800ab80 <_kill_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d07      	ldr	r5, [pc, #28]	@ (800aba0 <_kill_r+0x20>)
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	f7fc fecb 	bl	8007928 <_kill>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d102      	bne.n	800ab9c <_kill_r+0x1c>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	b103      	cbz	r3, 800ab9c <_kill_r+0x1c>
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000394 	.word	0x20000394

0800aba4 <_getpid_r>:
 800aba4:	f7fc beb8 	b.w	8007918 <_getpid>

0800aba8 <_write_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d07      	ldr	r5, [pc, #28]	@ (800abc8 <_write_r+0x20>)
 800abac:	4604      	mov	r4, r0
 800abae:	4608      	mov	r0, r1
 800abb0:	4611      	mov	r1, r2
 800abb2:	2200      	movs	r2, #0
 800abb4:	602a      	str	r2, [r5, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	f7fc feee 	bl	8007998 <_write>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_write_r+0x1e>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_write_r+0x1e>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20000394 	.word	0x20000394

0800abcc <_init>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr

0800abd8 <_fini>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	bf00      	nop
 800abdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abde:	bc08      	pop	{r3}
 800abe0:	469e      	mov	lr, r3
 800abe2:	4770      	bx	lr
