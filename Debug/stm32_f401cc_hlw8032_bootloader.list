
stm32_f401cc_hlw8032_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa14  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  0800abb4  0800abb4  0000bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b720  0800b720  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800b720  0800b720  0000c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b728  0800b728  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b728  0800b728  0000c728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b72c  0800b72c  0000c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b730  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  0800b798  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800b798  0000d398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df27  00000000  00000000  0000d0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235a  00000000  00000000  0001b002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  0001d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8d  00000000  00000000  0001e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001750c  00000000  00000000  0001ee75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8e7  00000000  00000000  00036381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008958a  00000000  00000000  00045c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046b0  00000000  00000000  000cf1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000d38a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab9c 	.word	0x0800ab9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800ab9c 	.word	0x0800ab9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f81a 	bl	80002e8 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__popcountsi2>:
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002ce:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002d2:	4418      	add	r0, r3
 80002d4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002d8:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002dc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002e0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002e4:	0e00      	lsrs	r0, r0, #24
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d003      	beq.n	80005d4 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 80005cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	e002      	b.n	80005da <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005d6:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <SPI_flash_reg_cb+0x54>)
 80005d8:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 80005e0:	4a09      	ldr	r2, [pc, #36]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	6113      	str	r3, [r2, #16]
 80005e6:	e002      	b.n	80005ee <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005ea:	4a08      	ldr	r2, [pc, #32]	@ (800060c <SPI_flash_reg_cb+0x54>)
 80005ec:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 80005ee:	4a06      	ldr	r2, [pc, #24]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <SPI_flash_reg_cb+0x50>)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	6093      	str	r3, [r2, #8]

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084
 800060c:	080005a9 	.word	0x080005a9

08000610 <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8000614:	f000 f89c 	bl	8000750 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8000618:	2066      	movs	r0, #102	@ 0x66
 800061a:	f000 fa1f 	bl	8000a5c <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 800061e:	2099      	movs	r0, #153	@ 0x99
 8000620:	f000 fa1c 	bl	8000a5c <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8000624:	f000 f89e 	bl	8000764 <sFLASH_CS_HIGH>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 8000634:	f7ff ffec 	bl	8000610 <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 8000638:	f000 f9d2 	bl	80009e0 <sFLASH_ReadID>
 800063c:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	4a3e      	ldr	r2, [pc, #248]	@ (800073c <sFLASH_GetInfo+0x110>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d03f      	beq.n	80006c6 <sFLASH_GetInfo+0x9a>
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4a3c      	ldr	r2, [pc, #240]	@ (800073c <sFLASH_GetInfo+0x110>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d867      	bhi.n	800071e <sFLASH_GetInfo+0xf2>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4a3b      	ldr	r2, [pc, #236]	@ (8000740 <sFLASH_GetInfo+0x114>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d021      	beq.n	800069a <sFLASH_GetInfo+0x6e>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4a39      	ldr	r2, [pc, #228]	@ (8000740 <sFLASH_GetInfo+0x114>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d85f      	bhi.n	800071e <sFLASH_GetInfo+0xf2>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4a38      	ldr	r2, [pc, #224]	@ (8000744 <sFLASH_GetInfo+0x118>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d045      	beq.n	80006f2 <sFLASH_GetInfo+0xc6>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	4a37      	ldr	r2, [pc, #220]	@ (8000748 <sFLASH_GetInfo+0x11c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d157      	bne.n	800071e <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 800066e:	4b37      	ldr	r3, [pc, #220]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000670:	4a35      	ldr	r2, [pc, #212]	@ (8000748 <sFLASH_GetInfo+0x11c>)
 8000672:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8000674:	4b35      	ldr	r3, [pc, #212]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000676:	2201      	movs	r2, #1
 8000678:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800067a:	4b34      	ldr	r3, [pc, #208]	@ (800074c <sFLASH_GetInfo+0x120>)
 800067c:	2201      	movs	r2, #1
 800067e:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000682:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000686:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8000688:	4b30      	ldr	r3, [pc, #192]	@ (800074c <sFLASH_GetInfo+0x120>)
 800068a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800068e:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8000690:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000696:	819a      	strh	r2, [r3, #12]
			break;
 8000698:	e045      	b.n	8000726 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 800069a:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <sFLASH_GetInfo+0x120>)
 800069c:	4a28      	ldr	r2, [pc, #160]	@ (8000740 <sFLASH_GetInfo+0x114>)
 800069e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80006a6:	4b29      	ldr	r3, [pc, #164]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006b2:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80006bc:	4b23      	ldr	r3, [pc, #140]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	819a      	strh	r2, [r3, #12]
			break;
 80006c4:	e02f      	b.n	8000726 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80006c6:	4b21      	ldr	r3, [pc, #132]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006c8:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <sFLASH_GetInfo+0x110>)
 80006ca:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006de:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e6:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006ee:	819a      	strh	r2, [r3, #12]
			break;
 80006f0:	e019      	b.n	8000726 <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <sFLASH_GetInfo+0x118>)
 80006f6:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <sFLASH_GetInfo+0x120>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000700:	2201      	movs	r2, #1
 8000702:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000706:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800070a:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <sFLASH_GetInfo+0x120>)
 800070e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000712:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800071a:	819a      	strh	r2, [r3, #12]
			break;
 800071c:	e003      	b.n	8000726 <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <sFLASH_GetInfo+0x120>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
			break;
 8000724:	bf00      	nop
	}

	return flash_info;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a08      	ldr	r2, [pc, #32]	@ (800074c <sFLASH_GetInfo+0x120>)
 800072a:	461c      	mov	r4, r3
 800072c:	4613      	mov	r3, r2
 800072e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00ef4017 	.word	0x00ef4017
 8000740:	00ef4016 	.word	0x00ef4016
 8000744:	00c22016 	.word	0x00c22016
 8000748:	00ef4015 	.word	0x00ef4015
 800074c:	20000098 	.word	0x20000098

08000750 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8000754:	4b02      	ldr	r3, [pc, #8]	@ (8000760 <sFLASH_CS_LOW+0x10>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4798      	blx	r3

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084

08000764 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8000768:	4b02      	ldr	r3, [pc, #8]	@ (8000774 <sFLASH_CS_HIGH+0x10>)
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	4798      	blx	r3
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000084 	.word	0x20000084

08000778 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8000780:	f000 f97c 	bl	8000a7c <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000784:	f7ff ffe4 	bl	8000750 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8000788:	2020      	movs	r0, #32
 800078a:	f000 f967 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f961 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f95b 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f956 	bl	8000a5c <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80007b0:	f7ff ffd8 	bl	8000764 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80007b4:	f000 f96d 	bl	8000a92 <sFLASH_WaitForWriteEnd>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80007ce:	f000 f955 	bl	8000a7c <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80007d2:	f7ff ffbd 	bl	8000750 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f000 f940 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	0c1b      	lsrs	r3, r3, #16
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f93a 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f934 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f92f 	bl	8000a5c <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 80007fe:	e007      	b.n	8000810 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f929 	bl	8000a5c <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	80fa      	strh	r2, [r7, #6]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1f2      	bne.n	8000800 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800081a:	f7ff ffa3 	bl	8000764 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 800081e:	f000 f938 	bl	8000a92 <sFLASH_WaitForWriteEnd>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	4613      	mov	r3, r2
 8000836:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	75fb      	strb	r3, [r7, #23]
 800083c:	2300      	movs	r3, #0
 800083e:	75bb      	strb	r3, [r7, #22]
 8000840:	2300      	movs	r3, #0
 8000842:	757b      	strb	r3, [r7, #21]
 8000844:	2300      	movs	r3, #0
 8000846:	753b      	strb	r3, [r7, #20]
 8000848:	2300      	movs	r3, #0
 800084a:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8000850:	7d7b      	ldrb	r3, [r7, #21]
 8000852:	425b      	negs	r3, r3
 8000854:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8000862:	7d7b      	ldrb	r3, [r7, #21]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d124      	bne.n	80008b2 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d114      	bne.n	8000898 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	461a      	mov	r2, r3
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff ffa3 	bl	80007c0 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 800087a:	e07b      	b.n	8000974 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 800087c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ff9c 	bl	80007c0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800088e:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000896:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	75fa      	strb	r2, [r7, #23]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1ec      	bne.n	800087c <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80008a2:	7dbb      	ldrb	r3, [r7, #22]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff ff88 	bl	80007c0 <sFLASH_WritePage>
}
 80008b0:	e060      	b.n	8000974 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80008b2:	7dfb      	ldrb	r3, [r7, #23]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d125      	bne.n	8000904 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80008b8:	7dba      	ldrb	r2, [r7, #22]
 80008ba:	7d3b      	ldrb	r3, [r7, #20]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d91a      	bls.n	80008f6 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 80008c0:	7dba      	ldrb	r2, [r7, #22]
 80008c2:	7d3b      	ldrb	r3, [r7, #20]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80008c8:	7d3b      	ldrb	r3, [r7, #20]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f7ff ff75 	bl	80007c0 <sFLASH_WritePage>
        WriteAddr +=  count;
 80008d6:	7d3b      	ldrb	r3, [r7, #20]
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	4413      	add	r3, r2
 80008dc:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 80008de:	7d3b      	ldrb	r3, [r7, #20]
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80008e6:	7cfb      	ldrb	r3, [r7, #19]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f7ff ff66 	bl	80007c0 <sFLASH_WritePage>
}
 80008f4:	e03e      	b.n	8000974 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	461a      	mov	r2, r3
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff ff5f 	bl	80007c0 <sFLASH_WritePage>
}
 8000902:	e037      	b.n	8000974 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8000904:	7d3b      	ldrb	r3, [r7, #20]
 8000906:	b29b      	uxth	r3, r3
 8000908:	88fa      	ldrh	r2, [r7, #6]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	b29b      	uxth	r3, r3
 8000914:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 800091a:	7d3b      	ldrb	r3, [r7, #20]
 800091c:	b29b      	uxth	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ff4c 	bl	80007c0 <sFLASH_WritePage>
      WriteAddr +=  count;
 8000928:	7d3b      	ldrb	r3, [r7, #20]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8000930:	7d3b      	ldrb	r3, [r7, #20]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	4413      	add	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8000938:	e00d      	b.n	8000956 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 800093a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f7ff ff3d 	bl	80007c0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800094c:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000954:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	75fa      	strb	r2, [r7, #23]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1ec      	bne.n	800093a <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8000960:	7dbb      	ldrb	r3, [r7, #22]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d006      	beq.n	8000974 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8000966:	7dbb      	ldrb	r3, [r7, #22]
 8000968:	b29b      	uxth	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ff26 	bl	80007c0 <sFLASH_WritePage>
}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	4613      	mov	r3, r2
 8000988:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800098a:	f7ff fee1 	bl	8000750 <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 f864 	bl	8000a5c <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f85e 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f858 	bl	8000a5c <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f853 	bl	8000a5c <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 80009b6:	e008      	b.n	80009ca <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 80009b8:	f000 f846 	bl	8000a48 <sFLASH_ReadByte>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	80fa      	strh	r2, [r7, #6]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1f1      	bne.n	80009b8 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80009d4:	f7ff fec6 	bl	8000764 <sFLASH_CS_HIGH>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80009f6:	f7ff feab 	bl	8000750 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80009fa:	f7ff feb3 	bl	8000764 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80009fe:	f7ff fea7 	bl	8000750 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8000a02:	f7ff feaf 	bl	8000764 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8000a06:	f7ff fea3 	bl	8000750 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8000a0a:	209f      	movs	r0, #159	@ 0x9f
 8000a0c:	f000 f826 	bl	8000a5c <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8000a10:	f000 f81a 	bl	8000a48 <sFLASH_ReadByte>
 8000a14:	4603      	mov	r3, r0
 8000a16:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8000a18:	f000 f816 	bl	8000a48 <sFLASH_ReadByte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8000a20:	f000 f812 	bl	8000a48 <sFLASH_ReadByte>
 8000a24:	4603      	mov	r3, r0
 8000a26:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000a28:	f7ff fe9c 	bl	8000764 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	041a      	lsls	r2, r3, #16
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	4313      	orrs	r3, r2
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

  return Temp;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8000a4c:	4b02      	ldr	r3, [pc, #8]	@ (8000a58 <sFLASH_ReadByte+0x10>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4798      	blx	r3
 8000a52:	4603      	mov	r3, r0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000084 	.word	0x20000084

08000a5c <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8000a66:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <sFLASH_SendByte+0x1c>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	4798      	blx	r3
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000084 	.word	0x20000084

08000a7c <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000a80:	f7ff fe66 	bl	8000750 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8000a84:	2006      	movs	r0, #6
 8000a86:	f7ff ffe9 	bl	8000a5c <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000a8a:	f7ff fe6b 	bl	8000764 <sFLASH_CS_HIGH>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000a9c:	f7ff fe58 	bl	8000750 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8000aa0:	2005      	movs	r0, #5
 8000aa2:	f7ff ffdb 	bl	8000a5c <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 8000aa6:	f7ff ffcf 	bl	8000a48 <sFLASH_ReadByte>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f6      	bne.n	8000aa6 <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000ab8:	f7ff fe54 	bl	8000764 <sFLASH_CS_HIGH>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	bf38      	it	cc
 8000ad6:	4613      	movcc	r3, r2
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	bf28      	it	cs
 8000af6:	4613      	movcs	r3, r2
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	fb01 f202 	mul.w	r2, r1, r2
 8000b1c:	1a9b      	subs	r3, r3, r2
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	1ad3      	subs	r3, r2, r3
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ffde 	bl	8000b04 <lfs_aligndown>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	fa93 f3a3 	rbit	r3, r3
 8000b80:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fb91 	bl	80002c0 <__popcountsi2>
 8000b9e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	1ad3      	subs	r3, r2, r3
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000bcc:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffee 	bl	8000bc4 <lfs_fromle32>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ffed 	bl	8000bf2 <lfs_frombe32>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f008 ffce 	bl	8009bcc <malloc>
 8000c30:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f008 ffca 	bl	8009bdc <free>
#else
    (void)p;
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68d8      	ldr	r0, [r3, #12]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c82:	461a      	mov	r2, r3
 8000c84:	21ff      	movs	r1, #255	@ 0xff
 8000c86:	f009 f998 	bl	8009fba <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cac:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d208      	bcs.n	8000ccc <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8000cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cbe:	441a      	add	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cc4:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	f240 811b 	bls.w	8000f02 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8000ccc:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8000cd0:	e11c      	b.n	8000f0c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cd4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d03f      	beq.n	8000d5c <lfs_bd_read+0xc0>
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d13a      	bne.n	8000d5c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d232      	bcs.n	8000d5c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d324      	bcc.n	8000d4a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d0a:	1acb      	subs	r3, r1, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	69b8      	ldr	r0, [r7, #24]
 8000d12:	f7ff fee7 	bl	8000ae4 <lfs_min>
 8000d16:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	4413      	add	r3, r2
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	69f8      	ldr	r0, [r7, #28]
 8000d2c:	f009 f9ff 	bl	800a12e <memcpy>

                data += diff;
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4413      	add	r3, r2
 8000d36:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8000d40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8000d48:	e0db      	b.n	8000f02 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	4619      	mov	r1, r3
 8000d54:	69b8      	ldr	r0, [r7, #24]
 8000d56:	f7ff fec5 	bl	8000ae4 <lfs_min>
 8000d5a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d13a      	bne.n	8000ddc <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d232      	bcs.n	8000ddc <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d324      	bcc.n	8000dca <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6859      	ldr	r1, [r3, #4]
 8000d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	69b8      	ldr	r0, [r7, #24]
 8000d92:	f7ff fea7 	bl	8000ae4 <lfs_min>
 8000d96:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000da2:	1acb      	subs	r3, r1, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4619      	mov	r1, r3
 8000daa:	69f8      	ldr	r0, [r7, #28]
 8000dac:	f009 f9bf 	bl	800a12e <memcpy>

                data += diff;
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4413      	add	r3, r2
 8000db6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000db8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8000dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8000dc8:	e09b      	b.n	8000f02 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	69b8      	ldr	r0, [r7, #24]
 8000dd6:	f7ff fe85 	bl	8000ae4 <lfs_min>
 8000dda:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000ddc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d336      	bcc.n	8000e52 <lfs_bd_read+0x1b6>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8000df0:	fb01 f202 	mul.w	r2, r1, r2
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d12b      	bne.n	8000e52 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000dfe:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000e00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d325      	bcc.n	8000e52 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	69b8      	ldr	r0, [r7, #24]
 8000e10:	f7ff fe78 	bl	8000b04 <lfs_aligndown>
 8000e14:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e1a:	685c      	ldr	r4, [r3, #4]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000e2a:	47a0      	blx	r4
 8000e2c:	6178      	str	r0, [r7, #20]
            if (err) {
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <lfs_bd_read+0x19c>
                return err;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	e069      	b.n	8000f0c <lfs_bd_read+0x270>
            }

            data += diff;
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000e40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4413      	add	r3, r2
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8000e48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8000e50:	e057      	b.n	8000f02 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d305      	bcc.n	8000e6a <lfs_bd_read+0x1ce>
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <lfs_bd_read+0x278>)
 8000e60:	4a2d      	ldr	r2, [pc, #180]	@ (8000f18 <lfs_bd_read+0x27c>)
 8000e62:	216b      	movs	r1, #107	@ 0x6b
 8000e64:	482d      	ldr	r0, [pc, #180]	@ (8000f1c <lfs_bd_read+0x280>)
 8000e66:	f008 fe93 	bl	8009b90 <__assert_func>
        rcache->block = block;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e6e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e7a:	f7ff fe43 	bl	8000b04 <lfs_aligndown>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000e84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e8e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8000e90:	4619      	mov	r1, r3
 8000e92:	4610      	mov	r0, r2
 8000e94:	f7ff fe4b 	bl	8000b2e <lfs_alignup>
 8000e98:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e9e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	f7ff fe1e 	bl	8000ae4 <lfs_min>
 8000ea8:	4602      	mov	r2, r0
                - rcache->off,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000eae:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4610      	mov	r0, r2
 8000eba:	f7ff fe13 	bl	8000ae4 <lfs_min>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ec8:	685c      	ldr	r4, [r3, #4]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6819      	ldr	r1, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	462b      	mov	r3, r5
 8000ee2:	47a0      	blx	r4
 8000ee4:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dd05      	ble.n	8000ef8 <lfs_bd_read+0x25c>
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <lfs_bd_read+0x284>)
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <lfs_bd_read+0x27c>)
 8000ef0:	2176      	movs	r1, #118	@ 0x76
 8000ef2:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <lfs_bd_read+0x280>)
 8000ef4:	f008 fe4c 	bl	8009b90 <__assert_func>
        if (err) {
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <lfs_bd_read+0x266>
            return err;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	e004      	b.n	8000f0c <lfs_bd_read+0x270>
    while (size > 0) {
 8000f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f aee4 	bne.w	8000cd2 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bdb0      	pop	{r4, r5, r7, pc}
 8000f14:	0800abb4 	.word	0x0800abb4
 8000f18:	0800b520 	.word	0x0800b520
 8000f1c:	0800abd4 	.word	0x0800abd4
 8000f20:	0800abe8 	.word	0x0800abe8

08000f24 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	@ 0x38
 8000f28:	af04      	add	r7, sp, #16
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f34:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f3e:	e039      	b.n	8000fb4 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000f40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2108      	movs	r1, #8
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fdcb 	bl	8000ae4 <lfs_min>
 8000f4e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	1ad1      	subs	r1, r2, r3
 8000f56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	4413      	add	r3, r2
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	9203      	str	r2, [sp, #12]
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	9202      	str	r2, [sp, #8]
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff fe92 	bl	8000c9c <lfs_bd_read>
 8000f78:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <lfs_bd_cmp+0x60>
            return res;
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	e01c      	b.n	8000fbe <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8000f84:	6a3a      	ldr	r2, [r7, #32]
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	18d1      	adds	r1, r2, r3
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f009 f802 	bl	8009f9a <memcmp>
 8000f96:	61b8      	str	r0, [r7, #24]
        if (res) {
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da01      	bge.n	8000fa8 <lfs_bd_cmp+0x84>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e00a      	b.n	8000fbe <lfs_bd_cmp+0x9a>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e008      	b.n	8000fbe <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3c1      	bcc.n	8000f40 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b08c      	sub	sp, #48	@ 0x30
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fde:	d061      	beq.n	80010a4 <lfs_bd_flush+0xdc>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f113 0f02 	cmn.w	r3, #2
 8000fe8:	d05c      	beq.n	80010a4 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d305      	bcc.n	8001004 <lfs_bd_flush+0x3c>
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <lfs_bd_flush+0xe8>)
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80010b4 <lfs_bd_flush+0xec>)
 8000ffc:	219e      	movs	r1, #158	@ 0x9e
 8000ffe:	482e      	ldr	r0, [pc, #184]	@ (80010b8 <lfs_bd_flush+0xf0>)
 8001000:	f008 fdc6 	bl	8009b90 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f7ff fd8c 	bl	8000b2e <lfs_alignup>
 8001016:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800101c:	689c      	ldr	r4, [r3, #8]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	6819      	ldr	r1, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	462b      	mov	r3, r5
 8001034:	47a0      	blx	r4
 8001036:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dd05      	ble.n	800104a <lfs_bd_flush+0x82>
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <lfs_bd_flush+0xf4>)
 8001040:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <lfs_bd_flush+0xec>)
 8001042:	21a2      	movs	r1, #162	@ 0xa2
 8001044:	481c      	ldr	r0, [pc, #112]	@ (80010b8 <lfs_bd_flush+0xf0>)
 8001046:	f008 fda3 	bl	8009b90 <__assert_func>
        if (err) {
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <lfs_bd_flush+0x8c>
            return err;
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	e028      	b.n	80010a6 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d020      	beq.n	800109c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f7ff fdf7 	bl	8000c50 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800106e:	69f8      	ldr	r0, [r7, #28]
 8001070:	9003      	str	r0, [sp, #12]
 8001072:	9102      	str	r1, [sp, #8]
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	2100      	movs	r1, #0
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff ff50 	bl	8000f24 <lfs_bd_cmp>
 8001084:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	da01      	bge.n	8001090 <lfs_bd_flush+0xc8>
                return res;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	e00a      	b.n	80010a6 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8001096:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800109a:	e004      	b.n	80010a6 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff fde5 	bl	8000c6e <lfs_cache_zero>
    }

    return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800abf4 	.word	0x0800abf4
 80010b4:	0800b52c 	.word	0x0800b52c
 80010b8:	0800abd4 	.word	0x0800abd4
 80010bc:	0800abe8 	.word	0x0800abe8

080010c0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff fdbd 	bl	8000c50 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff ff73 	bl	8000fc8 <lfs_bd_flush>
 80010e2:	6178      	str	r0, [r7, #20]
    if (err) {
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <lfs_bd_sync+0x2e>
        return err;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	e011      	b.n	8001112 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80010f8:	4610      	mov	r0, r2
 80010fa:	4798      	blx	r3
 80010fc:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dd05      	ble.n	8001110 <lfs_bd_sync+0x50>
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <lfs_bd_sync+0x5c>)
 8001106:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <lfs_bd_sync+0x60>)
 8001108:	21c8      	movs	r1, #200	@ 0xc8
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <lfs_bd_sync+0x64>)
 800110c:	f008 fd40 	bl	8009b90 <__assert_func>
    return err;
 8001110:	697b      	ldr	r3, [r7, #20]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	0800abe8 	.word	0x0800abe8
 8001120:	0800b53c 	.word	0x0800b53c
 8001124:	0800abd4 	.word	0x0800abd4

08001128 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001138:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800113a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113c:	f113 0f02 	cmn.w	r3, #2
 8001140:	d00b      	beq.n	800115a <lfs_bd_prog+0x32>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800114a:	429a      	cmp	r2, r3
 800114c:	d305      	bcc.n	800115a <lfs_bd_prog+0x32>
 800114e:	4b48      	ldr	r3, [pc, #288]	@ (8001270 <lfs_bd_prog+0x148>)
 8001150:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <lfs_bd_prog+0x14c>)
 8001152:	21d3      	movs	r1, #211	@ 0xd3
 8001154:	4848      	ldr	r0, [pc, #288]	@ (8001278 <lfs_bd_prog+0x150>)
 8001156:	f008 fd1b 	bl	8009b90 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800115a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800115c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800115e:	441a      	add	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	429a      	cmp	r2, r3
 8001168:	d979      	bls.n	800125e <lfs_bd_prog+0x136>
 800116a:	4b44      	ldr	r3, [pc, #272]	@ (800127c <lfs_bd_prog+0x154>)
 800116c:	4a41      	ldr	r2, [pc, #260]	@ (8001274 <lfs_bd_prog+0x14c>)
 800116e:	21d4      	movs	r1, #212	@ 0xd4
 8001170:	4841      	ldr	r0, [pc, #260]	@ (8001278 <lfs_bd_prog+0x150>)
 8001172:	f008 fd0d 	bl	8009b90 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800117c:	429a      	cmp	r2, r3
 800117e:	d151      	bne.n	8001224 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8001184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001186:	429a      	cmp	r2, r3
 8001188:	d34c      	bcc.n	8001224 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001194:	4413      	add	r3, r2
                off >= pcache->off &&
 8001196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001198:	429a      	cmp	r2, r3
 800119a:	d243      	bcs.n	8001224 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	6859      	ldr	r1, [r3, #4]
 80011a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a8:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80011aa:	4413      	add	r3, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80011b0:	f7ff fc98 	bl	8000ae4 <lfs_min>
 80011b4:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011c0:	1acb      	subs	r3, r1, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	69f9      	ldr	r1, [r7, #28]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f008 ffb0 	bl	800a12e <memcpy>

            data += diff;
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4413      	add	r3, r2
 80011d4:	61fb      	str	r3, [r7, #28]
            off += diff;
 80011d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	4413      	add	r3, r2
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 80011de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	6898      	ldr	r0, [r3, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc66 	bl	8000ac4 <lfs_max>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001208:	429a      	cmp	r2, r3
 800120a:	d127      	bne.n	800125c <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7ff fed8 	bl	8000fc8 <lfs_bd_flush>
 8001218:	6178      	str	r0, [r7, #20]
                if (err) {
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01d      	beq.n	800125c <lfs_bd_prog+0x134>
                    return err;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	e020      	b.n	8001266 <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <lfs_bd_prog+0x112>
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <lfs_bd_prog+0x158>)
 8001230:	4a10      	ldr	r2, [pc, #64]	@ (8001274 <lfs_bd_prog+0x14c>)
 8001232:	21f1      	movs	r1, #241	@ 0xf1
 8001234:	4810      	ldr	r0, [pc, #64]	@ (8001278 <lfs_bd_prog+0x150>)
 8001236:	f008 fcab 	bl	8009b90 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4619      	mov	r1, r3
 8001248:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800124a:	f7ff fc5b 	bl	8000b04 <lfs_aligndown>
 800124e:	4602      	mov	r2, r0
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	e000      	b.n	800125e <lfs_bd_prog+0x136>
            continue;
 800125c:	bf00      	nop
    while (size > 0) {
 800125e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001260:	2b00      	cmp	r3, #0
 8001262:	d188      	bne.n	8001176 <lfs_bd_prog+0x4e>
    }

    return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800ac1c 	.word	0x0800ac1c
 8001274:	0800b548 	.word	0x0800b548
 8001278:	0800abd4 	.word	0x0800abd4
 800127c:	0800ac58 	.word	0x0800ac58
 8001280:	0800ac7c 	.word	0x0800ac7c

08001284 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d305      	bcc.n	80012a6 <lfs_bd_erase+0x22>
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <lfs_bd_erase+0x54>)
 800129c:	4a0f      	ldr	r2, [pc, #60]	@ (80012dc <lfs_bd_erase+0x58>)
 800129e:	21ff      	movs	r1, #255	@ 0xff
 80012a0:	480f      	ldr	r0, [pc, #60]	@ (80012e0 <lfs_bd_erase+0x5c>)
 80012a2:	f008 fc75 	bl	8009b90 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	4610      	mov	r0, r2
 80012b4:	4798      	blx	r3
 80012b6:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dd06      	ble.n	80012cc <lfs_bd_erase+0x48>
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <lfs_bd_erase+0x60>)
 80012c0:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <lfs_bd_erase+0x58>)
 80012c2:	f240 1101 	movw	r1, #257	@ 0x101
 80012c6:	4806      	ldr	r0, [pc, #24]	@ (80012e0 <lfs_bd_erase+0x5c>)
 80012c8:	f008 fc62 	bl	8009b90 <__assert_func>
    return err;
 80012cc:	68fb      	ldr	r3, [r7, #12]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800abb4 	.word	0x0800abb4
 80012dc:	0800b554 	.word	0x0800b554
 80012e0:	0800abd4 	.word	0x0800abd4
 80012e4:	0800abe8 	.word	0x0800abe8

080012e8 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3304      	adds	r3, #4
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001322:	d005      	beq.n	8001330 <lfs_pair_isnull+0x1e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3304      	adds	r3, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132e:	d101      	bne.n	8001334 <lfs_pair_isnull+0x22>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <lfs_pair_isnull+0x24>
 8001334:	2300      	movs	r3, #0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d017      	beq.n	800138e <lfs_pair_cmp+0x46>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3304      	adds	r3, #4
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3304      	adds	r3, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d00f      	beq.n	800138e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d008      	beq.n	800138e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3304      	adds	r3, #4
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <lfs_pair_cmp+0x46>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <lfs_pair_cmp+0x48>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d107      	bne.n	80013c2 <lfs_pair_sync+0x26>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	3304      	adds	r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d00d      	beq.n	80013de <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3304      	adds	r3, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d108      	bne.n	80013e2 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3304      	adds	r3, #4
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d101      	bne.n	80013e2 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <lfs_pair_sync+0x48>
 80013e2:	2300      	movs	r3, #0
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80013f6:	b590      	push	{r4, r7, lr}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fbde 	bl	8000bc4 <lfs_fromle32>
 8001408:	4602      	mov	r2, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	1d1c      	adds	r4, r3, #4
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff fbd3 	bl	8000bc4 <lfs_fromle32>
 800141e:	4603      	mov	r3, r0
 8001420:	6023      	str	r3, [r4, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}

0800142a <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800142a:	b590      	push	{r4, r7, lr}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fbcf 	bl	8000bda <lfs_tole32>
 800143c:	4602      	mov	r2, r0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1d1c      	adds	r4, r3, #4
 800144c:	4610      	mov	r0, r2
 800144e:	f7ff fbc4 	bl	8000bda <lfs_tole32>
 8001452:	4603      	mov	r3, r0
 8001454:	6023      	str	r3, [r4, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}

0800145e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	43db      	mvns	r3, r3
 800146a:	0fdb      	lsrs	r3, r3, #31
 800146c:	b2db      	uxtb	r3, r3
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	059b      	lsls	r3, r3, #22
 8001486:	159b      	asrs	r3, r3, #22
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	bf0c      	ite	eq
 800148e:	2301      	moveq	r3, #1
 8001490:	2300      	movne	r3, #0
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	0d1b      	lsrs	r3, r3, #20
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80014b2:	b29b      	uxth	r3, r3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	0d1b      	lsrs	r3, r3, #20
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d2:	b29b      	uxth	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0d1b      	lsrs	r3, r3, #20
 80014ec:	b2db      	uxtb	r3, r3
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffec 	bl	80014e0 <lfs_tag_chunk>
 8001508:	4603      	mov	r3, r0
 800150a:	b25b      	sxtb	r3, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0a9b      	lsrs	r3, r3, #10
 8001520:	b29b      	uxth	r3, r3
 8001522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001526:	b29b      	uxth	r3, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff8f 	bl	800147a <lfs_tag_isdelete>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ffe5 	bl	8001534 <lfs_tag_size>
 800156a:	4603      	mov	r3, r0
 800156c:	3304      	adds	r3, #4
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e012      	b.n	80015ac <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	4413      	add	r3, r2
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4403      	add	r3, r0
 80015a2:	404a      	eors	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	dde9      	ble.n	8001586 <lfs_gstate_xor+0x10>
    }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e00b      	b.n	80015e6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <lfs_gstate_iszero+0x20>
            return false;
 80015dc:	2300      	movs	r3, #0
 80015de:	e006      	b.n	80015ee <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	ddf0      	ble.n	80015ce <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff94 	bl	8001534 <lfs_tag_size>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff81 	bl	8001534 <lfs_tag_size>
 8001632:	4603      	mov	r3, r0
 8001634:	b2db      	uxtb	r3, r3
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff28 	bl	80014a0 <lfs_tag_type1>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff14 	bl	80014a0 <lfs_tag_type1>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <lfs_gstate_hasmovehere+0x30>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fe5f 	bl	8001348 <lfs_pair_cmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <lfs_gstate_hasmovehere+0x30>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <lfs_gstate_hasmovehere+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fa87 	bl	8000bc4 <lfs_fromle32>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fa7f 	bl	8000bc4 <lfs_fromle32>
 80016c6:	4602      	mov	r2, r0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa77 	bl	8000bc4 <lfs_fromle32>
 80016d6:	4602      	mov	r2, r0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	609a      	str	r2, [r3, #8]
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa72 	bl	8000bda <lfs_tole32>
 80016f6:	4602      	mov	r2, r0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fa6a 	bl	8000bda <lfs_tole32>
 8001706:	4602      	mov	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fa62 	bl	8000bda <lfs_tole32>
 8001716:	4602      	mov	r2, r0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fa47 	bl	8000bc4 <lfs_fromle32>
 8001736:	4602      	mov	r2, r0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fa3f 	bl	8000bc4 <lfs_fromle32>
 8001746:	4602      	mov	r2, r0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fa3a 	bl	8000bda <lfs_tole32>
 8001766:	4602      	mov	r2, r0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fa32 	bl	8000bda <lfs_tole32>
 8001776:	4602      	mov	r2, r0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fa17 	bl	8000bc4 <lfs_fromle32>
 8001796:	4602      	mov	r2, r0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fa0f 	bl	8000bc4 <lfs_fromle32>
 80017a6:	4602      	mov	r2, r0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa07 	bl	8000bc4 <lfs_fromle32>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f9ff 	bl	8000bc4 <lfs_fromle32>
 80017c6:	4602      	mov	r2, r0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f9f7 	bl	8000bc4 <lfs_fromle32>
 80017d6:	4602      	mov	r2, r0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f9ef 	bl	8000bc4 <lfs_fromle32>
 80017e6:	4602      	mov	r2, r0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	615a      	str	r2, [r3, #20]
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e009      	b.n	8001818 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d101      	bne.n	8001812 <lfs_mlist_isopen+0x1e>
            return true;
 800180e:	2301      	movs	r3, #1
 8001810:	e007      	b.n	8001822 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f1      	bne.n	8001804 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3328      	adds	r3, #40	@ 0x28
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e00d      	b.n	800185c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d105      	bne.n	8001856 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]
            break;
 8001854:	e007      	b.n	8001866 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ed      	bne.n	8001840 <lfs_mlist_remove+0x12>
        }
    }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4413      	add	r3, r2
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80018b8:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80018ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80018be:	fb01 f202 	mul.w	r2, r1, r2
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d212      	bcs.n	80018f6 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	009a      	lsls	r2, r3, #2
 80018da:	440a      	add	r2, r1
 80018dc:	6811      	ldr	r1, [r2, #0]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4403      	add	r3, r0
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->free.i = 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ack(lfs);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffe4 	bl	8001904 <lfs_alloc_ack>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800194e:	e04f      	b.n	80019f0 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->free.ack -= 1;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	661a      	str	r2, [r3, #96]	@ 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d132      	bne.n	80019f0 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4413      	add	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001996:	6a12      	ldr	r2, [r2, #32]
 8001998:	fbb3 f1f2 	udiv	r1, r3, r2
 800199c:	fb01 f202 	mul.w	r2, r1, r2
 80019a0:	1a9a      	subs	r2, r3, r2
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80019a6:	e009      	b.n	80019bc <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->free.ack -= 1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	661a      	str	r2, [r3, #96]	@ 0x60
                while (lfs->free.i != lfs->free.size &&
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d011      	beq.n	80019ec <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1dd      	bne.n	80019a8 <lfs_alloc+0x64>
                }

                return 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e050      	b.n	8001a92 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1a9      	bne.n	8001950 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10f      	bne.n	8001a24 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <lfs_alloc+0x158>)
 8001a10:	9200      	str	r2, [sp, #0]
 8001a12:	f240 2247 	movw	r2, #583	@ 0x247
 8001a16:	4922      	ldr	r1, [pc, #136]	@ (8001aa0 <lfs_alloc+0x15c>)
 8001a18:	4822      	ldr	r0, [pc, #136]	@ (8001aa4 <lfs_alloc+0x160>)
 8001a1a:	f008 fa69 	bl	8009ef0 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001a1e:	f06f 031b 	mvn.w	r3, #27
 8001a22:	e036      	b.n	8001a92 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a32:	6a12      	ldr	r2, [r2, #32]
 8001a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
 8001a3c:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a48:	00da      	lsls	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff f847 	bl	8000ae4 <lfs_min>
 8001a56:	4602      	mov	r2, r0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	@ 0x58
        lfs->free.i = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	65da      	str	r2, [r3, #92]	@ 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	f008 faa3 	bl	8009fba <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001a74:	2301      	movs	r3, #1
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	490b      	ldr	r1, [pc, #44]	@ (8001aa8 <lfs_alloc+0x164>)
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f004 fd30 	bl	80064e0 <lfs_fs_rawtraverse>
 8001a80:	60f8      	str	r0, [r7, #12]
        if (err) {
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f43f af62 	beq.w	800194e <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff49 	bl	8001922 <lfs_alloc_drop>
            return err;
 8001a90:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0800acc8 	.word	0x0800acc8
 8001aa0:	0800abd4 	.word	0x0800abd4
 8001aa4:	0800aca0 	.word	0x0800aca0
 8001aa8:	08001897 	.word	0x08001897

08001aac <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b08f      	sub	sp, #60	@ 0x3c
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	333c      	adds	r3, #60	@ 0x3c
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fdc6 	bl	8001664 <lfs_gstate_hasmovehere>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80ba 	beq.w	8001c54 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fd17 	bl	8001514 <lfs_tag_id>
 8001ae6:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80b3 	beq.w	8001c54 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fd0e 	bl	8001514 <lfs_tag_id>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461c      	mov	r4, r3
 8001afc:	6838      	ldr	r0, [r7, #0]
 8001afe:	f7ff fd09 	bl	8001514 <lfs_tag_id>
 8001b02:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001b04:	429c      	cmp	r4, r3
 8001b06:	f200 80a5 	bhi.w	8001c54 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001b10:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001b12:	e09f      	b.n	8001c54 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fd19 	bl	800154e <lfs_tag_dsize>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001b28:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8001b2e:	2204      	movs	r2, #4
 8001b30:	9203      	str	r2, [sp, #12]
 8001b32:	f107 0210 	add.w	r2, r7, #16
 8001b36:	9202      	str	r2, [sp, #8]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3a:	9201      	str	r2, [sp, #4]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2304      	movs	r3, #4
 8001b40:	460a      	mov	r2, r1
 8001b42:	2100      	movs	r1, #0
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff f8a9 	bl	8000c9c <lfs_bd_read>
 8001b4a:	61b8      	str	r0, [r7, #24]
        if (err) {
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <lfs_dir_getslice+0xaa>
            return err;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	e08a      	b.n	8001c6c <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f84a 	bl	8000bf2 <lfs_frombe32>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4053      	eors	r3, r2
 8001b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b68:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fcd2 	bl	8001514 <lfs_tag_id>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d02b      	beq.n	8001bce <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001b76:	69f8      	ldr	r0, [r7, #28]
 8001b78:	f7ff fc92 	bl	80014a0 <lfs_tag_type1>
 8001b7c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b82:	d124      	bne.n	8001bce <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001b84:	69f8      	ldr	r0, [r7, #28]
 8001b86:	f7ff fcc5 	bl	8001514 <lfs_tag_id>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461c      	mov	r4, r3
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fcbd 	bl	8001514 <lfs_tag_id>
 8001b9a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	d816      	bhi.n	8001bce <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	1ad2      	subs	r2, r2, r3
 8001ba6:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <lfs_dir_getslice+0x1c8>)
 8001ba8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001baa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d102      	bne.n	8001bbe <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001bb8:	f06f 0301 	mvn.w	r3, #1
 8001bbc:	e056      	b.n	8001c6c <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001bbe:	69f8      	ldr	r0, [r7, #28]
 8001bc0:	f7ff fc9b 	bl	80014fa <lfs_tag_splice>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	029a      	lsls	r2, r3, #10
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	4413      	add	r3, r2
 8001bcc:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	1ac9      	subs	r1, r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	400b      	ands	r3, r1
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d138      	bne.n	8001c54 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8001be2:	69f8      	ldr	r0, [r7, #28]
 8001be4:	f7ff fc49 	bl	800147a <lfs_tag_isdelete>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8001bee:	f06f 0301 	mvn.w	r3, #1
 8001bf2:	e03b      	b.n	8001c6c <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001bf4:	69f8      	ldr	r0, [r7, #28]
 8001bf6:	f7ff fc9d 	bl	8001534 <lfs_tag_size>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe ff70 	bl	8000ae4 <lfs_min>
 8001c04:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001c06:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c10:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001c12:	3204      	adds	r2, #4
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	9103      	str	r1, [sp, #12]
 8001c18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c1a:	9102      	str	r1, [sp, #8]
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	4602      	mov	r2, r0
 8001c24:	2100      	movs	r1, #0
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff f838 	bl	8000c9c <lfs_bd_read>
 8001c2c:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <lfs_dir_getslice+0x18c>
                return err;
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	e019      	b.n	8001c6c <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	18d0      	adds	r0, r2, r3
 8001c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	2100      	movs	r1, #0
 8001c48:	f008 f9b7 	bl	8009fba <memset>

            return tag + gdiff;
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	e00b      	b.n	8001c6c <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fc79 	bl	800154e <lfs_tag_dsize>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	3304      	adds	r3, #4
 8001c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c62:	429a      	cmp	r2, r3
 8001c64:	f4bf af56 	bcs.w	8001b14 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001c68:	f06f 0301 	mvn.w	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	372c      	adds	r7, #44	@ 0x2c
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	000ffc00 	.word	0x000ffc00

08001c78 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f7ff fc54 	bl	8001534 <lfs_tag_size>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f7ff ff04 	bl	8001aac <lfs_dir_getslice>
 8001ca4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b08c      	sub	sp, #48	@ 0x30
 8001cb2:	af04      	add	r7, sp, #16
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cbe:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc4:	441a      	add	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f240 80c0 	bls.w	8001e52 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001cd2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8001cd6:	e0c1      	b.n	8001e5c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cda:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03f      	beq.n	8001d62 <lfs_dir_getread+0xb4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f113 0f02 	cmn.w	r3, #2
 8001cea:	d13a      	bne.n	8001d62 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d232      	bcs.n	8001d62 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d324      	bcc.n	8001d50 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6859      	ldr	r1, [r3, #4]
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d10:	1acb      	subs	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	69b8      	ldr	r0, [r7, #24]
 8001d18:	f7fe fee4 	bl	8000ae4 <lfs_min>
 8001d1c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d28:	1acb      	subs	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	69f8      	ldr	r0, [r7, #28]
 8001d32:	f008 f9fc 	bl	800a12e <memcpy>

                data += diff;
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001d3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	4413      	add	r3, r2
 8001d44:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001d46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001d4e:	e080      	b.n	8001e52 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	69b8      	ldr	r0, [r7, #24]
 8001d5c:	f7fe fec2 	bl	8000ae4 <lfs_min>
 8001d60:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f113 0f02 	cmn.w	r3, #2
 8001d6a:	d13a      	bne.n	8001de2 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d232      	bcs.n	8001de2 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d324      	bcc.n	8001dd0 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d90:	1acb      	subs	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	69b8      	ldr	r0, [r7, #24]
 8001d98:	f7fe fea4 	bl	8000ae4 <lfs_min>
 8001d9c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001da8:	1acb      	subs	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4619      	mov	r1, r3
 8001db0:	69f8      	ldr	r0, [r7, #28]
 8001db2:	f008 f9bc 	bl	800a12e <memcpy>

                data += diff;
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	4413      	add	r3, r2
 8001dbc:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001dbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001dc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001dce:	e040      	b.n	8001e52 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4619      	mov	r1, r3
 8001dda:	69b8      	ldr	r0, [r7, #24]
 8001ddc:	f7fe fe82 	bl	8000ae4 <lfs_min>
 8001de0:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f06f 0201 	mvn.w	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	4619      	mov	r1, r3
 8001df2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001df4:	f7fe fe86 	bl	8000b04 <lfs_aligndown>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001dfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e02:	441a      	add	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7fe fe8e 	bl	8000b2e <lfs_alignup>
 8001e12:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe fe61 	bl	8000ae4 <lfs_min>
 8001e22:	4602      	mov	r2, r0
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	6889      	ldr	r1, [r1, #8]
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fe33 	bl	8001aac <lfs_dir_getslice>
 8001e46:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da01      	bge.n	8001e52 <lfs_dir_getread+0x1a4>
            return err;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	e004      	b.n	8001e5c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f47f af3f 	bne.w	8001cd8 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <lfs_dir_traverse_filter+0x1e>
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <lfs_dir_traverse_filter+0xac>)
 8001e80:	e000      	b.n	8001e84 <lfs_dir_traverse_filter+0x20>
 8001e82:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001e84:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	405a      	eors	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d014      	beq.n	8001ec0 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff faed 	bl	800147a <lfs_tag_isdelete>
 8001ea0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <lfs_dir_traverse_filter+0xac>)
 8001eaa:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <lfs_dir_traverse_filter+0xb4>)
 8001eb2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001eb4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8001eb8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d104      	bne.n	8001eca <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
        return true;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e01e      	b.n	8001f08 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001eca:	68b8      	ldr	r0, [r7, #8]
 8001ecc:	f7ff fae8 	bl	80014a0 <lfs_tag_type1>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed6:	d116      	bne.n	8001f06 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001ed8:	68b8      	ldr	r0, [r7, #8]
 8001eda:	f7ff fb1b 	bl	8001514 <lfs_tag_id>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461c      	mov	r4, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fb14 	bl	8001514 <lfs_tag_id>
 8001eec:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001eee:	429c      	cmp	r4, r3
 8001ef0:	d809      	bhi.n	8001f06 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f7ff fb01 	bl	80014fa <lfs_tag_splice>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	029a      	lsls	r2, r3, #10
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	441a      	add	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	7ffffc00 	.word	0x7ffffc00
 8001f14:	700ffc00 	.word	0x700ffc00
 8001f18:	000ffc00 	.word	0x000ffc00

08001f1c <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b0c1      	sub	sp, #260	@ 0x104
 8001f20:	af04      	add	r7, sp, #16
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f7ff fb0c 	bl	800154e <lfs_tag_dsize>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d237      	bcs.n	8001fb4 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8001f44:	6838      	ldr	r0, [r7, #0]
 8001f46:	f7ff fb02 	bl	800154e <lfs_tag_dsize>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001f52:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8001f58:	2204      	movs	r2, #4
 8001f5a:	9203      	str	r2, [sp, #12]
 8001f5c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001f60:	9202      	str	r2, [sp, #8]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2304      	movs	r3, #4
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7fe fe94 	bl	8000c9c <lfs_bd_read>
 8001f74:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8001f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <lfs_dir_traverse+0x6a>
                    return err;
 8001f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f84:	e3a6      	b.n	80026d4 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fe32 	bl	8000bf2 <lfs_frombe32>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4053      	eors	r3, r2
 8001f94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f98:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8001fa6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8001fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	e01b      	b.n	8001fec <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8001fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dd13      	ble.n	8001fe4 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8001fbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8001fc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8001fce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8001fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001fe2:	e003      	b.n	8001fec <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8001fea:	e2a2      	b.n	8002532 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001fec:	4b7e      	ldr	r3, [pc, #504]	@ (80021e8 <lfs_dir_traverse+0x2cc>)
 8001fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001ff2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ff8:	405a      	eors	r2, r3
 8001ffa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8001ffe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002002:	400b      	ands	r3, r1
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 8285 	bne.w	8002516 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800200c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002010:	f7ff fa80 	bl	8001514 <lfs_tag_id>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80f0 	beq.w	80021fc <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800201c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002020:	2b02      	cmp	r3, #2
 8002022:	d906      	bls.n	8002032 <lfs_dir_traverse+0x116>
 8002024:	4b71      	ldr	r3, [pc, #452]	@ (80021ec <lfs_dir_traverse+0x2d0>)
 8002026:	4a72      	ldr	r2, [pc, #456]	@ (80021f0 <lfs_dir_traverse+0x2d4>)
 8002028:	f240 314e 	movw	r1, #846	@ 0x34e
 800202c:	4871      	ldr	r0, [pc, #452]	@ (80021f4 <lfs_dir_traverse+0x2d8>)
 800202e:	f007 fdaf 	bl	8009b90 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002034:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	33f0      	adds	r3, #240	@ 0xf0
 8002042:	443b      	add	r3, r7
 8002044:	3b98      	subs	r3, #152	@ 0x98
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	33f0      	adds	r3, #240	@ 0xf0
 8002058:	443b      	add	r3, r7
 800205a:	3b94      	subs	r3, #148	@ 0x94
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	33f0      	adds	r3, #240	@ 0xf0
 800206e:	443b      	add	r3, r7
 8002070:	3b90      	subs	r3, #144	@ 0x90
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	33f0      	adds	r3, #240	@ 0xf0
 8002084:	443b      	add	r3, r7
 8002086:	3b8c      	subs	r3, #140	@ 0x8c
 8002088:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	33f0      	adds	r3, #240	@ 0xf0
 800209c:	443b      	add	r3, r7
 800209e:	3b88      	subs	r3, #136	@ 0x88
 80020a0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	33f0      	adds	r3, #240	@ 0xf0
 80020b4:	443b      	add	r3, r7
 80020b6:	3b84      	subs	r3, #132	@ 0x84
 80020b8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	33f0      	adds	r3, #240	@ 0xf0
 80020cc:	443b      	add	r3, r7
 80020ce:	3b80      	subs	r3, #128	@ 0x80
 80020d0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	33f0      	adds	r3, #240	@ 0xf0
 80020e4:	443b      	add	r3, r7
 80020e6:	3b7c      	subs	r3, #124	@ 0x7c
 80020e8:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 80020ec:	801a      	strh	r2, [r3, #0]
 80020ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	33f0      	adds	r3, #240	@ 0xf0
 80020fc:	443b      	add	r3, r7
 80020fe:	3b7a      	subs	r3, #122	@ 0x7a
 8002100:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	33f0      	adds	r3, #240	@ 0xf0
 8002114:	443b      	add	r3, r7
 8002116:	3b78      	subs	r3, #120	@ 0x78
 8002118:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800211c:	801a      	strh	r2, [r3, #0]
 800211e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	33f0      	adds	r3, #240	@ 0xf0
 800212c:	443b      	add	r3, r7
 800212e:	3b74      	subs	r3, #116	@ 0x74
 8002130:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800213a:	4613      	mov	r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	33f0      	adds	r3, #240	@ 0xf0
 8002144:	443b      	add	r3, r7
 8002146:	3b70      	subs	r3, #112	@ 0x70
 8002148:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	33f0      	adds	r3, #240	@ 0xf0
 800215c:	443b      	add	r3, r7
 800215e:	3b6c      	subs	r3, #108	@ 0x6c
 8002160:	6019      	str	r1, [r3, #0]
 8002162:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	33f0      	adds	r3, #240	@ 0xf0
 8002170:	443b      	add	r3, r7
 8002172:	3b68      	subs	r3, #104	@ 0x68
 8002174:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	33f0      	adds	r3, #240	@ 0xf0
 8002188:	443b      	add	r3, r7
 800218a:	3b68      	subs	r3, #104	@ 0x68
 800218c:	3304      	adds	r3, #4
 800218e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002196:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800219a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800219e:	3301      	adds	r3, #1
 80021a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <lfs_dir_traverse+0x2dc>)
 80021c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 80021c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	3328      	adds	r3, #40	@ 0x28
 80021dc:	440b      	add	r3, r1
 80021de:	3304      	adds	r3, #4
 80021e0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 80021e4:	e19e      	b.n	8002524 <lfs_dir_traverse+0x608>
 80021e6:	bf00      	nop
 80021e8:	7ff00000 	.word	0x7ff00000
 80021ec:	0800accc 	.word	0x0800accc
 80021f0:	0800b564 	.word	0x0800b564
 80021f4:	0800abd4 	.word	0x0800abd4
 80021f8:	08001e65 	.word	0x08001e65
            }
        }

popped:
 80021fc:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80021fe:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002202:	f7ff f987 	bl	8001514 <lfs_tag_id>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d015      	beq.n	8002238 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800220c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f980 	bl	8001514 <lfs_tag_id>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002218:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800221c:	4293      	cmp	r3, r2
 800221e:	f200 817c 	bhi.w	800251a <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f975 	bl	8001514 <lfs_tag_id>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8002232:	4293      	cmp	r3, r2
 8002234:	f240 8171 	bls.w	800251a <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f940 	bl	80014c0 <lfs_tag_type3>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	f43f ae74 	beq.w	8001f30 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f938 	bl	80014c0 <lfs_tag_type3>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	f240 1301 	movw	r3, #257	@ 0x101
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 80e0 	bne.w	800241e <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800225e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002262:	4ab1      	ldr	r2, [pc, #708]	@ (8002528 <lfs_dir_traverse+0x60c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	f000 815a 	beq.w	800251e <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800226a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	33f0      	adds	r3, #240	@ 0xf0
 8002278:	443b      	add	r3, r7
 800227a:	3b98      	subs	r3, #152	@ 0x98
 800227c:	4618      	mov	r0, r3
 800227e:	233c      	movs	r3, #60	@ 0x3c
 8002280:	461a      	mov	r2, r3
 8002282:	2100      	movs	r1, #0
 8002284:	f007 fe99 	bl	8009fba <memset>
 8002288:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800228c:	4613      	mov	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	33f0      	adds	r3, #240	@ 0xf0
 8002296:	443b      	add	r3, r7
 8002298:	3b98      	subs	r3, #152	@ 0x98
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	33f0      	adds	r3, #240	@ 0xf0
 80022ac:	443b      	add	r3, r7
 80022ae:	3b94      	subs	r3, #148	@ 0x94
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	33f0      	adds	r3, #240	@ 0xf0
 80022c2:	443b      	add	r3, r7
 80022c4:	3b90      	subs	r3, #144	@ 0x90
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	33f0      	adds	r3, #240	@ 0xf0
 80022d8:	443b      	add	r3, r7
 80022da:	3b8c      	subs	r3, #140	@ 0x8c
 80022dc:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022e6:	4613      	mov	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	33f0      	adds	r3, #240	@ 0xf0
 80022f0:	443b      	add	r3, r7
 80022f2:	3b88      	subs	r3, #136	@ 0x88
 80022f4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	33f0      	adds	r3, #240	@ 0xf0
 8002308:	443b      	add	r3, r7
 800230a:	3b84      	subs	r3, #132	@ 0x84
 800230c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	33f0      	adds	r3, #240	@ 0xf0
 8002320:	443b      	add	r3, r7
 8002322:	3b80      	subs	r3, #128	@ 0x80
 8002324:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	33f0      	adds	r3, #240	@ 0xf0
 8002338:	443b      	add	r3, r7
 800233a:	3b7c      	subs	r3, #124	@ 0x7c
 800233c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	33f0      	adds	r3, #240	@ 0xf0
 8002350:	443b      	add	r3, r7
 8002352:	3b7a      	subs	r3, #122	@ 0x7a
 8002354:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8002358:	801a      	strh	r2, [r3, #0]
 800235a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	33f0      	adds	r3, #240	@ 0xf0
 8002368:	443b      	add	r3, r7
 800236a:	3b78      	subs	r3, #120	@ 0x78
 800236c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	33f0      	adds	r3, #240	@ 0xf0
 8002380:	443b      	add	r3, r7
 8002382:	3b74      	subs	r3, #116	@ 0x74
 8002384:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	33f0      	adds	r3, #240	@ 0xf0
 8002398:	443b      	add	r3, r7
 800239a:	3b70      	subs	r3, #112	@ 0x70
 800239c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80023a0:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80023a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80023a6:	3301      	adds	r3, #1
 80023a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f8c0 	bl	8001534 <lfs_tag_size>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80023ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f8a9 	bl	8001514 <lfs_tag_id>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 80023c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023cc:	60bb      	str	r3, [r7, #8]
            off = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80023e4:	4b51      	ldr	r3, [pc, #324]	@ (800252c <lfs_dir_traverse+0x610>)
 80023e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80023ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 80023f2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80023f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 80023fa:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80023fe:	3301      	adds	r3, #1
 8002400:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8002404:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8002408:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	b29a      	uxth	r2, r3
 8002410:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8002414:	4413      	add	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800241c:	e588      	b.n	8001f30 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800241e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f84d 	bl	80014c0 <lfs_tag_type3>
 8002426:	4603      	mov	r3, r0
 8002428:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800242c:	d159      	bne.n	80024e2 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002434:	e04b      	b.n	80024ce <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8002436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800243a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800243e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	461a      	mov	r2, r3
 800244c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002458:	051c      	lsls	r4, r3, #20
 800245a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff f859 	bl	8001514 <lfs_tag_id>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800246a:	4413      	add	r3, r2
 800246c:	029b      	lsls	r3, r3, #10
 800246e:	ea44 0103 	orr.w	r1, r4, r3
 8002472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	461a      	mov	r2, r3
 8002480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002484:	4413      	add	r3, r2
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800248a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	461a      	mov	r2, r3
 8002498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800249c:	4413      	add	r3, r2
 800249e:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80024a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024a4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80024a8:	4798      	blx	r3
 80024aa:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 80024ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da02      	bge.n	80024bc <lfs_dir_traverse+0x5a0>
                    return res;
 80024b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024ba:	e10b      	b.n	80026d4 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80024bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d12e      	bne.n	8002522 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c8:	3301      	adds	r3, #1
 80024ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f82f 	bl	8001534 <lfs_tag_size>
 80024d6:	4602      	mov	r2, r0
 80024d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d3aa      	bcc.n	8002436 <lfs_dir_traverse+0x51a>
 80024e0:	e526      	b.n	8001f30 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80024e2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80024e6:	029a      	lsls	r2, r3, #10
 80024e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ea:	18d1      	adds	r1, r2, r3
 80024ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80024f4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80024f8:	4798      	blx	r3
 80024fa:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 80024fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002502:	2b00      	cmp	r3, #0
 8002504:	da02      	bge.n	800250c <lfs_dir_traverse+0x5f0>
                return res;
 8002506:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800250a:	e0e3      	b.n	80026d4 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 800250c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <lfs_dir_traverse+0x614>
 8002514:	e50c      	b.n	8001f30 <lfs_dir_traverse+0x14>
                continue;
 8002516:	bf00      	nop
 8002518:	e50a      	b.n	8001f30 <lfs_dir_traverse+0x14>
            continue;
 800251a:	bf00      	nop
 800251c:	e508      	b.n	8001f30 <lfs_dir_traverse+0x14>
                continue;
 800251e:	bf00      	nop
 8002520:	e506      	b.n	8001f30 <lfs_dir_traverse+0x14>
                    break;
 8002522:	bf00      	nop
        {
 8002524:	e504      	b.n	8001f30 <lfs_dir_traverse+0x14>
 8002526:	bf00      	nop
 8002528:	08001e65 	.word	0x08001e65
 800252c:	600ffc00 	.word	0x600ffc00
                break;
 8002530:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8002532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80ca 	beq.w	80026d0 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800253c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002540:	1e5a      	subs	r2, r3, #1
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	33f0      	adds	r3, #240	@ 0xf0
 800254c:	443b      	add	r3, r7
 800254e:	3b98      	subs	r3, #152	@ 0x98
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8002554:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	33f0      	adds	r3, #240	@ 0xf0
 8002564:	443b      	add	r3, r7
 8002566:	3b94      	subs	r3, #148	@ 0x94
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800256c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	33f0      	adds	r3, #240	@ 0xf0
 800257c:	443b      	add	r3, r7
 800257e:	3b90      	subs	r3, #144	@ 0x90
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002588:	1e5a      	subs	r2, r3, #1
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	33f0      	adds	r3, #240	@ 0xf0
 8002594:	443b      	add	r3, r7
 8002596:	3b8c      	subs	r3, #140	@ 0x8c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800259e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025a2:	1e5a      	subs	r2, r3, #1
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	33f0      	adds	r3, #240	@ 0xf0
 80025ae:	443b      	add	r3, r7
 80025b0:	3b88      	subs	r3, #136	@ 0x88
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 80025b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	33f0      	adds	r3, #240	@ 0xf0
 80025c8:	443b      	add	r3, r7
 80025ca:	3b84      	subs	r3, #132	@ 0x84
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 80025d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	33f0      	adds	r3, #240	@ 0xf0
 80025e2:	443b      	add	r3, r7
 80025e4:	3b80      	subs	r3, #128	@ 0x80
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 80025ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	33f0      	adds	r3, #240	@ 0xf0
 80025fc:	443b      	add	r3, r7
 80025fe:	3b7c      	subs	r3, #124	@ 0x7c
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8002606:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800260a:	1e5a      	subs	r2, r3, #1
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	33f0      	adds	r3, #240	@ 0xf0
 8002616:	443b      	add	r3, r7
 8002618:	3b7a      	subs	r3, #122	@ 0x7a
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 8002620:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	33f0      	adds	r3, #240	@ 0xf0
 8002630:	443b      	add	r3, r7
 8002632:	3b78      	subs	r3, #120	@ 0x78
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800263a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	33f0      	adds	r3, #240	@ 0xf0
 800264a:	443b      	add	r3, r7
 800264c:	3b74      	subs	r3, #116	@ 0x74
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 8002654:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	33f0      	adds	r3, #240	@ 0xf0
 8002664:	443b      	add	r3, r7
 8002666:	3b70      	subs	r3, #112	@ 0x70
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800266e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	33f0      	adds	r3, #240	@ 0xf0
 800267e:	443b      	add	r3, r7
 8002680:	3b6c      	subs	r3, #108	@ 0x6c
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 8002686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	33f0      	adds	r3, #240	@ 0xf0
 8002696:	443b      	add	r3, r7
 8002698:	3b68      	subs	r3, #104	@ 0x68
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 80026a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	33f0      	adds	r3, #240	@ 0xf0
 80026b0:	443b      	add	r3, r7
 80026b2:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 80026b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026ba:	3204      	adds	r2, #4
 80026bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026c0:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80026c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026c8:	3b01      	subs	r3, #1
 80026ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 80026ce:	e596      	b.n	80021fe <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80026d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	37f4      	adds	r7, #244	@ 0xf4
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}

080026dc <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b09f      	sub	sp, #124	@ 0x7c
 80026e0:	af04      	add	r7, sp, #16
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	667b      	str	r3, [r7, #100]	@ 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d207      	bcs.n	800270e <lfs_dir_fetchmatch+0x32>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800270e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8002712:	e342      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002714:	2300      	movs	r3, #0
 8002716:	633b      	str	r3, [r7, #48]	@ 0x30
 8002718:	2300      	movs	r3, #0
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
    int r = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; i < 2; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002724:	e052      	b.n	80027cc <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8002726:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002730:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002732:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002736:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800273c:	2104      	movs	r1, #4
 800273e:	9103      	str	r1, [sp, #12]
 8002740:	9202      	str	r2, [sp, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	9201      	str	r2, [sp, #4]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2304      	movs	r3, #4
 800274a:	4602      	mov	r2, r0
 800274c:	2100      	movs	r1, #0
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7fe faa4 	bl	8000c9c <lfs_bd_read>
 8002754:	63b8      	str	r0, [r7, #56]	@ 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8002756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	3368      	adds	r3, #104	@ 0x68
 800275c:	443b      	add	r3, r7
 800275e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fa2e 	bl	8000bc4 <lfs_fromle32>
 8002768:	4602      	mov	r2, r0
 800276a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	3368      	adds	r3, #104	@ 0x68
 8002770:	443b      	add	r3, r7
 8002772:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <lfs_dir_fetchmatch+0xac>
 800277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002782:	d001      	beq.n	8002788 <lfs_dir_fetchmatch+0xac>
            return err;
 8002784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002786:	e308      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800278e:	d01a      	beq.n	80027c6 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	3368      	adds	r3, #104	@ 0x68
 8002796:	443b      	add	r3, r7
 8002798:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800279c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800279e:	3301      	adds	r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	bfb8      	it	lt
 80027a8:	425b      	neglt	r3, r3
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	3368      	adds	r3, #104	@ 0x68
 80027ae:	443b      	add	r3, r7
 80027b0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f7fe f9f6 	bl	8000ba8 <lfs_scmp>
 80027bc:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80027be:	2b00      	cmp	r3, #0
 80027c0:	dd01      	ble.n	80027c6 <lfs_dir_fetchmatch+0xea>
            r = i;
 80027c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c4:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; i < 2; i++) {
 80027c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c8:	3301      	adds	r3, #1
 80027ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	dda9      	ble.n	8002726 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80027d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	bfb8      	it	lt
 80027dc:	425b      	neglt	r3, r3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80027ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ec:	3301      	adds	r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	bfb8      	it	lt
 80027f6:	425b      	neglt	r3, r3
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002804:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002806:	2b00      	cmp	r3, #0
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	bfb8      	it	lt
 800280e:	425b      	neglt	r3, r3
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	3368      	adds	r3, #104	@ 0x68
 8002814:	443b      	add	r3, r7
 8002816:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002824:	2300      	movs	r3, #0
 8002826:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002828:	e2a3      	b.n	8002d72 <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	657b      	str	r3, [r7, #84]	@ 0x54
        lfs_tag_t ptag = 0xffffffff;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	653b      	str	r3, [r7, #80]	@ 0x50

        uint16_t tempcount = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800283a:	4a96      	ldr	r2, [pc, #600]	@ (8002a94 <lfs_dir_fetchmatch+0x3b8>)
 800283c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002844:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
        lfs_stag_t tempbesttag = besttag;
 800284e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002850:	64bb      	str	r3, [r7, #72]	@ 0x48

        dir->rev = lfs_tole32(dir->rev);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe f9bf 	bl	8000bda <lfs_tole32>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3308      	adds	r3, #8
 8002866:	2204      	movs	r2, #4
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 30ff 	mov.w	r0, #4294967295
 800286e:	f004 fcb5 	bl	80071dc <lfs_crc>
 8002872:	4603      	mov	r3, r0
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f9a2 	bl	8000bc4 <lfs_fromle32>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002886:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002888:	f7fe fe61 	bl	800154e <lfs_tag_dsize>
 800288c:	4602      	mov	r2, r0
 800288e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002890:	4413      	add	r3, r2
 8002892:	657b      	str	r3, [r7, #84]	@ 0x54
            int err = lfs_bd_read(lfs,
 8002894:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800289a:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2204      	movs	r2, #4
 80028a2:	9203      	str	r2, [sp, #12]
 80028a4:	f107 0220 	add.w	r2, r7, #32
 80028a8:	9202      	str	r2, [sp, #8]
 80028aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80028ac:	9201      	str	r2, [sp, #4]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	460a      	mov	r2, r1
 80028b4:	2100      	movs	r1, #0
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7fe f9f0 	bl	8000c9c <lfs_bd_read>
 80028bc:	6438      	str	r0, [r7, #64]	@ 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80028be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80028c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80028ca:	d103      	bne.n	80028d4 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	759a      	strb	r2, [r3, #22]
                    break;
 80028d2:	e1d6      	b.n	8002c82 <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80028d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d6:	e260      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	f107 0120 	add.w	r1, r7, #32
 80028de:	2204      	movs	r2, #4
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fc7b 	bl	80071dc <lfs_crc>
 80028e6:	4603      	mov	r3, r0
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f980 	bl	8000bf2 <lfs_frombe32>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f6:	4053      	eors	r3, r2
 80028f8:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fdae 	bl	800145e <lfs_tag_isvalid>
 8002902:	4603      	mov	r3, r0
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01b      	beq.n	8002946 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800290e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002910:	f7fe fdc6 	bl	80014a0 <lfs_tag_type1>
 8002914:	4603      	mov	r3, r0
 8002916:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800291a:	d10d      	bne.n	8002938 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002924:	6992      	ldr	r2, [r2, #24]
 8002926:	fbb3 f1f2 	udiv	r1, r3, r2
 800292a:	fb01 f202 	mul.w	r2, r1, r2
 800292e:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <lfs_dir_fetchmatch+0x25c>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <lfs_dir_fetchmatch+0x25e>
 8002938:	2300      	movs	r3, #0
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	759a      	strb	r2, [r3, #22]
                break;
 8002944:	e19d      	b.n	8002c82 <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fe00 	bl	800154e <lfs_tag_dsize>
 800294e:	4602      	mov	r2, r0
 8002950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	429a      	cmp	r2, r3
 800295c:	d903      	bls.n	8002966 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	759a      	strb	r2, [r3, #22]
                break;
 8002964:	e18d      	b.n	8002c82 <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	653b      	str	r3, [r7, #80]	@ 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fd97 	bl	80014a0 <lfs_tag_type1>
 8002972:	4603      	mov	r3, r0
 8002974:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002978:	d164      	bne.n	8002a44 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800297a:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002980:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002988:	3204      	adds	r2, #4
 800298a:	2104      	movs	r1, #4
 800298c:	9103      	str	r1, [sp, #12]
 800298e:	f107 011c 	add.w	r1, r7, #28
 8002992:	9102      	str	r1, [sp, #8]
 8002994:	9201      	str	r2, [sp, #4]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4623      	mov	r3, r4
 800299a:	4602      	mov	r2, r0
 800299c:	2100      	movs	r1, #0
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7fe f97c 	bl	8000c9c <lfs_bd_read>
 80029a4:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80029a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80029ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ae:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80029b2:	d103      	bne.n	80029bc <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	759a      	strb	r2, [r3, #22]
                        break;
 80029ba:	e162      	b.n	8002c82 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80029bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                return err;
 80029be:	e1ec      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f8fe 	bl	8000bc4 <lfs_fromle32>
 80029c8:	4603      	mov	r3, r0
 80029ca:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80029cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d003      	beq.n	80029dc <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	759a      	strb	r2, [r3, #22]
                    break;
 80029da:	e152      	b.n	8002c82 <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fd7e 	bl	80014e0 <lfs_tag_chunk>
 80029e4:	4603      	mov	r3, r0
 80029e6:	07db      	lsls	r3, r3, #31
 80029e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80029ea:	4053      	eors	r3, r2
 80029ec:	653b      	str	r3, [r7, #80]	@ 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80029f6:	2204      	movs	r2, #4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f004 fbef 	bl	80071dc <lfs_crc>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a06:	667b      	str	r3, [r7, #100]	@ 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fd9f 	bl	800154e <lfs_tag_dsize>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a14:	441a      	add	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a1e:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002a26:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002a3a:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a42:	e720      	b.n	8002886 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002a44:	2304      	movs	r3, #4
 8002a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a48:	e032      	b.n	8002ab0 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8002a4a:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a50:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a5a:	440a      	add	r2, r1
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	9103      	str	r1, [sp, #12]
 8002a60:	f107 011b 	add.w	r1, r7, #27
 8002a64:	9102      	str	r1, [sp, #8]
 8002a66:	9201      	str	r2, [sp, #4]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7fe f913 	bl	8000c9c <lfs_bd_read>
 8002a76:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8002a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00c      	beq.n	8002a98 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 8002a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a80:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002a84:	d103      	bne.n	8002a8e <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	759a      	strb	r2, [r3, #22]
 8002a8c:	e018      	b.n	8002ac0 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                return err;
 8002a90:	e183      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
 8002a92:	bf00      	nop
 8002a94:	0800ad0c 	.word	0x0800ad0c
                }

                crc = lfs_crc(crc, &dat, 1);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	f107 011b 	add.w	r1, r7, #27
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 fb9b 	bl	80071dc <lfs_crc>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aac:	3301      	adds	r3, #1
 8002aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fd4b 	bl	800154e <lfs_tag_dsize>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d3c4      	bcc.n	8002a4a <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fcec 	bl	80014a0 <lfs_tag_type1>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d113      	bne.n	8002af6 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fd1f 	bl	8001514 <lfs_tag_id>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	f200 8083 	bhi.w	8002bea <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fd14 	bl	8001514 <lfs_tag_id>
 8002aec:	4603      	mov	r3, r0
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002af4:	e079      	b.n	8002bea <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fcd1 	bl	80014a0 <lfs_tag_type1>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b04:	d134      	bne.n	8002b70 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fcf6 	bl	80014fa <lfs_tag_splice>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b16:	4413      	add	r3, r2
 8002b18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002b1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b1e:	4ba1      	ldr	r3, [pc, #644]	@ (8002da4 <lfs_dir_fetchmatch+0x6c8>)
 8002b20:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002b22:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8002b26:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d104      	bne.n	8002b3a <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 8002b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b38:	e057      	b.n	8002bea <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d053      	beq.n	8002bea <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fce5 	bl	8001514 <lfs_tag_id>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461c      	mov	r4, r3
 8002b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fcdf 	bl	8001514 <lfs_tag_id>
 8002b56:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002b58:	429c      	cmp	r4, r3
 8002b5a:	d846      	bhi.n	8002bea <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fccb 	bl	80014fa <lfs_tag_splice>
 8002b64:	4603      	mov	r3, r0
 8002b66:	029a      	lsls	r2, r3, #10
 8002b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6a:	4413      	add	r3, r2
 8002b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b6e:	e03c      	b.n	8002bea <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fc94 	bl	80014a0 <lfs_tag_type1>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b7e:	d134      	bne.n	8002bea <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fcac 	bl	80014e0 <lfs_tag_chunk>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

                err = lfs_bd_read(lfs,
 8002b9a:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ba8:	3204      	adds	r2, #4
 8002baa:	2108      	movs	r1, #8
 8002bac:	9103      	str	r1, [sp, #12]
 8002bae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002bb2:	9102      	str	r1, [sp, #8]
 8002bb4:	9201      	str	r2, [sp, #4]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	4623      	mov	r3, r4
 8002bba:	4602      	mov	r2, r0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7fe f86c 	bl	8000c9c <lfs_bd_read>
 8002bc4:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8002bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bce:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002bd2:	d103      	bne.n	8002bdc <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	759a      	strb	r2, [r3, #22]
                        break;
 8002bda:	e052      	b.n	8002c82 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bde:	e0dc      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8002be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fc06 	bl	80013f6 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bee:	405a      	eors	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f ae46 	bne.w	8002886 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002bfa:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c00:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8002c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c04:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f107 0210 	add.w	r2, r7, #16
 8002c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c10:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002c14:	4798      	blx	r3
 8002c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
                if (res < 0) {
 8002c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da09      	bge.n	8002c32 <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c20:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002c24:	d103      	bne.n	8002c2e <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	759a      	strb	r2, [r3, #22]
 8002c2c:	e029      	b.n	8002c82 <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                return err;
 8002c30:	e0b3      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8002c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c3c:	e623      	b.n	8002886 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002c3e:	6a3a      	ldr	r2, [r7, #32]
 8002c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c42:	405a      	eors	r2, r3
 8002c44:	4b58      	ldr	r3, [pc, #352]	@ (8002da8 <lfs_dir_fetchmatch+0x6cc>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c52:	e618      	b.n	8002886 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8002c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f47f ae15 	bne.w	8002886 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fc58 	bl	8001514 <lfs_tag_id>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461c      	mov	r4, r3
 8002c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fc52 	bl	8001514 <lfs_tag_id>
 8002c70:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002c72:	429c      	cmp	r4, r3
 8002c74:	f63f ae07 	bhi.w	8002886 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c80:	e601      	b.n	8002886 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d100      	bne.n	8002c8c <lfs_dir_fetchmatch+0x5b0>
 8002c8a:	e05d      	b.n	8002d48 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	333c      	adds	r3, #60	@ 0x3c
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fce5 	bl	8001664 <lfs_gstate_hasmovehere>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d028      	beq.n	8002cf2 <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fc35 	bl	8001514 <lfs_tag_id>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461c      	mov	r4, r3
 8002cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fc2f 	bl	8001514 <lfs_tag_id>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	429c      	cmp	r4, r3
 8002cba:	d104      	bne.n	8002cc6 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8002cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cc4:	e015      	b.n	8002cf2 <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8002cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d011      	beq.n	8002cf2 <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fc1e 	bl	8001514 <lfs_tag_id>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461c      	mov	r4, r3
 8002cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fc18 	bl	8001514 <lfs_tag_id>
 8002ce4:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8002ce6:	429c      	cmp	r4, r3
 8002ce8:	d203      	bcs.n	8002cf2 <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8002cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cec:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002cf0:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8002cf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00f      	beq.n	8002d18 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002cf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fc0a 	bl	8001514 <lfs_tag_id>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	8a9b      	ldrh	r3, [r3, #20]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f7fd feea 	bl	8000ae4 <lfs_min>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d16:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8002d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fb9f 	bl	800145e <lfs_tag_isvalid>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8002d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d28:	e037      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8002d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fbf1 	bl	8001514 <lfs_tag_id>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	8a9b      	ldrh	r3, [r3, #20]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d202      	bcs.n	8002d44 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8002d3e:	f06f 0301 	mvn.w	r3, #1
 8002d42:	e02a      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e028      	b.n	8002d9a <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe facc 	bl	80012e8 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8002d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d52:	3301      	adds	r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	bfb8      	it	lt
 8002d5c:	425b      	neglt	r3, r3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	3368      	adds	r3, #104	@ 0x68
 8002d62:	443b      	add	r3, r7
 8002d64:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002d6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d6e:	3301      	adds	r3, #1
 8002d70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	f77f ad58 	ble.w	800282a <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	490a      	ldr	r1, [pc, #40]	@ (8002dac <lfs_dir_fetchmatch+0x6d0>)
 8002d84:	9101      	str	r1, [sp, #4]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8002d8e:	4908      	ldr	r1, [pc, #32]	@ (8002db0 <lfs_dir_fetchmatch+0x6d4>)
 8002d90:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <lfs_dir_fetchmatch+0x6d8>)
 8002d92:	f007 f8ad 	bl	8009ef0 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002d96:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	376c      	adds	r7, #108	@ 0x6c
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}
 8002da2:	bf00      	nop
 8002da4:	000ffc00 	.word	0x000ffc00
 8002da8:	7ffffc00 	.word	0x7ffffc00
 8002dac:	0800acc8 	.word	0x0800acc8
 8002db0:	0800abd4 	.word	0x0800abd4
 8002db4:	0800acd4 	.word	0x0800acd4

08002db8 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9303      	str	r3, [sp, #12]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff fc7c 	bl	80026dc <lfs_dir_fetchmatch>
 8002de4:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	@ 0x28
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <lfs_dir_getgstate+0x5c>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <lfs_dir_getgstate+0x60>)
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7fe ff35 	bl	8001c78 <lfs_dir_get>
 8002e0e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da05      	bge.n	8002e22 <lfs_dir_getgstate+0x32>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f113 0f02 	cmn.w	r3, #2
 8002e1c:	d001      	beq.n	8002e22 <lfs_dir_getgstate+0x32>
        return res;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	e00f      	b.n	8002e42 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f113 0f02 	cmn.w	r3, #2
 8002e28:	d00a      	beq.n	8002e40 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fc38 	bl	80016a4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fb9b 	bl	8001576 <lfs_gstate_xor>
    }

    return 0;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	7ff0000c 	.word	0x7ff0000c
 8002e50:	7ff00000 	.word	0x7ff00000

08002e54 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b08f      	sub	sp, #60	@ 0x3c
 8002e58:	af04      	add	r7, sp, #16
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	689c      	ldr	r4, [r3, #8]
 8002e72:	68b8      	ldr	r0, [r7, #8]
 8002e74:	f7fe fb5e 	bl	8001534 <lfs_tag_size>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f7fd fe31 	bl	8000ae4 <lfs_min>
 8002e82:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002e84:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8002e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e90:	6849      	ldr	r1, [r1, #4]
 8002e92:	69b8      	ldr	r0, [r7, #24]
 8002e94:	9003      	str	r0, [sp, #12]
 8002e96:	9102      	str	r1, [sp, #8]
 8002e98:	9201      	str	r2, [sp, #4]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	6a38      	ldr	r0, [r7, #32]
 8002ea4:	f7fe f83e 	bl	8000f24 <lfs_bd_cmp>
 8002ea8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <lfs_dir_find_match+0x60>
        return res;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	e014      	b.n	8002ede <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	689c      	ldr	r4, [r3, #8]
 8002eb8:	68b8      	ldr	r0, [r7, #8]
 8002eba:	f7fe fb3b 	bl	8001534 <lfs_tag_size>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	429c      	cmp	r4, r3
 8002ec2:	d00b      	beq.n	8002edc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	689c      	ldr	r4, [r3, #8]
 8002ec8:	68b8      	ldr	r0, [r7, #8]
 8002eca:	f7fe fb33 	bl	8001534 <lfs_tag_size>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	429c      	cmp	r4, r3
 8002ed2:	d201      	bcs.n	8002ed8 <lfs_dir_find_match+0x84>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e002      	b.n	8002ede <lfs_dir_find_match+0x8a>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e000      	b.n	8002ede <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	372c      	adds	r7, #44	@ 0x2c
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
	...

08002ee8 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b093      	sub	sp, #76	@ 0x4c
 8002eec:	af04      	add	r7, sp, #16
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002f08:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80030c4 <lfs_dir_find+0x1dc>)
 8002f0c:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002f1e:	496a      	ldr	r1, [pc, #424]	@ (80030c8 <lfs_dir_find+0x1e0>)
 8002f20:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f22:	f007 f870 	bl	800a006 <strspn>
 8002f26:	4602      	mov	r2, r0
 8002f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2a:	4413      	add	r3, r2
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002f2e:	4966      	ldr	r1, [pc, #408]	@ (80030c8 <lfs_dir_find+0x1e0>)
 8002f30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f32:	f007 f857 	bl	8009fe4 <strcspn>
 8002f36:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <lfs_dir_find+0x62>
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	4b62      	ldr	r3, [pc, #392]	@ (80030cc <lfs_dir_find+0x1e4>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d00a      	beq.n	8002f60 <lfs_dir_find+0x78>
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d10c      	bne.n	8002f6a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002f50:	2202      	movs	r2, #2
 8002f52:	495f      	ldr	r1, [pc, #380]	@ (80030d0 <lfs_dir_find+0x1e8>)
 8002f54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f56:	f007 f820 	bl	8009f9a <memcmp>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <lfs_dir_find+0x82>
            name += namelen;
 8002f60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	4413      	add	r3, r2
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8002f68:	e7d9      	b.n	8002f1e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002f6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	4413      	add	r3, r2
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002f76:	4954      	ldr	r1, [pc, #336]	@ (80030c8 <lfs_dir_find+0x1e0>)
 8002f78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f7a:	f007 f844 	bl	800a006 <strspn>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f82:	4413      	add	r3, r2
 8002f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 8002f86:	4950      	ldr	r1, [pc, #320]	@ (80030c8 <lfs_dir_find+0x1e0>)
 8002f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f8a:	f007 f82b 	bl	8009fe4 <strcspn>
 8002f8e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01d      	beq.n	8002fd2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d112      	bne.n	8002fc2 <lfs_dir_find+0xda>
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	494c      	ldr	r1, [pc, #304]	@ (80030d0 <lfs_dir_find+0x1e8>)
 8002fa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fa2:	f006 fffa 	bl	8009f9a <memcmp>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <lfs_dir_find+0xda>
                depth -= 1;
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8002fc0:	e7ad      	b.n	8002f1e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8002fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	4413      	add	r3, r2
 8002fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8002fd0:	e7d1      	b.n	8002f76 <lfs_dir_find+0x8e>
                break;
 8002fd2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <lfs_dir_find+0xf8>
            return tag;
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fde:	e06c      	b.n	80030ba <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe4:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fa69 	bl	80014c0 <lfs_tag_type3>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d002      	beq.n	8002ffa <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8002ff4:	f06f 0313 	mvn.w	r3, #19
 8002ff8:	e05f      	b.n	80030ba <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe fa89 	bl	8001514 <lfs_tag_id>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800300a:	429a      	cmp	r2, r3
 800300c:	d01c      	beq.n	8003048 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe fa7f 	bl	8001514 <lfs_tag_id>
 8003016:	4603      	mov	r3, r0
 8003018:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800301a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800301e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003026:	9200      	str	r2, [sp, #0]
 8003028:	4a2a      	ldr	r2, [pc, #168]	@ (80030d4 <lfs_dir_find+0x1ec>)
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7fe fe23 	bl	8001c78 <lfs_dir_get>
 8003032:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	da01      	bge.n	800303e <lfs_dir_find+0x156>
                return res;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	e03d      	b.n	80030ba <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3318      	adds	r3, #24
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f9d7 	bl	80013f6 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800304e:	212f      	movs	r1, #47	@ 0x2f
 8003050:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003052:	f006 ffba 	bl	8009fca <strchr>
 8003056:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <lfs_dir_find+0x178>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	e000      	b.n	8003062 <lfs_dir_find+0x17a>
 8003060:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	613a      	str	r2, [r7, #16]
 8003066:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003068:	617a      	str	r2, [r7, #20]
 800306a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800306e:	f107 0210 	add.w	r2, r7, #16
 8003072:	9203      	str	r2, [sp, #12]
 8003074:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <lfs_dir_find+0x1f0>)
 8003076:	9202      	str	r2, [sp, #8]
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 8003082:	4622      	mov	r2, r4
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff fb28 	bl	80026dc <lfs_dir_fetchmatch>
 800308c:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	da01      	bge.n	8003098 <lfs_dir_find+0x1b0>
                return tag;
 8003094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003096:	e010      	b.n	80030ba <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800309e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	4413      	add	r3, r2
 80030a4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80030a6:	e73a      	b.n	8002f1e <lfs_dir_find+0x36>
            if (!dir->split) {
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	7ddb      	ldrb	r3, [r3, #23]
 80030ac:	f083 0301 	eor.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0c8      	beq.n	8003048 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80030b6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	373c      	adds	r7, #60	@ 0x3c
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	002ffc00 	.word	0x002ffc00
 80030c8:	0800ad14 	.word	0x0800ad14
 80030cc:	0800ad18 	.word	0x0800ad18
 80030d0:	0800ad1c 	.word	0x0800ad1c
 80030d4:	700ffc00 	.word	0x700ffc00
 80030d8:	08002e55 	.word	0x08002e55

080030dc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b08b      	sub	sp, #44	@ 0x2c
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f103 0010 	add.w	r0, r3, #16
 80030f0:	68fc      	ldr	r4, [r7, #12]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	6852      	ldr	r2, [r2, #4]
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	9103      	str	r1, [sp, #12]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	9102      	str	r1, [sp, #8]
 8003102:	9201      	str	r2, [sp, #4]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	4622      	mov	r2, r4
 800310a:	4601      	mov	r1, r0
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7fe f80b 	bl	8001128 <lfs_bd_prog>
 8003112:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <lfs_dir_commitprog+0x42>
        return err;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	e010      	b.n	8003140 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	f004 f858 	bl	80071dc <lfs_crc>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	441a      	add	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	605a      	str	r2, [r3, #4]
    return 0;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd90      	pop	{r4, r7, pc}

08003148 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08f      	sub	sp, #60	@ 0x3c
 800314c:	af04      	add	r7, sp, #16
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe f9f9 	bl	800154e <lfs_tag_dsize>
 800315c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	441a      	add	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	429a      	cmp	r2, r3
 800316c:	d902      	bls.n	8003174 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800316e:	f06f 031b 	mvn.w	r3, #27
 8003172:	e065      	b.n	8003240 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4053      	eors	r3, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd fd42 	bl	8000c0a <lfs_tobe32>
 8003186:	4603      	mov	r3, r0
 8003188:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800318a:	f107 0214 	add.w	r2, r7, #20
 800318e:	2304      	movs	r3, #4
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff ffa2 	bl	80030dc <lfs_dir_commitprog>
 8003198:	61f8      	str	r0, [r7, #28]
    if (err) {
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <lfs_dir_commitattr+0x5c>
        return err;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	e04d      	b.n	8003240 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0c      	blt.n	80031c4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	3b04      	subs	r3, #4
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff ff92 	bl	80030dc <lfs_dir_commitprog>
 80031b8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d039      	beq.n	8003234 <lfs_dir_commitattr+0xec>
            return err;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	e03d      	b.n	8003240 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80031cc:	e02d      	b.n	800322a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80031ce:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80031d6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80031e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e2:	440a      	add	r2, r1
 80031e4:	2101      	movs	r1, #1
 80031e6:	9103      	str	r1, [sp, #12]
 80031e8:	f107 0113 	add.w	r1, r7, #19
 80031ec:	9102      	str	r1, [sp, #8]
 80031ee:	9201      	str	r2, [sp, #4]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4623      	mov	r3, r4
 80031f4:	4602      	mov	r2, r0
 80031f6:	2100      	movs	r1, #0
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7fd fd4f 	bl	8000c9c <lfs_bd_read>
 80031fe:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <lfs_dir_commitattr+0xc2>
                return err;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	e01a      	b.n	8003240 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800320a:	f107 0213 	add.w	r2, r7, #19
 800320e:	2301      	movs	r3, #1
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7ff ff62 	bl	80030dc <lfs_dir_commitprog>
 8003218:	61f8      	str	r0, [r7, #28]
            if (err) {
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <lfs_dir_commitattr+0xdc>
                return err;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	e00d      	b.n	8003240 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	3301      	adds	r3, #1
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	3b04      	subs	r3, #4
 800322e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003230:	429a      	cmp	r2, r3
 8003232:	d3cc      	bcc.n	80031ce <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
    return 0;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	372c      	adds	r7, #44	@ 0x2c
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}

08003248 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b097      	sub	sp, #92	@ 0x5c
 800324c:	af04      	add	r7, sp, #16
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800325e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f7fd fc63 	bl	8000b2e <lfs_alignup>
 8003268:	62b8      	str	r0, [r7, #40]	@ 0x28

    lfs_off_t off1 = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8003272:	e0a6      	b.n	80033c2 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800327c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd fc2c 	bl	8000ae4 <lfs_min>
 800328c:	4602      	mov	r2, r0
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	4413      	add	r3, r2
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (noff < end) {
 8003294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003298:	429a      	cmp	r2, r3
 800329a:	d206      	bcs.n	80032aa <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	3b08      	subs	r3, #8
 80032a0:	4619      	mov	r1, r3
 80032a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80032a4:	f7fd fc1e 	bl	8000ae4 <lfs_min>
 80032a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2204      	movs	r2, #4
 80032b8:	9203      	str	r2, [sp, #12]
 80032ba:	f107 0214 	add.w	r2, r7, #20
 80032be:	9202      	str	r2, [sp, #8]
 80032c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032c2:	9201      	str	r2, [sp, #4]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2304      	movs	r3, #4
 80032c8:	460a      	mov	r2, r1
 80032ca:	2100      	movs	r1, #0
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd fce5 	bl	8000c9c <lfs_bd_read>
 80032d2:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <lfs_dir_commitcrc+0x9e>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80032e0:	d001      	beq.n	80032e6 <lfs_dir_commitcrc+0x9e>
            return err;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	e0e8      	b.n	80034b8 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd fc82 	bl	8000bf2 <lfs_frombe32>
 80032ee:	4603      	mov	r3, r0
 80032f0:	43db      	mvns	r3, r3
 80032f2:	0fdb      	lsrs	r3, r3, #31
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 80032fe:	7efb      	ldrb	r3, [r7, #27]
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	051a      	lsls	r2, r3, #20
 8003306:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	1acb      	subs	r3, r1, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 8003312:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8003316:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	4053      	eors	r3, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fc72 	bl	8000c0a <lfs_tobe32>
 8003326:	4603      	mov	r3, r0
 8003328:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f107 010c 	add.w	r1, r7, #12
 8003332:	2204      	movs	r2, #4
 8003334:	4618      	mov	r0, r3
 8003336:	f003 ff51 	bl	80071dc <lfs_crc>
 800333a:	4602      	mov	r2, r0
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fc48 	bl	8000bda <lfs_tole32>
 800334a:	4603      	mov	r3, r0
 800334c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f103 0010 	add.w	r0, r3, #16
 8003354:	687c      	ldr	r4, [r7, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6852      	ldr	r2, [r2, #4]
 800335e:	2108      	movs	r1, #8
 8003360:	9103      	str	r1, [sp, #12]
 8003362:	f107 010c 	add.w	r1, r7, #12
 8003366:	9102      	str	r1, [sp, #8]
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	4622      	mov	r2, r4
 8003370:	4601      	mov	r1, r0
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fed8 	bl	8001128 <lfs_bd_prog>
 8003378:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <lfs_dir_commitcrc+0x13c>
            return err;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	e099      	b.n	80034b8 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe f8ca 	bl	8001534 <lfs_tag_size>
 80033a0:	4603      	mov	r3, r0
 80033a2:	1d1a      	adds	r2, r3, #4
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	441a      	add	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80033ae:	7efb      	ldrb	r3, [r7, #27]
 80033b0:	07da      	lsls	r2, r3, #31
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	405a      	eors	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295
 80033c0:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f63f af53 	bhi.w	8003274 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f103 0110 	add.w	r1, r3, #16
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	2300      	movs	r3, #0
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fd fe71 	bl	80010c0 <lfs_bd_sync>
 80033de:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <lfs_dir_commitcrc+0x1a2>
        return err;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	e066      	b.n	80034b8 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    lfs_off_t noff = off1;
 80033f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033f2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (off < end) {
 80033f4:	e05b      	b.n	80034ae <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80033fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003400:	e030      	b.n	8003464 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8003402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003406:	429a      	cmp	r2, r3
 8003408:	d106      	bne.n	8003418 <lfs_dir_commitcrc+0x1d0>
 800340a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800340c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340e:	429a      	cmp	r2, r3
 8003410:	d002      	beq.n	8003418 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8003412:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003416:	e04f      	b.n	80034b8 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003418:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800341a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003420:	1d18      	adds	r0, r3, #4
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2201      	movs	r2, #1
 8003428:	9203      	str	r2, [sp, #12]
 800342a:	f107 020b 	add.w	r2, r7, #11
 800342e:	9202      	str	r2, [sp, #8]
 8003430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003432:	9201      	str	r2, [sp, #4]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	4603      	mov	r3, r0
 8003438:	460a      	mov	r2, r1
 800343a:	2100      	movs	r1, #0
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd fc2d 	bl	8000c9c <lfs_bd_read>
 8003442:	6278      	str	r0, [r7, #36]	@ 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <lfs_dir_commitcrc+0x206>
                return err;
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	e034      	b.n	80034b8 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800344e:	f107 030b 	add.w	r3, r7, #11
 8003452:	2201      	movs	r2, #1
 8003454:	4619      	mov	r1, r3
 8003456:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003458:	f003 fec0 	bl	80071dc <lfs_crc>
 800345c:	6338      	str	r0, [r7, #48]	@ 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	3301      	adds	r3, #1
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003466:	3304      	adds	r3, #4
 8003468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346a:	429a      	cmp	r2, r3
 800346c:	d3c9      	bcc.n	8003402 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8003474:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003478:	e01e      	b.n	80034b8 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800347a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fb2d 	bl	8000ae4 <lfs_min>
 800348a:	4602      	mov	r2, r0
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	4413      	add	r3, r2
 8003490:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (off < end) {
 8003492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	429a      	cmp	r2, r3
 8003498:	d206      	bcs.n	80034a8 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	3b08      	subs	r3, #8
 800349e:	4619      	mov	r1, r3
 80034a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034a2:	f7fd fb1f 	bl	8000ae4 <lfs_min>
 80034a6:	63b8      	str	r0, [r7, #56]	@ 0x38
        }
        noff = off + sizeof(uint32_t);
 80034a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034aa:	3304      	adds	r3, #4
 80034ac:	637b      	str	r3, [r7, #52]	@ 0x34
    while (off < end) {
 80034ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d39f      	bcc.n	80033f6 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	374c      	adds	r7, #76	@ 0x4c
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}

080034c0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af04      	add	r7, sp, #16
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e016      	b.n	80034fe <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	bfb8      	it	lt
 80034dc:	425b      	neglt	r3, r3
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe fa2c 	bl	8001944 <lfs_alloc>
 80034ec:	60f8      	str	r0, [r7, #12]
        if (err) {
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <lfs_dir_alloc+0x38>
            return err;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	e058      	b.n	80035aa <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3301      	adds	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	dde5      	ble.n	80034d0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003514:	2004      	movs	r0, #4
 8003516:	9003      	str	r0, [sp, #12]
 8003518:	9202      	str	r2, [sp, #8]
 800351a:	2200      	movs	r2, #0
 800351c:	9201      	str	r2, [sp, #4]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2304      	movs	r3, #4
 8003522:	460a      	mov	r2, r1
 8003524:	2100      	movs	r1, #0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fbb8 	bl	8000c9c <lfs_bd_read>
 800352c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fb46 	bl	8000bc4 <lfs_fromle32>
 8003538:	4602      	mov	r2, r0
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <lfs_dir_alloc+0x90>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800354a:	d001      	beq.n	8003550 <lfs_dir_alloc+0x90>
        return err;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	e02c      	b.n	80035aa <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	dd0e      	ble.n	8003578 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	3301      	adds	r3, #1
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	4619      	mov	r1, r3
 800356c:	4610      	mov	r0, r2
 800356e:	f7fd fade 	bl	8000b2e <lfs_alignup>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2204      	movs	r2, #4
 800357c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f04f 32ff 	mov.w	r2, #4294967295
 8003592:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f04f 32ff 	mov.w	r2, #4294967295
 800359a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	@ 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3348      	adds	r3, #72	@ 0x48
 80035c4:	461a      	mov	r2, r3
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff fc11 	bl	8002df0 <lfs_dir_getgstate>
 80035ce:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <lfs_dir_drop+0x26>
        return err;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	e022      	b.n	8003620 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3318      	adds	r3, #24
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd ff23 	bl	800142a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7ddb      	ldrb	r3, [r3, #23]
 80035e8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80035ec:	051a      	lsls	r2, r3, #20
 80035ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <lfs_dir_drop+0x74>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3318      	adds	r3, #24
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	f107 021c 	add.w	r2, r7, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f001 f978 	bl	80048f8 <lfs_dir_commit>
 8003608:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3318      	adds	r3, #24
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fef1 	bl	80013f6 <lfs_pair_fromle32>
    if (err) {
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <lfs_dir_drop+0x6a>
        return err;
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	e000      	b.n	8003620 <lfs_dir_drop+0x6c>
    }

    return 0;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	@ 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	000ffc08 	.word	0x000ffc08

0800362c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b092      	sub	sp, #72	@ 0x48
 8003630:	af04      	add	r7, sp, #16
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800363a:	f107 0310 	add.w	r3, r7, #16
 800363e:	4619      	mov	r1, r3
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7ff ff3d 	bl	80034c0 <lfs_dir_alloc>
 8003646:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8003648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <lfs_dir_split+0x26>
        return err;
 800364e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003650:	e03c      	b.n	80036cc <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	7ddb      	ldrb	r3, [r3, #23]
 8003656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003666:	f107 0110 	add.w	r1, r7, #16
 800366a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800366e:	9302      	str	r3, [sp, #8]
 8003670:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f87a 	bl	8003778 <lfs_dir_compact>
 8003684:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	2b00      	cmp	r3, #0
 800368a:	da01      	bge.n	8003690 <lfs_dir_split+0x64>
        return res;
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	e01d      	b.n	80036cc <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2201      	movs	r2, #1
 80036a0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3320      	adds	r3, #32
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f7fd fe4c 	bl	8001348 <lfs_pair_cmp>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <lfs_dir_split+0x9e>
 80036b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3738      	adds	r7, #56	@ 0x38
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80036e4:	68b8      	ldr	r0, [r7, #8]
 80036e6:	f7fd ff32 	bl	800154e <lfs_tag_dsize>
 80036ea:	4602      	mov	r2, r0
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	441a      	add	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	601a      	str	r2, [r3, #0]
    return 0;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	f7ff fd14 	bl	8003148 <lfs_dir_commitattr>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800373a:	2b00      	cmp	r3, #0
 800373c:	dd11      	ble.n	8003762 <lfs_dir_needsrelocation+0x38>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	3301      	adds	r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800374a:	3201      	adds	r2, #1
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	fbb3 f1f2 	udiv	r1, r3, r2
 8003754:	fb01 f202 	mul.w	r2, r1, r2
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <lfs_dir_needsrelocation+0x38>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <lfs_dir_needsrelocation+0x3a>
 8003762:	2300      	movs	r3, #0
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b0a4      	sub	sp, #144	@ 0x90
 800377c:	af0a      	add	r7, sp, #40	@ 0x28
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003786:	2300      	movs	r3, #0
 8003788:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff ffcb 	bl	800372a <lfs_dir_needsrelocation>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80037a4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <lfs_dir_compact+0x52>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	657a      	str	r2, [r7, #84]	@ 0x54
 80037b2:	2201      	movs	r2, #1
 80037b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037b6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fdc3 	bl	8001348 <lfs_pair_cmp>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 8155 	bne.w	8003a74 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037d0:	2300      	movs	r3, #0
 80037d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e0:	2300      	movs	r3, #0
 80037e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <lfs_dir_compact+0x80>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f4:	3b08      	subs	r3, #8
 80037f6:	e003      	b.n	8003800 <lfs_dir_compact+0x88>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003800:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4619      	mov	r1, r3
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7fd fd3b 	bl	8001284 <lfs_bd_erase>
 800380e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8003810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003818:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800381c:	f000 812c 	beq.w	8003a78 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003822:	e188      	b.n	8003b36 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd f9d6 	bl	8000bda <lfs_tole32>
 800382e:	4602      	mov	r2, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800383a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800383e:	2304      	movs	r3, #4
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fc4b 	bl	80030dc <lfs_dir_commitprog>
 8003846:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd f9b9 	bl	8000bc4 <lfs_fromle32>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]
            if (err) {
 8003858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800385e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003860:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003864:	f000 810a 	beq.w	8003a7c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800386a:	e164      	b.n	8003b36 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800386c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003870:	425b      	negs	r3, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	637a      	str	r2, [r7, #52]	@ 0x34
 800387a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800387e:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8003880:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003884:	9208      	str	r2, [sp, #32]
 8003886:	4aae      	ldr	r2, [pc, #696]	@ (8003b40 <lfs_dir_compact+0x3c8>)
 8003888:	9207      	str	r2, [sp, #28]
 800388a:	9306      	str	r3, [sp, #24]
 800388c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003896:	9304      	str	r3, [sp, #16]
 8003898:	2300      	movs	r3, #0
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	4ba9      	ldr	r3, [pc, #676]	@ (8003b44 <lfs_dir_compact+0x3cc>)
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ac:	2200      	movs	r2, #0
 80038ae:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7fe fb33 	bl	8001f1c <lfs_dir_traverse>
 80038b6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 80038b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80038be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80038c4:	f000 80dc 	beq.w	8003a80 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80038c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ca:	e134      	b.n	8003b36 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3318      	adds	r3, #24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd fd1e 	bl	8001312 <lfs_pair_isnull>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d022      	beq.n	8003928 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3318      	adds	r3, #24
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fd9f 	bl	800142a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	7ddb      	ldrb	r3, [r3, #23]
 80038f0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80038f4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80038f6:	4a94      	ldr	r2, [pc, #592]	@ (8003b48 <lfs_dir_compact+0x3d0>)
 80038f8:	431a      	orrs	r2, r3
                        dir->tail);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80038fe:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fc20 	bl	8003148 <lfs_dir_commitattr>
 8003908:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3318      	adds	r3, #24
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd fd71 	bl	80013f6 <lfs_pair_fromle32>
                if (err) {
 8003914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800391a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800391c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003920:	f000 80b0 	beq.w	8003a84 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003926:	e106      	b.n	8003b36 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003934:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003938:	f083 0301 	eor.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003948:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fe11 	bl	8001576 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800395a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd fe08 	bl	8001576 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800396c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fdff 	bl	8001576 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003988:	461a      	mov	r2, r3
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff fa2f 	bl	8002df0 <lfs_dir_getgstate>
 8003992:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8003994:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <lfs_dir_compact+0x226>
                return err;
 800399a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800399c:	e0cb      	b.n	8003b36 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800399e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fe0c 	bl	80015c0 <lfs_gstate_iszero>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f083 0301 	eor.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d016      	beq.n	80039e2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80039b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fe93 	bl	80016e4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80039be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039c2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80039c6:	4a61      	ldr	r2, [pc, #388]	@ (8003b4c <lfs_dir_compact+0x3d4>)
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff fbbd 	bl	8003148 <lfs_dir_commitattr>
 80039ce:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80039d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80039d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80039dc:	d054      	beq.n	8003a88 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80039de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e0:	e0a9      	b.n	8003b36 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80039e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039e6:	4619      	mov	r1, r3
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f7ff fc2d 	bl	8003248 <lfs_dir_commitcrc>
 80039ee:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80039f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80039f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039f8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80039fc:	d046      	beq.n	8003a8c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80039fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a00:	e099      	b.n	8003b36 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a08:	6992      	ldr	r2, [r2, #24]
 8003a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a0e:	fb01 f202 	mul.w	r2, r1, r2
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <lfs_dir_compact+0x2ae>
 8003a18:	4b4d      	ldr	r3, [pc, #308]	@ (8003b50 <lfs_dir_compact+0x3d8>)
 8003a1a:	4a4e      	ldr	r2, [pc, #312]	@ (8003b54 <lfs_dir_compact+0x3dc>)
 8003a1c:	f44f 61e9 	mov.w	r1, #1864	@ 0x748
 8003a20:	484d      	ldr	r0, [pc, #308]	@ (8003b58 <lfs_dir_compact+0x3e0>)
 8003a22:	f006 f8b5 	bl	8009b90 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd fc5d 	bl	80012e8 <lfs_pair_swap>
            dir->count = end - begin;
 8003a2e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8003a32:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3348      	adds	r3, #72	@ 0x48
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003a56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003a5a:	f083 0301 	eor.w	r3, r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d065      	beq.n	8003b30 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	333c      	adds	r3, #60	@ 0x3c
 8003a6a:	3230      	adds	r2, #48	@ 0x30
 8003a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003a72:	e05d      	b.n	8003b30 <lfs_dir_compact+0x3b8>
        goto relocate;
 8003a74:	bf00      	nop
 8003a76:	e00a      	b.n	8003a8e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a78:	bf00      	nop
 8003a7a:	e008      	b.n	8003a8e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a7c:	bf00      	nop
 8003a7e:	e006      	b.n	8003a8e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a80:	bf00      	nop
 8003a82:	e004      	b.n	8003a8e <lfs_dir_compact+0x316>
                        goto relocate;
 8003a84:	bf00      	nop
 8003a86:	e002      	b.n	8003a8e <lfs_dir_compact+0x316>
                        goto relocate;
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a8c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3310      	adds	r3, #16
 8003a98:	4619      	mov	r1, r3
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7fd f8d8 	bl	8000c50 <lfs_cache_drop>
        if (!tired) {
 8003aa0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003aa4:	f083 0301 	eor.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b5c <lfs_dir_compact+0x3e4>)
 8003ab4:	9200      	str	r2, [sp, #0]
 8003ab6:	f240 725a 	movw	r2, #1882	@ 0x75a
 8003aba:	4927      	ldr	r1, [pc, #156]	@ (8003b58 <lfs_dir_compact+0x3e0>)
 8003abc:	4828      	ldr	r0, [pc, #160]	@ (8003b60 <lfs_dir_compact+0x3e8>)
 8003abe:	f006 fa17 	bl	8009ef0 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	617a      	str	r2, [r7, #20]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	61ba      	str	r2, [r7, #24]
 8003acc:	f107 0214 	add.w	r2, r7, #20
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fc38 	bl	8001348 <lfs_pair_cmp>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b5c <lfs_dir_compact+0x3e4>)
 8003ae4:	9200      	str	r2, [sp, #0]
 8003ae6:	f240 725f 	movw	r2, #1887	@ 0x75f
 8003aea:	491b      	ldr	r1, [pc, #108]	@ (8003b58 <lfs_dir_compact+0x3e0>)
 8003aec:	481d      	ldr	r0, [pc, #116]	@ (8003b64 <lfs_dir_compact+0x3ec>)
 8003aee:	f006 f9ff 	bl	8009ef0 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003af2:	f06f 031b 	mvn.w	r3, #27
 8003af6:	e01e      	b.n	8003b36 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7fd ff20 	bl	8001944 <lfs_alloc>
 8003b04:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <lfs_dir_compact+0x3ae>
 8003b0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b0e:	f113 0f1c 	cmn.w	r3, #28
 8003b12:	d106      	bne.n	8003b22 <lfs_dir_compact+0x3aa>
 8003b14:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003b18:	f083 0301 	eor.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <lfs_dir_compact+0x3ae>
            return err;
 8003b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b24:	e007      	b.n	8003b36 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8003b2c:	bf00      	nop
    while (true) {
 8003b2e:	e64c      	b.n	80037ca <lfs_dir_compact+0x52>
        break;
 8003b30:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003b32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3768      	adds	r7, #104	@ 0x68
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	08003701 	.word	0x08003701
 8003b44:	400ffc00 	.word	0x400ffc00
 8003b48:	000ffc08 	.word	0x000ffc08
 8003b4c:	7ffffc0c 	.word	0x7ffffc0c
 8003b50:	0800ad20 	.word	0x0800ad20
 8003b54:	0800b578 	.word	0x0800b578
 8003b58:	0800abd4 	.word	0x0800abd4
 8003b5c:	0800acc8 	.word	0x0800acc8
 8003b60:	0800ad48 	.word	0x0800ad48
 8003b64:	0800ad6c 	.word	0x0800ad6c

08003b68 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b097      	sub	sp, #92	@ 0x5c
 8003b6c:	af0a      	add	r7, sp, #40	@ 0x28
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003b76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8003b7c:	e058      	b.n	8003c30 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	4252      	negs	r2, r2
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	b212      	sxth	r2, r2
 8003b90:	f107 0118 	add.w	r1, r7, #24
 8003b94:	9108      	str	r1, [sp, #32]
 8003b96:	4979      	ldr	r1, [pc, #484]	@ (8003d7c <lfs_dir_splittingcompact+0x214>)
 8003b98:	9107      	str	r1, [sp, #28]
 8003b9a:	9206      	str	r2, [sp, #24]
 8003b9c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003ba0:	9205      	str	r2, [sp, #20]
 8003ba2:	9304      	str	r3, [sp, #16]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	4b75      	ldr	r3, [pc, #468]	@ (8003d80 <lfs_dir_splittingcompact+0x218>)
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	2200      	movs	r2, #0
 8003bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7fe f9ad 	bl	8001f1c <lfs_dir_traverse>
 8003bc2:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <lfs_dir_splittingcompact+0x66>
                return err;
 8003bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bcc:	e0d1      	b.n	8003d72 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8003bce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2bfe      	cmp	r3, #254	@ 0xfe
 8003bd8:	d822      	bhi.n	8003c20 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f1a3 0424 	sub.w	r4, r3, #36	@ 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	e003      	b.n	8003c00 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bfc:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003bfe:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c04:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc ff90 	bl	8000b2e <lfs_alignup>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4619      	mov	r1, r3
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7fc ff66 	bl	8000ae4 <lfs_min>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d20e      	bcs.n	8003c3e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003c20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c2c:	4413      	add	r3, r2
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8003c30:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d8a0      	bhi.n	8003b7e <lfs_dir_splittingcompact+0x16>
 8003c3c:	e000      	b.n	8003c40 <lfs_dir_splittingcompact+0xd8>
                break;
 8003c3e:	bf00      	nop
        }

        if (split == begin) {
 8003c40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d02d      	beq.n	8003ca6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003c52:	9202      	str	r2, [sp, #8]
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff fce3 	bl	800362c <lfs_dir_split>
 8003c66:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <lfs_dir_splittingcompact+0x112>
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	f113 0f1c 	cmn.w	r3, #28
 8003c74:	d001      	beq.n	8003c7a <lfs_dir_splittingcompact+0x112>
            return err;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	e07b      	b.n	8003d72 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	493e      	ldr	r1, [pc, #248]	@ (8003d84 <lfs_dir_splittingcompact+0x21c>)
 8003c8a:	9101      	str	r1, [sp, #4]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	f240 72a9 	movw	r2, #1961	@ 0x7a9
 8003c94:	493c      	ldr	r1, [pc, #240]	@ (8003d88 <lfs_dir_splittingcompact+0x220>)
 8003c96:	483d      	ldr	r0, [pc, #244]	@ (8003d8c <lfs_dir_splittingcompact+0x224>)
 8003c98:	f006 f92a 	bl	8009ef0 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003c9c:	e004      	b.n	8003ca8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8003ca4:	e767      	b.n	8003b76 <lfs_dir_splittingcompact+0xe>
            break;
 8003ca6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fd3d 	bl	800372a <lfs_dir_needsrelocation>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04e      	beq.n	8003d54 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	613a      	str	r2, [r7, #16]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	617a      	str	r2, [r7, #20]
 8003cc0:	f107 0210 	add.w	r2, r7, #16
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fb3e 	bl	8001348 <lfs_pair_cmp>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d140      	bne.n	8003d54 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f003 f8b8 	bl	8006e48 <lfs_fs_rawsize>
 8003cd8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da01      	bge.n	8003ce4 <lfs_dir_splittingcompact+0x17c>
            return size;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	e046      	b.n	8003d72 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	085a      	lsrs	r2, r3, #1
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d930      	bls.n	8003d54 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	4a23      	ldr	r2, [pc, #140]	@ (8003d84 <lfs_dir_splittingcompact+0x21c>)
 8003cf8:	9200      	str	r2, [sp, #0]
 8003cfa:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8003cfe:	4922      	ldr	r1, [pc, #136]	@ (8003d88 <lfs_dir_splittingcompact+0x220>)
 8003d00:	4823      	ldr	r0, [pc, #140]	@ (8003d90 <lfs_dir_splittingcompact+0x228>)
 8003d02:	f006 f8f5 	bl	8009ef0 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003d0a:	9302      	str	r3, [sp, #8]
 8003d0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff fc85 	bl	800362c <lfs_dir_split>
 8003d22:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <lfs_dir_splittingcompact+0x1ce>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f113 0f1c 	cmn.w	r3, #28
 8003d30:	d001      	beq.n	8003d36 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	e01d      	b.n	8003d72 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003d3c:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <lfs_dir_splittingcompact+0x21c>)
 8003d3e:	f240 72c7 	movw	r2, #1991	@ 0x7c7
 8003d42:	4911      	ldr	r1, [pc, #68]	@ (8003d88 <lfs_dir_splittingcompact+0x220>)
 8003d44:	4813      	ldr	r0, [pc, #76]	@ (8003d94 <lfs_dir_splittingcompact+0x22c>)
 8003d46:	f006 f8d3 	bl	8009ef0 <iprintf>
 8003d4a:	e003      	b.n	8003d54 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8003d4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003d50:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003d54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff fd04 	bl	8003778 <lfs_dir_compact>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3734      	adds	r7, #52	@ 0x34
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	080036d5 	.word	0x080036d5
 8003d80:	400ffc00 	.word	0x400ffc00
 8003d84:	0800acc8 	.word	0x0800acc8
 8003d88:	0800abd4 	.word	0x0800abd4
 8003d8c:	0800ada4 	.word	0x0800ada4
 8003d90:	0800add4 	.word	0x0800add4
 8003d94:	0800ae04 	.word	0x0800ae04

08003d98 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003d98:	b5b0      	push	{r4, r5, r7, lr}
 8003d9a:	b0a6      	sub	sp, #152	@ 0x98
 8003d9c:	af0a      	add	r7, sp, #40	@ 0x28
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003db0:	2300      	movs	r3, #0
 8003db2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003db4:	e06d      	b.n	8003e92 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd fb7d 	bl	80014c0 <lfs_tag_type3>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f240 4301 	movw	r3, #1025	@ 0x401
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d106      	bne.n	8003de0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	8a9b      	ldrh	r3, [r3, #20]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	829a      	strh	r2, [r3, #20]
 8003dde:	e055      	b.n	8003e8c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fb68 	bl	80014c0 <lfs_tag_type3>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d114      	bne.n	8003e26 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	8a9b      	ldrh	r3, [r3, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <lfs_dir_relocatingcommit+0x7a>
 8003e04:	4ba4      	ldr	r3, [pc, #656]	@ (8004098 <lfs_dir_relocatingcommit+0x300>)
 8003e06:	4aa5      	ldr	r2, [pc, #660]	@ (800409c <lfs_dir_relocatingcommit+0x304>)
 8003e08:	f240 71df 	movw	r1, #2015	@ 0x7df
 8003e0c:	48a4      	ldr	r0, [pc, #656]	@ (80040a0 <lfs_dir_relocatingcommit+0x308>)
 8003e0e:	f005 febf 	bl	8009b90 <__assert_func>
            dir->count -= 1;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	8a9b      	ldrh	r3, [r3, #20]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8003e24:	e032      	b.n	8003e8c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003e26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd fb35 	bl	80014a0 <lfs_tag_type1>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e3c:	d126      	bne.n	8003e8c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003e4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	4413      	add	r3, r2
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003e5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fd fb39 	bl	80014e0 <lfs_tag_chunk>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	3318      	adds	r3, #24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fab5 	bl	80013f6 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e8e:	3301      	adds	r3, #1
 8003e90:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	db8c      	blt.n	8003db6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003e9c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d02b      	beq.n	8003efc <lfs_dir_relocatingcommit+0x164>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	8a9b      	ldrh	r3, [r3, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d127      	bne.n	8003efc <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <lfs_dir_relocatingcommit+0x12a>
 8003eb4:	4b7b      	ldr	r3, [pc, #492]	@ (80040a4 <lfs_dir_relocatingcommit+0x30c>)
 8003eb6:	4a79      	ldr	r2, [pc, #484]	@ (800409c <lfs_dir_relocatingcommit+0x304>)
 8003eb8:	f240 71ec 	movw	r1, #2028	@ 0x7ec
 8003ebc:	4878      	ldr	r0, [pc, #480]	@ (80040a0 <lfs_dir_relocatingcommit+0x308>)
 8003ebe:	f005 fe67 	bl	8009b90 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003ec8:	4619      	mov	r1, r3
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f002 fc2e 	bl	800672c <lfs_fs_pred>
 8003ed0:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <lfs_dir_relocatingcommit+0x14c>
 8003ed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eda:	f113 0f02 	cmn.w	r3, #2
 8003ede:	d001      	beq.n	8003ee4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003ee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee2:	e204      	b.n	80042ee <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee6:	f113 0f02 	cmn.w	r3, #2
 8003eea:	d007      	beq.n	8003efc <lfs_dir_relocatingcommit+0x164>
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef0:	7ddb      	ldrb	r3, [r3, #23]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8003efa:	e121      	b.n	8004140 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	7d9b      	ldrb	r3, [r3, #22]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80fb 	beq.w	80040fc <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003f0a:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003f10:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f18:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003f22:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <lfs_dir_relocatingcommit+0x1a0>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f34:	3b08      	subs	r3, #8
 8003f36:	e003      	b.n	8003f40 <lfs_dir_relocatingcommit+0x1a8>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003f40:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3318      	adds	r3, #24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fa6f 	bl	800142a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8003f5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f62:	9308      	str	r3, [sp, #32]
 8003f64:	4b50      	ldr	r3, [pc, #320]	@ (80040a8 <lfs_dir_relocatingcommit+0x310>)
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9306      	str	r3, [sp, #24]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9305      	str	r3, [sp, #20]
 8003f70:	2300      	movs	r3, #0
 8003f72:	9304      	str	r3, [sp, #16]
 8003f74:	2300      	movs	r3, #0
 8003f76:	9303      	str	r3, [sp, #12]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9302      	str	r3, [sp, #8]
 8003f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	460b      	mov	r3, r1
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7fd ffc6 	bl	8001f1c <lfs_dir_traverse>
 8003f90:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	3318      	adds	r3, #24
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fa2d 	bl	80013f6 <lfs_pair_fromle32>
        if (err) {
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa4:	f113 0f1c 	cmn.w	r3, #28
 8003fa8:	f000 80aa 	beq.w	8004100 <lfs_dir_relocatingcommit+0x368>
 8003fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fae:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003fb2:	f000 80a5 	beq.w	8004100 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb8:	e199      	b.n	80042ee <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8003fba:	f107 031c 	add.w	r3, r7, #28
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003fcc:	f107 031c 	add.w	r3, r7, #28
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fd facf 	bl	8001576 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fd fac6 	bl	8001576 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003ff0:	f107 031c 	add.w	r3, r7, #28
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fabd 	bl	8001576 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004008:	f107 031c 	add.w	r3, r7, #28
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fad7 	bl	80015c0 <lfs_gstate_iszero>
 8004012:	4603      	mov	r3, r0
 8004014:	f083 0301 	eor.w	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d027      	beq.n	800406e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800401e:	f107 031c 	add.w	r3, r7, #28
 8004022:	461a      	mov	r2, r3
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7fe fee2 	bl	8002df0 <lfs_dir_getgstate>
 800402c:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800402e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8004034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004036:	e15a      	b.n	80042ee <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	4618      	mov	r0, r3
 800403e:	f7fd fb51 	bl	80016e4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8004042:	f107 031c 	add.w	r3, r7, #28
 8004046:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800404a:	4a18      	ldr	r2, [pc, #96]	@ (80040ac <lfs_dir_relocatingcommit+0x314>)
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff f87b 	bl	8003148 <lfs_dir_commitattr>
 8004052:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8004054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800405a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405c:	f113 0f1c 	cmn.w	r3, #28
 8004060:	d050      	beq.n	8004104 <lfs_dir_relocatingcommit+0x36c>
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004068:	d04c      	beq.n	8004104 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	e13f      	b.n	80042ee <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800406e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004072:	4619      	mov	r1, r3
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff f8e7 	bl	8003248 <lfs_dir_commitcrc>
 800407a:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 800407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	f113 0f1c 	cmn.w	r3, #28
 8004088:	d03e      	beq.n	8004108 <lfs_dir_relocatingcommit+0x370>
 800408a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004090:	d03a      	beq.n	8004108 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8004092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004094:	e12b      	b.n	80042ee <lfs_dir_relocatingcommit+0x556>
 8004096:	bf00      	nop
 8004098:	0800ae30 	.word	0x0800ae30
 800409c:	0800b588 	.word	0x0800b588
 80040a0:	0800abd4 	.word	0x0800abd4
 80040a4:	0800ae40 	.word	0x0800ae40
 80040a8:	08003701 	.word	0x08003701
 80040ac:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80040b6:	6992      	ldr	r2, [r2, #24]
 80040b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80040bc:	fb01 f202 	mul.w	r2, r1, r2
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <lfs_dir_relocatingcommit+0x33c>
 80040c6:	4b8c      	ldr	r3, [pc, #560]	@ (80042f8 <lfs_dir_relocatingcommit+0x560>)
 80040c8:	4a8c      	ldr	r2, [pc, #560]	@ (80042fc <lfs_dir_relocatingcommit+0x564>)
 80040ca:	f640 0136 	movw	r1, #2102	@ 0x836
 80040ce:	488c      	ldr	r0, [pc, #560]	@ (8004300 <lfs_dir_relocatingcommit+0x568>)
 80040d0:	f005 fd5e 	bl	8009b90 <__assert_func>
        dir->off = commit.off;
 80040d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80040da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	333c      	adds	r3, #60	@ 0x3c
 80040e6:	3230      	adds	r2, #48	@ 0x30
 80040e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80040ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3348      	adds	r3, #72	@ 0x48
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	e021      	b.n	8004140 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80040fc:	bf00      	nop
 80040fe:	e004      	b.n	800410a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004108:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3310      	adds	r3, #16
 800410e:	4619      	mov	r1, r3
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7fc fd9d 	bl	8000c50 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	8a9b      	ldrh	r3, [r3, #20]
 800411a:	9302      	str	r3, [sp, #8]
 800411c:	2300      	movs	r3, #0
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fd1b 	bl	8003b68 <lfs_dir_splittingcompact>
 8004132:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004136:	2b00      	cmp	r3, #0
 8004138:	da01      	bge.n	800413e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800413a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800413c:	e0d7      	b.n	80042ee <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 800413e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	663b      	str	r3, [r7, #96]	@ 0x60
 8004154:	e0c6      	b.n	80042e4 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8004156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004158:	3308      	adds	r3, #8
 800415a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd f8f1 	bl	8001348 <lfs_pair_cmp>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 80b8 	bne.w	80042de <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 800416e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	f103 0408 	add.w	r4, r3, #8
 8004176:	4615      	mov	r5, r2
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8004184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004186:	3308      	adds	r3, #8
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	f000 809d 	beq.w	80042ca <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8004190:	2300      	movs	r3, #0
 8004192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004194:	e07b      	b.n	800428e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	4413      	add	r3, r2
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd f98d 	bl	80014c0 <lfs_tag_type3>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461a      	mov	r2, r3
 80041aa:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d115      	bne.n	80041de <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80041b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041b4:	889c      	ldrh	r4, [r3, #4]
 80041b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd f9a7 	bl	8001514 <lfs_tag_id>
 80041c6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80041c8:	429c      	cmp	r4, r3
 80041ca:	d108      	bne.n	80041de <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80041cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80041d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295
 80041da:	60da      	str	r2, [r3, #12]
 80041dc:	e054      	b.n	8004288 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80041de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd f969 	bl	80014c0 <lfs_tag_type3>
 80041ee:	4603      	mov	r3, r0
 80041f0:	461a      	mov	r2, r3
 80041f2:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d11c      	bne.n	8004234 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80041fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041fc:	889c      	ldrh	r4, [r3, #4]
 80041fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	4413      	add	r3, r2
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd f983 	bl	8001514 <lfs_tag_id>
 800420e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004210:	429c      	cmp	r4, r3
 8004212:	d90f      	bls.n	8004234 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8004214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004216:	889b      	ldrh	r3, [r3, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004222:	799b      	ldrb	r3, [r3, #6]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d12f      	bne.n	8004288 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8004228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004230:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004232:	e029      	b.n	8004288 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4413      	add	r3, r2
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd f93e 	bl	80014c0 <lfs_tag_type3>
 8004244:	4603      	mov	r3, r0
 8004246:	461a      	mov	r2, r3
 8004248:	f240 4301 	movw	r3, #1025	@ 0x401
 800424c:	429a      	cmp	r2, r3
 800424e:	d11b      	bne.n	8004288 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004252:	889c      	ldrh	r4, [r3, #4]
 8004254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	4413      	add	r3, r2
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd f958 	bl	8001514 <lfs_tag_id>
 8004264:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004266:	429c      	cmp	r4, r3
 8004268:	d30e      	bcc.n	8004288 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 800426a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800426c:	889b      	ldrh	r3, [r3, #4]
 800426e:	3301      	adds	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004274:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004278:	799b      	ldrb	r3, [r3, #6]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d104      	bne.n	8004288 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 800427e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8004288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800428a:	3301      	adds	r3, #1
 800428c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004294:	429a      	cmp	r2, r3
 8004296:	f6ff af7e 	blt.w	8004196 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800429a:	e016      	b.n	80042ca <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 800429c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800429e:	889a      	ldrh	r2, [r3, #4]
 80042a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a2:	8b9b      	ldrh	r3, [r3, #28]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042aa:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80042ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ae:	f103 0108 	add.w	r1, r3, #8
 80042b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042b4:	3320      	adds	r3, #32
 80042b6:	461a      	mov	r2, r3
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7fe fd7d 	bl	8002db8 <lfs_dir_fetch>
 80042be:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 80042c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <lfs_dir_relocatingcommit+0x532>
                    return err;
 80042c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c8:	e011      	b.n	80042ee <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 80042ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042cc:	889a      	ldrh	r2, [r3, #4]
 80042ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d0:	8b9b      	ldrh	r3, [r3, #28]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d303      	bcc.n	80042de <lfs_dir_relocatingcommit+0x546>
 80042d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d8:	7fdb      	ldrb	r3, [r3, #31]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1de      	bne.n	800429c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80042de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f47f af35 	bne.w	8004156 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80042ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3770      	adds	r7, #112	@ 0x70
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bdb0      	pop	{r4, r5, r7, pc}
 80042f6:	bf00      	nop
 80042f8:	0800ad20 	.word	0x0800ad20
 80042fc:	0800b588 	.word	0x0800b588
 8004300:	0800abd4 	.word	0x0800abd4

08004304 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004304:	b5b0      	push	{r4, r5, r7, lr}
 8004306:	b0bc      	sub	sp, #240	@ 0xf0
 8004308:	af04      	add	r7, sp, #16
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800431a:	e045      	b.n	80043a8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800431c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004320:	3308      	adds	r3, #8
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	429a      	cmp	r2, r3
 8004326:	d03a      	beq.n	800439e <lfs_dir_orphaningcommit+0x9a>
 8004328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800432c:	3308      	adds	r3, #8
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd f808 	bl	8001348 <lfs_pair_cmp>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d12f      	bne.n	800439e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800433e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004342:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004344:	2b01      	cmp	r3, #1
 8004346:	d12a      	bne.n	800439e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d023      	beq.n	800439e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800435a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004362:	429a      	cmp	r2, r3
 8004364:	d91b      	bls.n	800439e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8004366:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 ffd8 	bl	8005320 <lfs_file_outline>
 8004370:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8004374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800437c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004380:	e2ad      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8004382:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 ffec 	bl	8005364 <lfs_file_flush>
 800438c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8004390:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8004398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800439c:	e29f      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800439e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1b5      	bne.n	800431c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80043c6:	461d      	mov	r5, r3
 80043c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80043da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff fcd6 	bl	8003d98 <lfs_dir_relocatingcommit>
 80043ec:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80043f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	da02      	bge.n	80043fe <lfs_dir_orphaningcommit+0xfa>
        return state;
 80043f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043fc:	e26f      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc ff9e 	bl	8001348 <lfs_pair_cmp>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	461d      	mov	r5, r3
 8004416:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800441a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800441c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800441e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004422:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800442a:	2b02      	cmp	r3, #2
 800442c:	d14a      	bne.n	80044c4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3348      	adds	r3, #72	@ 0x48
 8004432:	461a      	mov	r2, r3
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7fe fcda 	bl	8002df0 <lfs_dir_getgstate>
 800443c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8004440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800444c:	e247      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800444e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8004454:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	3318      	adds	r3, #24
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc ffe3 	bl	800142a <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	7ddb      	ldrb	r3, [r3, #23]
 8004468:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800446c:	051a      	lsls	r2, r3, #20
 800446e:	4bc2      	ldr	r3, [pc, #776]	@ (8004778 <lfs_dir_orphaningcommit+0x474>)
 8004470:	4313      	orrs	r3, r2
 8004472:	667b      	str	r3, [r7, #100]	@ 0x64
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3318      	adds	r3, #24
 8004478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800447e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8004482:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8004486:	2000      	movs	r0, #0
 8004488:	9001      	str	r0, [sp, #4]
 800448a:	2001      	movs	r0, #1
 800448c:	9000      	str	r0, [sp, #0]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff fc82 	bl	8003d98 <lfs_dir_relocatingcommit>
 8004494:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	3318      	adds	r3, #24
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc ffaa 	bl	80013f6 <lfs_pair_fromle32>
        if (state < 0) {
 80044a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	da02      	bge.n	80044b0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80044aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044ae:	e216      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80044b0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80044b4:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80044b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 80044ca:	e1fc      	b.n	80048c6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80044cc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80044d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80044d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044dc:	4ca7      	ldr	r4, [pc, #668]	@ (800477c <lfs_dir_orphaningcommit+0x478>)
 80044de:	9403      	str	r4, [sp, #12]
 80044e0:	9102      	str	r1, [sp, #8]
 80044e2:	9201      	str	r2, [sp, #4]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4603      	mov	r3, r0
 80044e8:	f44f 620c 	mov.w	r2, #2240	@ 0x8c0
 80044ec:	49a4      	ldr	r1, [pc, #656]	@ (8004780 <lfs_dir_orphaningcommit+0x47c>)
 80044ee:	48a5      	ldr	r0, [pc, #660]	@ (8004784 <lfs_dir_orphaningcommit+0x480>)
 80044f0:	f005 fcfe 	bl	8009ef0 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f103 0220 	add.w	r2, r3, #32
 8004500:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc ff1e 	bl	8001348 <lfs_pair_cmp>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004512:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800451a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800452a:	e037      	b.n	800459c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800452c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004530:	f103 0208 	add.w	r2, r3, #8
 8004534:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc ff04 	bl	8001348 <lfs_pair_cmp>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004546:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800454a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800454e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004550:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004554:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004558:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800455a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800455e:	799b      	ldrb	r3, [r3, #6]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d116      	bne.n	8004592 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004564:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004568:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800456c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc fee8 	bl	8001348 <lfs_pair_cmp>
 8004578:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800457e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004582:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004586:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004588:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800458c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004592:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800459c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1c3      	bne.n	800452c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80045a4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80045a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80045ac:	4619      	mov	r1, r3
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f002 f944 	bl	800683c <lfs_fs_parent>
 80045b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80045b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045bc:	2b00      	cmp	r3, #0
 80045be:	da07      	bge.n	80045d0 <lfs_dir_orphaningcommit+0x2cc>
 80045c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045c4:	f113 0f02 	cmn.w	r3, #2
 80045c8:	d002      	beq.n	80045d0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80045ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045ce:	e186      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80045d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045d4:	f113 0f02 	cmn.w	r3, #2
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 80045e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045e6:	f113 0f02 	cmn.w	r3, #2
 80045ea:	f000 809e 	beq.w	800472a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80045ee:	2101      	movs	r1, #1
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f002 f97b 	bl	80068ec <lfs_fs_preporphans>
 80045f6:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 80045fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <lfs_dir_orphaningcommit+0x304>
                return err;
 8004602:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004606:	e16a      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004608:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800460c:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3330      	adds	r3, #48	@ 0x30
 8004614:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd f822 	bl	8001664 <lfs_gstate_hasmovehere>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02d      	beq.n	8004682 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	4618      	mov	r0, r3
 800462c:	f7fc ff72 	bl	8001514 <lfs_tag_id>
 8004630:	4603      	mov	r3, r0
 8004632:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004636:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004638:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800463a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800463e:	484f      	ldr	r0, [pc, #316]	@ (800477c <lfs_dir_orphaningcommit+0x478>)
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9201      	str	r2, [sp, #4]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	460b      	mov	r3, r1
 8004648:	f640 02ed 	movw	r2, #2285	@ 0x8ed
 800464c:	494c      	ldr	r1, [pc, #304]	@ (8004780 <lfs_dir_orphaningcommit+0x47c>)
 800464e:	484e      	ldr	r0, [pc, #312]	@ (8004788 <lfs_dir_orphaningcommit+0x484>)
 8004650:	f005 fc4e 	bl	8009ef0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004654:	2200      	movs	r2, #0
 8004656:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f002 f980 	bl	8006960 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004664:	4618      	mov	r0, r3
 8004666:	f7fc ff55 	bl	8001514 <lfs_tag_id>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8004672:	4293      	cmp	r3, r2
 8004674:	d205      	bcs.n	8004682 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004676:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800467a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800467e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004684:	657b      	str	r3, [r7, #84]	@ 0x54
 8004686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004688:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 800468a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc fecb 	bl	800142a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004694:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8004698:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <lfs_dir_orphaningcommit+0x3ac>
 80046a0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80046a4:	029b      	lsls	r3, r3, #10
 80046a6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80046aa:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80046ae:	e000      	b.n	80046b2 <lfs_dir_orphaningcommit+0x3ae>
 80046b0:	2300      	movs	r3, #0
 80046b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b4:	2300      	movs	r3, #0
 80046b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80046c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046c4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80046c8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80046cc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80046d0:	2000      	movs	r0, #0
 80046d2:	9001      	str	r0, [sp, #4]
 80046d4:	2002      	movs	r0, #2
 80046d6:	9000      	str	r0, [sp, #0]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff fb5d 	bl	8003d98 <lfs_dir_relocatingcommit>
 80046de:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80046e2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc fe85 	bl	80013f6 <lfs_pair_fromle32>
            if (state < 0) {
 80046ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da02      	bge.n	80046fa <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80046f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046f8:	e0f1      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80046fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d113      	bne.n	800472a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004704:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8004708:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800470a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 800470e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004712:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8004716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800471a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800471e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004728:	e0cd      	b.n	80048c6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800472a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800472e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004732:	4619      	mov	r1, r3
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f001 fff9 	bl	800672c <lfs_fs_pred>
 800473a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800473e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <lfs_dir_orphaningcommit+0x452>
 8004746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800474a:	f113 0f02 	cmn.w	r3, #2
 800474e:	d002      	beq.n	8004756 <lfs_dir_orphaningcommit+0x452>
            return err;
 8004750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004754:	e0c3      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004756:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01a      	beq.n	8004794 <lfs_dir_orphaningcommit+0x490>
 800475e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004762:	f113 0f02 	cmn.w	r3, #2
 8004766:	d115      	bne.n	8004794 <lfs_dir_orphaningcommit+0x490>
 8004768:	4b08      	ldr	r3, [pc, #32]	@ (800478c <lfs_dir_orphaningcommit+0x488>)
 800476a:	4a09      	ldr	r2, [pc, #36]	@ (8004790 <lfs_dir_orphaningcommit+0x48c>)
 800476c:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8004770:	4803      	ldr	r0, [pc, #12]	@ (8004780 <lfs_dir_orphaningcommit+0x47c>)
 8004772:	f005 fa0d 	bl	8009b90 <__assert_func>
 8004776:	bf00      	nop
 8004778:	000ffc08 	.word	0x000ffc08
 800477c:	0800acc8 	.word	0x0800acc8
 8004780:	0800abd4 	.word	0x0800abd4
 8004784:	0800ae48 	.word	0x0800ae48
 8004788:	0800ae84 	.word	0x0800ae84
 800478c:	0800aec8 	.word	0x0800aec8
 8004790:	0800b5a4 	.word	0x0800b5a4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004798:	f113 0f02 	cmn.w	r3, #2
 800479c:	f000 8093 	beq.w	80048c6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3330      	adds	r3, #48	@ 0x30
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fc ff28 	bl	80015fa <lfs_gstate_hasorphans>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d011      	beq.n	80047d4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80047b0:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80047b4:	425b      	negs	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	4619      	mov	r1, r3
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f002 f895 	bl	80068ec <lfs_fs_preporphans>
 80047c2:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 80047c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80047ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047d2:	e084      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80047d4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80047d8:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3330      	adds	r3, #48	@ 0x30
 80047e0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc ff3c 	bl	8001664 <lfs_gstate_hasmovehere>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01c      	beq.n	800482c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fc fe8c 	bl	8001514 <lfs_tag_id>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004802:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004804:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004806:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 800480a:	4837      	ldr	r0, [pc, #220]	@ (80048e8 <lfs_dir_orphaningcommit+0x5e4>)
 800480c:	9002      	str	r0, [sp, #8]
 800480e:	9201      	str	r2, [sp, #4]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	460b      	mov	r3, r1
 8004814:	f640 1221 	movw	r2, #2337	@ 0x921
 8004818:	4934      	ldr	r1, [pc, #208]	@ (80048ec <lfs_dir_orphaningcommit+0x5e8>)
 800481a:	4835      	ldr	r0, [pc, #212]	@ (80048f0 <lfs_dir_orphaningcommit+0x5ec>)
 800481c:	f005 fb68 	bl	8009ef0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004820:	2200      	movs	r2, #0
 8004822:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f002 f89a 	bl	8006960 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800482c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800482e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8004832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8004838:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800483c:	4618      	mov	r0, r3
 800483e:	f7fc fdf4 	bl	800142a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004842:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8004846:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <lfs_dir_orphaningcommit+0x55a>
 800484e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8004858:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800485c:	e000      	b.n	8004860 <lfs_dir_orphaningcommit+0x55c>
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
 8004862:	2300      	movs	r3, #0
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004866:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800486a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800486e:	051a      	lsls	r2, r3, #20
 8004870:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <lfs_dir_orphaningcommit+0x5f0>)
 8004872:	4313      	orrs	r3, r2
 8004874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004876:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800487a:	633b      	str	r3, [r7, #48]	@ 0x30
 800487c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004880:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8004884:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8004888:	2000      	movs	r0, #0
 800488a:	9001      	str	r0, [sp, #4]
 800488c:	2002      	movs	r0, #2
 800488e:	9000      	str	r0, [sp, #0]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff fa81 	bl	8003d98 <lfs_dir_relocatingcommit>
 8004896:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800489a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fc fda9 	bl	80013f6 <lfs_pair_fromle32>
            if (state < 0) {
 80048a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da02      	bge.n	80048b2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80048ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048b0:	e015      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80048b2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80048b6:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80048ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80048c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f43f adfe 	beq.w	80044cc <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80048d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <lfs_dir_orphaningcommit+0x5d8>
 80048d8:	2303      	movs	r3, #3
 80048da:	e000      	b.n	80048de <lfs_dir_orphaningcommit+0x5da>
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	37e0      	adds	r7, #224	@ 0xe0
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bdb0      	pop	{r4, r5, r7, pc}
 80048e6:	bf00      	nop
 80048e8:	0800acc8 	.word	0x0800acc8
 80048ec:	0800abd4 	.word	0x0800abd4
 80048f0:	0800ae84 	.word	0x0800ae84
 80048f4:	000ffc08 	.word	0x000ffc08

080048f8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fcf9 	bl	8004304 <lfs_dir_orphaningcommit>
 8004912:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da01      	bge.n	800491e <lfs_dir_commit+0x26>
        return orphans;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	e00d      	b.n	800493a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004924:	2100      	movs	r1, #0
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f002 f8ba 	bl	8006aa0 <lfs_fs_deorphan>
 800492c:	6138      	str	r0, [r7, #16]
        if (err) {
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <lfs_dir_commit+0x40>
            return err;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	e000      	b.n	800493a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004942:	b590      	push	{r4, r7, lr}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	3b08      	subs	r3, #8
 800495a:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <lfs_ctz_index+0x2e>
        return 0;
 800496c:	2300      	movs	r3, #0
 800496e:	e01c      	b.n	80049aa <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3b01      	subs	r3, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc f90b 	bl	8000b90 <lfs_popc>
 800497a:	4603      	mov	r3, r0
 800497c:	3302      	adds	r3, #2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	1ad4      	subs	r4, r2, r3
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7fc f8f9 	bl	8000b90 <lfs_popc>
 800499e:	4603      	mov	r3, r0
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	1ae2      	subs	r2, r4, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	601a      	str	r2, [r3, #0]
    return i;
 80049a8:	68fb      	ldr	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd90      	pop	{r4, r7, pc}

080049b2 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80049b2:	b590      	push	{r4, r7, lr}
 80049b4:	b08f      	sub	sp, #60	@ 0x3c
 80049b6:	af04      	add	r7, sp, #16
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80049c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d108      	bne.n	80049d8 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80049c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	601a      	str	r2, [r3, #0]
        *off = 0;
 80049ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
        return 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e053      	b.n	8004a80 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80049d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049da:	3b01      	subs	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	4619      	mov	r1, r3
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff ffac 	bl	8004942 <lfs_ctz_index>
 80049ea:	4603      	mov	r3, r0
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80049ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80049f2:	4619      	mov	r1, r3
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff ffa4 	bl	8004942 <lfs_ctz_index>
 80049fa:	4603      	mov	r3, r0
 80049fc:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80049fe:	e034      	b.n	8004a6a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fc f8a2 	bl	8000b52 <lfs_npw2>
 8004a0e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004a10:	1e5c      	subs	r4, r3, #1
 8004a12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a14:	f7fc f8ad 	bl	8000b72 <lfs_ctz>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7fc f861 	bl	8000ae4 <lfs_min>
 8004a22:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	0092      	lsls	r2, r2, #2
 8004a2a:	2104      	movs	r1, #4
 8004a2c:	9103      	str	r1, [sp, #12]
 8004a2e:	4639      	mov	r1, r7
 8004a30:	9102      	str	r1, [sp, #8]
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2304      	movs	r3, #4
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7fc f92d 	bl	8000c9c <lfs_bd_read>
 8004a42:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc f8bc 	bl	8000bc4 <lfs_fromle32>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	603b      	str	r3, [r7, #0]
        if (err) {
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <lfs_ctz_find+0xa8>
            return err;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	e012      	b.n	8004a80 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d8c6      	bhi.n	8004a00 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a76:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004a78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7c:	601a      	str	r2, [r3, #0]
    return 0;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	372c      	adds	r7, #44	@ 0x2c
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd90      	pop	{r4, r7, pc}

08004a88 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b092      	sub	sp, #72	@ 0x48
 8004a8c:	af04      	add	r7, sp, #16
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004a96:	f107 0320 	add.w	r3, r7, #32
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7fc ff51 	bl	8001944 <lfs_alloc>
 8004aa2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <lfs_ctz_extend+0x26>
            return err;
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	e0e9      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7fc fbe6 	bl	8001284 <lfs_bd_erase>
 8004ab8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8004aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004ac6:	f000 80cb 	beq.w	8004c60 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004acc:	e0d9      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad8:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
                return 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e0ce      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004aea:	f107 031c 	add.w	r3, r7, #28
 8004aee:	4619      	mov	r1, r3
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff ff26 	bl	8004942 <lfs_ctz_index>
 8004af6:	4603      	mov	r3, r0
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d044      	beq.n	8004b96 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b10:	e035      	b.n	8004b7e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	2301      	movs	r3, #1
 8004b1a:	9303      	str	r3, [sp, #12]
 8004b1c:	f107 0317 	add.w	r3, r7, #23
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	2100      	movs	r1, #0
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7fc f8b3 	bl	8000c9c <lfs_bd_read>
 8004b36:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <lfs_ctz_extend+0xba>
                        return err;
 8004b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b40:	e09f      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	2201      	movs	r2, #1
 8004b46:	9203      	str	r2, [sp, #12]
 8004b48:	f107 0217 	add.w	r2, r7, #23
 8004b4c:	9202      	str	r2, [sp, #8]
 8004b4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b50:	9201      	str	r2, [sp, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2301      	movs	r3, #1
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7fc fae4 	bl	8001128 <lfs_bd_prog>
 8004b60:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004b6e:	d101      	bne.n	8004b74 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004b70:	bf00      	nop
                    goto relocate;
 8004b72:	e075      	b.n	8004c60 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8004b76:	e084      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3c5      	bcc.n	8004b12 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004b86:	6a3a      	ldr	r2, [r7, #32]
 8004b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8a:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b90:	601a      	str	r2, [r3, #0]
                return 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e075      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	3301      	adds	r3, #1
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b9e:	f7fb ffe8 	bl	8000b72 <lfs_ctz>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004bac:	2300      	movs	r3, #0
 8004bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb0:	e049      	b.n	8004c46 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fc f810 	bl	8000bda <lfs_tole32>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc2:	0092      	lsls	r2, r2, #2
 8004bc4:	2104      	movs	r1, #4
 8004bc6:	9103      	str	r1, [sp, #12]
 8004bc8:	f107 0118 	add.w	r1, r7, #24
 8004bcc:	9102      	str	r1, [sp, #8]
 8004bce:	9201      	str	r2, [sp, #4]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7fc faa5 	bl	8001128 <lfs_bd_prog>
 8004bde:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fb ffee 	bl	8000bc4 <lfs_fromle32>
 8004be8:	4603      	mov	r3, r0
 8004bea:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004bf8:	d034      	beq.n	8004c64 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	e041      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	3b01      	subs	r3, #1
 8004c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d01b      	beq.n	8004c40 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0c:	0092      	lsls	r2, r2, #2
 8004c0e:	2104      	movs	r1, #4
 8004c10:	9103      	str	r1, [sp, #12]
 8004c12:	f107 0118 	add.w	r1, r7, #24
 8004c16:	9102      	str	r1, [sp, #8]
 8004c18:	9201      	str	r2, [sp, #4]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	2100      	movs	r1, #0
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7fc f83a 	bl	8000c9c <lfs_bd_read>
 8004c28:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fb ffc9 	bl	8000bc4 <lfs_fromle32>
 8004c32:	4603      	mov	r3, r0
 8004c34:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <lfs_ctz_extend+0x1b8>
                        return err;
 8004c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3e:	e020      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	3301      	adds	r3, #1
 8004c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3b1      	bcc.n	8004bb2 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c52:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	009a      	lsls	r2, r3, #2
 8004c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c5a:	601a      	str	r2, [r3, #0]
            return 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e010      	b.n	8004c82 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004c64:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	4a08      	ldr	r2, [pc, #32]	@ (8004c8c <lfs_ctz_extend+0x204>)
 8004c6a:	9200      	str	r2, [sp, #0]
 8004c6c:	f640 22da 	movw	r2, #2778	@ 0xada
 8004c70:	4907      	ldr	r1, [pc, #28]	@ (8004c90 <lfs_ctz_extend+0x208>)
 8004c72:	4808      	ldr	r0, [pc, #32]	@ (8004c94 <lfs_ctz_extend+0x20c>)
 8004c74:	f005 f93c 	bl	8009ef0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7fb ffe8 	bl	8000c50 <lfs_cache_drop>
    while (true) {
 8004c80:	e709      	b.n	8004a96 <lfs_ctz_extend+0xe>
    }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3738      	adds	r7, #56	@ 0x38
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	0800acc8 	.word	0x0800acc8
 8004c90:	0800abd4 	.word	0x0800abd4
 8004c94:	0800ad48 	.word	0x0800ad48

08004c98 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b090      	sub	sp, #64	@ 0x40
 8004c9c:	af04      	add	r7, sp, #16
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <lfs_ctz_traverse+0x18>
        return 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e06b      	b.n	8004d88 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	f107 031c 	add.w	r3, r7, #28
 8004cba:	4619      	mov	r1, r3
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fe40 	bl	8004942 <lfs_ctz_index>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8004cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc8:	6839      	ldr	r1, [r7, #0]
 8004cca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004ccc:	4798      	blx	r3
 8004cce:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <lfs_ctz_traverse+0x42>
            return err;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	e056      	b.n	8004d88 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <lfs_ctz_traverse+0x4c>
            return 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e051      	b.n	8004d88 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	f1c3 0302 	rsb	r3, r3, #2
 8004cee:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004cf2:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004cf6:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004cf8:	9303      	str	r3, [sp, #12]
 8004cfa:	f107 0314 	add.w	r3, r7, #20
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	2300      	movs	r3, #0
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7fb ffc4 	bl	8000c9c <lfs_bd_read>
 8004d14:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb ff53 	bl	8000bc4 <lfs_fromle32>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fb ff4d 	bl	8000bc4 <lfs_fromle32>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <lfs_ctz_traverse+0xa0>
            return err;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	e027      	b.n	8004d88 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8004d38:	2300      	movs	r3, #0
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d3c:	e012      	b.n	8004d64 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	3330      	adds	r3, #48	@ 0x30
 8004d44:	443b      	add	r3, r7
 8004d46:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004d50:	4798      	blx	r3
 8004d52:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <lfs_ctz_traverse+0xc6>
                return err;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	e014      	b.n	8004d88 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	3301      	adds	r3, #1
 8004d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	dbe7      	blt.n	8004d3e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	3330      	adds	r3, #48	@ 0x30
 8004d76:	443b      	add	r3, r7
 8004d78:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004d7c:	603b      	str	r3, [r7, #0]
        index -= count;
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8004d86:	e79e      	b.n	8004cc6 <lfs_ctz_traverse+0x2e>
    }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3730      	adds	r7, #48	@ 0x30
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004d90:	b5b0      	push	{r4, r5, r7, lr}
 8004d92:	b09a      	sub	sp, #104	@ 0x68
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f002 f81d 	bl	8006de8 <lfs_fs_forceconsistency>
 8004dae:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8004db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <lfs_file_rawopencfg+0x2a>
            return err;
 8004db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db8:	e1b0      	b.n	800511c <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004dbe:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f103 0108 	add.w	r1, r3, #8
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	3304      	adds	r3, #4
 8004de2:	1d3a      	adds	r2, r7, #4
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7fe f87f 	bl	8002ee8 <lfs_dir_find>
 8004dea:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	da0c      	bge.n	8004e0c <lfs_file_rawopencfg+0x7c>
 8004df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df4:	f113 0f02 	cmn.w	r3, #2
 8004df8:	d105      	bne.n	8004e06 <lfs_file_rawopencfg+0x76>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	889b      	ldrh	r3, [r3, #4]
 8004dfe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d102      	bne.n	8004e0c <lfs_file_rawopencfg+0x7c>
        err = tag;
 8004e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8004e0a:	e17c      	b.n	8005106 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7fc fd2c 	bl	8001872 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e1c:	f113 0f02 	cmn.w	r3, #2
 8004e20:	d14e      	bne.n	8004ec0 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d103      	bne.n	8004e34 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004e2c:	f06f 0301 	mvn.w	r3, #1
 8004e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004e32:	e168      	b.n	8005106 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb f9d2 	bl	80001e0 <strlen>
 8004e3c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d903      	bls.n	8004e50 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004e48:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8004e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004e4e:	e15a      	b.n	8005106 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f103 0108 	add.w	r1, r3, #8
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	889b      	ldrh	r3, [r3, #4]
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e66:	2300      	movs	r3, #0
 8004e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	889b      	ldrh	r3, [r3, #4]
 8004e6e:	029a      	lsls	r2, r3, #10
 8004e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	889b      	ldrh	r3, [r3, #4]
 8004e82:	029b      	lsls	r3, r3, #10
 8004e84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8e:	2300      	movs	r3, #0
 8004e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e92:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004e96:	2303      	movs	r3, #3
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff fd2d 	bl	80048f8 <lfs_dir_commit>
 8004e9e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8004ea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ea2:	f113 0f1c 	cmn.w	r3, #28
 8004ea6:	d001      	beq.n	8004eac <lfs_file_rawopencfg+0x11c>
 8004ea8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eaa:	e001      	b.n	8004eb0 <lfs_file_rawopencfg+0x120>
 8004eac:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8004eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8004eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 8125 	bne.w	8005104 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8004eba:	4b9a      	ldr	r3, [pc, #616]	@ (8005124 <lfs_file_rawopencfg+0x394>)
 8004ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ebe:	e044      	b.n	8004f4a <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8004eca:	f06f 0310 	mvn.w	r3, #16
 8004ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8004ed0:	e119      	b.n	8005106 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8004ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fc faf3 	bl	80014c0 <lfs_tag_type3>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d003      	beq.n	8004ee8 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8004ee0:	f06f 0314 	mvn.w	r3, #20
 8004ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8004ee6:	e10e      	b.n	8005106 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	889b      	ldrh	r3, [r3, #4]
 8004ef6:	029b      	lsls	r3, r3, #10
 8004ef8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004efc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f00:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f0e:	e01c      	b.n	8004f4a <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	889b      	ldrh	r3, [r3, #4]
 8004f1a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f20:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f28:	9200      	str	r2, [sp, #0]
 8004f2a:	4a7f      	ldr	r2, [pc, #508]	@ (8005128 <lfs_file_rawopencfg+0x398>)
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7fc fea3 	bl	8001c78 <lfs_dir_get>
 8004f32:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8004f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da02      	bge.n	8004f40 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8004f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004f3e:	e0e2      	b.n	8005106 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3328      	adds	r3, #40	@ 0x28
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fc fbed 	bl	8001724 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f4e:	e063      	b.n	8005018 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d03c      	beq.n	8004fd6 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f66:	6859      	ldr	r1, [r3, #4]
 8004f68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004f7a:	051a      	lsls	r2, r3, #20
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	889b      	ldrh	r3, [r3, #4]
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	ea42 0103 	orr.w	r1, r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8a:	6858      	ldr	r0, [r3, #4]
 8004f8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f8e:	4613      	mov	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4403      	add	r3, r0
 8004f98:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004f9a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800512c <lfs_file_rawopencfg+0x39c>)
 8004fb8:	4621      	mov	r1, r4
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7fc fe5c 	bl	8001c78 <lfs_dir_get>
 8004fc0:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da06      	bge.n	8004fd6 <lfs_file_rawopencfg+0x246>
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fca:	f113 0f02 	cmn.w	r3, #2
 8004fce:	d002      	beq.n	8004fd6 <lfs_file_rawopencfg+0x246>
                err = res;
 8004fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8004fd4:	e097      	b.n	8005106 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d017      	beq.n	8005012 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d903      	bls.n	8005006 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8004ffe:	f06f 031b 	mvn.w	r3, #27
 8005002:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005004:	e07f      	b.n	8005106 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005014:	3301      	adds	r3, #1
 8005016:	657b      	str	r3, [r7, #84]	@ 0x54
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005020:	429a      	cmp	r2, r3
 8005022:	d395      	bcc.n	8004f50 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005038:	e010      	b.n	800505c <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fdee 	bl	8000c22 <lfs_malloc>
 8005046:	4602      	mov	r2, r0
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8005054:	f06f 030b 	mvn.w	r3, #11
 8005058:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800505a:	e054      	b.n	8005106 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	3340      	adds	r3, #64	@ 0x40
 8005060:	4619      	mov	r1, r3
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7fb fe03 	bl	8000c6e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8005068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800506a:	4618      	mov	r0, r3
 800506c:	f7fc fa28 	bl	80014c0 <lfs_tag_type3>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	f240 2301 	movw	r3, #513	@ 0x201
 8005078:	429a      	cmp	r2, r3
 800507a:	d141      	bne.n	8005100 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f06f 0201 	mvn.w	r2, #1
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005086:	4618      	mov	r0, r3
 8005088:	f7fc fa54 	bl	8001534 <lfs_tag_size>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d020      	beq.n	8005100 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	889b      	ldrh	r3, [r3, #4]
 80050c8:	029c      	lsls	r4, r3, #10
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ce:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fb fd06 	bl	8000ae4 <lfs_min>
 80050d8:	4603      	mov	r3, r0
 80050da:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	4613      	mov	r3, r2
 80050e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005128 <lfs_file_rawopencfg+0x398>)
 80050ea:	4629      	mov	r1, r5
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7fc fdc3 	bl	8001c78 <lfs_dir_get>
 80050f2:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 80050f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da02      	bge.n	8005100 <lfs_file_rawopencfg+0x370>
                err = res;
 80050fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80050fe:	e002      	b.n	8005106 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8005100:	2300      	movs	r3, #0
 8005102:	e00b      	b.n	800511c <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8005104:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f80b 	bl	8005130 <lfs_file_rawclose>
    return err;
 800511a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800511c:	4618      	mov	r0, r3
 800511e:	3760      	adds	r7, #96	@ 0x60
 8005120:	46bd      	mov	sp, r7
 8005122:	bdb0      	pop	{r4, r5, r7, pc}
 8005124:	20100000 	.word	0x20100000
 8005128:	700ffc00 	.word	0x700ffc00
 800512c:	7ffffc00 	.word	0x7ffffc00

08005130 <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f9e5 	bl	800550c <lfs_file_rawsync>
 8005142:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8005144:	6839      	ldr	r1, [r7, #0]
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fb71 	bl	800182e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb fd6d 	bl	8000c3a <lfs_free>
    }

    return err;
 8005160:	68fb      	ldr	r3, [r7, #12]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b08d      	sub	sp, #52	@ 0x34
 8005170:	af06      	add	r7, sp, #24
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005176:	f107 030c 	add.w	r3, r7, #12
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7fc fbe1 	bl	8001944 <lfs_alloc>
 8005182:	6138      	str	r0, [r7, #16]
        if (err) {
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <lfs_file_relocate+0x22>
            return err;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	e0bb      	b.n	8005306 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc f876 	bl	8001284 <lfs_bd_erase>
 8005198:	6138      	str	r0, [r7, #16]
        if (err) {
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d006      	beq.n	80051ae <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80051a6:	f000 809b 	beq.w	80052e0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	e0ab      	b.n	8005306 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e069      	b.n	8005288 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d027      	beq.n	8005210 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f103 0008 	add.w	r0, r3, #8
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	889b      	ldrh	r3, [r3, #4]
 80051d8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80051da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e2:	2101      	movs	r1, #1
 80051e4:	9105      	str	r1, [sp, #20]
 80051e6:	f107 010b 	add.w	r1, r7, #11
 80051ea:	9104      	str	r1, [sp, #16]
 80051ec:	6979      	ldr	r1, [r7, #20]
 80051ee:	9103      	str	r1, [sp, #12]
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	4b47      	ldr	r3, [pc, #284]	@ (8005310 <lfs_file_relocate+0x1a4>)
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	9200      	str	r2, [sp, #0]
 80051f8:	4623      	mov	r3, r4
 80051fa:	2200      	movs	r2, #0
 80051fc:	4601      	mov	r1, r0
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fc fd55 	bl	8001cae <lfs_dir_getread>
 8005204:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01e      	beq.n	800524a <lfs_file_relocate+0xde>
                    return err;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	e07a      	b.n	8005306 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8005216:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad4      	subs	r4, r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	2201      	movs	r2, #1
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	f107 020b 	add.w	r2, r7, #11
 800522c:	9202      	str	r2, [sp, #8]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	9201      	str	r2, [sp, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	4623      	mov	r3, r4
 8005236:	4602      	mov	r2, r0
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fb fd2f 	bl	8000c9c <lfs_bd_read>
 800523e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <lfs_file_relocate+0xde>
                    return err;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	e05d      	b.n	8005306 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f103 0110 	add.w	r1, r3, #16
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	9203      	str	r2, [sp, #12]
 8005258:	f107 020b 	add.w	r2, r7, #11
 800525c:	9202      	str	r2, [sp, #8]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	9201      	str	r2, [sp, #4]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	2301      	movs	r3, #1
 8005266:	4602      	mov	r2, r0
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fb ff5d 	bl	8001128 <lfs_bd_prog>
 800526e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800527c:	d032      	beq.n	80052e4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	e041      	b.n	8005306 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3301      	adds	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	429a      	cmp	r2, r3
 8005290:	d390      	bcc.n	80051b4 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69d9      	ldr	r1, [r3, #28]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	461a      	mov	r2, r3
 80052a2:	f004 ff44 	bl	800a12e <memcpy>
        file->cache.block = lfs->pcache.block;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3310      	adds	r3, #16
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fb fcd2 	bl	8000c6e <lfs_cache_zero>

        file->block = nblock;
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	e012      	b.n	8005306 <lfs_file_relocate+0x19a>
                goto relocate;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <lfs_file_relocate+0x17a>
                    goto relocate;
 80052e4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <lfs_file_relocate+0x1a8>)
 80052ea:	9200      	str	r2, [sp, #0]
 80052ec:	f44f 6241 	mov.w	r2, #3088	@ 0xc10
 80052f0:	4909      	ldr	r1, [pc, #36]	@ (8005318 <lfs_file_relocate+0x1ac>)
 80052f2:	480a      	ldr	r0, [pc, #40]	@ (800531c <lfs_file_relocate+0x1b0>)
 80052f4:	f004 fdfc 	bl	8009ef0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3310      	adds	r3, #16
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb fca6 	bl	8000c50 <lfs_cache_drop>
    while (true) {
 8005304:	e737      	b.n	8005176 <lfs_file_relocate+0xa>
    }
}
 8005306:	4618      	mov	r0, r3
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd90      	pop	{r4, r7, pc}
 800530e:	bf00      	nop
 8005310:	fff7fc00 	.word	0xfff7fc00
 8005314:	0800acc8 	.word	0x0800acc8
 8005318:	0800abd4 	.word	0x0800abd4
 800531c:	0800ad48 	.word	0x0800ad48

08005320 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ack(lfs);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fc fae6 	bl	8001904 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ff16 	bl	800516c <lfs_file_relocate>
 8005340:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <lfs_file_outline+0x2c>
        return err;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	e006      	b.n	800535a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b09f      	sub	sp, #124	@ 0x7c
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d011      	beq.n	800539e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	3340      	adds	r3, #64	@ 0x40
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7fb fc5f 	bl	8000c50 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80a4 	beq.w	80054f4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d176      	bne.n	80054ac <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80053be:	f107 030c 	add.w	r3, r7, #12
 80053c2:	2254      	movs	r2, #84	@ 0x54
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f004 fdf7 	bl	8009fba <memset>
                .ctz.head = file->ctz.head,
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 80053d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053d8:	2301      	movs	r3, #1
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 80053e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80053e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fb fc2c 	bl	8000c50 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80053f8:	e02b      	b.n	8005452 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80053fa:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80053fe:	f107 010c 	add.w	r1, r7, #12
 8005402:	2301      	movs	r3, #1
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f90d 	bl	8005624 <lfs_file_flushedread>
 800540a:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 800540c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800540e:	2b00      	cmp	r3, #0
 8005410:	da01      	bge.n	8005416 <lfs_file_flush+0xb2>
                    return res;
 8005412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005414:	e06f      	b.n	80054f6 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005416:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 800541a:	2301      	movs	r3, #1
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa08 	bl	8005834 <lfs_file_flushedwrite>
 8005424:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8005426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005428:	2b00      	cmp	r3, #0
 800542a:	da01      	bge.n	8005430 <lfs_file_flush+0xcc>
                    return res;
 800542c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800542e:	e062      	b.n	80054f6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d00b      	beq.n	8005452 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	3340      	adds	r3, #64	@ 0x40
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb fc04 	bl	8000c50 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fb fbff 	bl	8000c50 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	429a      	cmp	r2, r3
 800545c:	d3cd      	bcc.n	80053fa <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	2301      	movs	r3, #1
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fb fdad 	bl	8000fc8 <lfs_bd_flush>
 800546e:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8005470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005472:	2b00      	cmp	r3, #0
 8005474:	d026      	beq.n	80054c4 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8005476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005478:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800547c:	d001      	beq.n	8005482 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800547e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005480:	e039      	b.n	80054f6 <lfs_file_flush+0x192>
                        goto relocate;
 8005482:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	4a1d      	ldr	r2, [pc, #116]	@ (8005500 <lfs_file_flush+0x19c>)
 800548a:	9200      	str	r2, [sp, #0]
 800548c:	f640 425f 	movw	r2, #3167	@ 0xc5f
 8005490:	491c      	ldr	r1, [pc, #112]	@ (8005504 <lfs_file_flush+0x1a0>)
 8005492:	481d      	ldr	r0, [pc, #116]	@ (8005508 <lfs_file_flush+0x1a4>)
 8005494:	f004 fd2c 	bl	8009ef0 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fe66 	bl	800516c <lfs_file_relocate>
 80054a0:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80054a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0da      	beq.n	800545e <lfs_file_flush+0xfa>
                    return err;
 80054a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054aa:	e024      	b.n	80054f6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f7fb fb04 	bl	8000ac4 <lfs_max>
 80054bc:	4602      	mov	r2, r0
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80054c2:	e000      	b.n	80054c6 <lfs_file_flush+0x162>
                break;
 80054c4:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054f2:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3774      	adds	r7, #116	@ 0x74
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}
 80054fe:	bf00      	nop
 8005500:	0800acc8 	.word	0x0800acc8
 8005504:	0800abd4 	.word	0x0800abd4
 8005508:	0800ad48 	.word	0x0800ad48

0800550c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b090      	sub	sp, #64	@ 0x40
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005522:	2300      	movs	r3, #0
 8005524:	e07a      	b.n	800561c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ff1b 	bl	8005364 <lfs_file_flush>
 800552e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	e06a      	b.n	800561c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d063      	beq.n	800561a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	4618      	mov	r0, r3
 8005558:	f7fb fedb 	bl	8001312 <lfs_pair_isnull>
 800555c:	4603      	mov	r3, r0
 800555e:	f083 0301 	eor.w	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8005564:	2b00      	cmp	r3, #0
 8005566:	d058      	beq.n	800561a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005574:	f240 2301 	movw	r3, #513	@ 0x201
 8005578:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557e:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	637b      	str	r3, [r7, #52]	@ 0x34
 8005586:	e014      	b.n	80055b2 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005588:	f240 2302 	movw	r3, #514	@ 0x202
 800558c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005594:	3228      	adds	r2, #40	@ 0x28
 8005596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800559a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800559e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc f8d6 	bl	8001754 <lfs_ctz_tole32>
            buffer = &ctz;
 80055a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055ac:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 80055ae:	2308      	movs	r3, #8
 80055b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f103 0108 	add.w	r1, r3, #8
 80055b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80055ba:	051a      	lsls	r2, r3, #20
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	889b      	ldrh	r3, [r3, #4]
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	431a      	orrs	r2, r3
 80055c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	889b      	ldrh	r3, [r3, #4]
 80055d2:	029a      	lsls	r2, r3, #10
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ea:	f107 0218 	add.w	r2, r7, #24
 80055ee:	2302      	movs	r3, #2
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff f981 	bl	80048f8 <lfs_dir_commit>
 80055f6:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	e006      	b.n	800561c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005612:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3740      	adds	r7, #64	@ 0x40
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005624:	b5b0      	push	{r4, r5, r7, lr}
 8005626:	b090      	sub	sp, #64	@ 0x40
 8005628:	af06      	add	r7, sp, #24
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	429a      	cmp	r2, r3
 8005644:	d301      	bcc.n	800564a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005646:	2300      	movs	r3, #0
 8005648:	e0b7      	b.n	80057ba <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	4619      	mov	r1, r3
 8005656:	6838      	ldr	r0, [r7, #0]
 8005658:	f7fb fa44 	bl	8000ae4 <lfs_min>
 800565c:	6038      	str	r0, [r7, #0]
    nsize = size;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005662:	e0a5      	b.n	80057b0 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005678:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d130      	bne.n	80056e0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11c      	bne.n	80056c4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	3138      	adds	r1, #56	@ 0x38
 80056a0:	68b8      	ldr	r0, [r7, #8]
 80056a2:	303c      	adds	r0, #60	@ 0x3c
 80056a4:	9003      	str	r0, [sp, #12]
 80056a6:	9102      	str	r1, [sp, #8]
 80056a8:	9201      	str	r2, [sp, #4]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	462b      	mov	r3, r5
 80056ae:	4622      	mov	r2, r4
 80056b0:	2100      	movs	r1, #0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff f97d 	bl	80049b2 <lfs_ctz_find>
 80056b8:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <lfs_file_flushedread+0xb0>
                    return err;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	e07a      	b.n	80057ba <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f06f 0201 	mvn.w	r2, #1
 80056ca:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	4619      	mov	r1, r3
 80056ee:	6a38      	ldr	r0, [r7, #32]
 80056f0:	f7fb f9f8 	bl	8000ae4 <lfs_min>
 80056f4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d026      	beq.n	8005750 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f103 0408 	add.w	r4, r3, #8
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005712:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	889b      	ldrh	r3, [r3, #4]
 8005718:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800571a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8005726:	69b8      	ldr	r0, [r7, #24]
 8005728:	9005      	str	r0, [sp, #20]
 800572a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800572c:	9004      	str	r0, [sp, #16]
 800572e:	9103      	str	r1, [sp, #12]
 8005730:	9302      	str	r3, [sp, #8]
 8005732:	4b24      	ldr	r3, [pc, #144]	@ (80057c4 <lfs_file_flushedread+0x1a0>)
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	9200      	str	r2, [sp, #0]
 8005738:	462b      	mov	r3, r5
 800573a:	2200      	movs	r2, #0
 800573c:	4621      	mov	r1, r4
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7fc fab5 	bl	8001cae <lfs_dir_getread>
 8005744:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01d      	beq.n	8005788 <lfs_file_flushedread+0x164>
                return err;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	e034      	b.n	80057ba <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800575a:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	9103      	str	r1, [sp, #12]
 8005768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800576a:	9102      	str	r1, [sp, #8]
 800576c:	9201      	str	r2, [sp, #4]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	4623      	mov	r3, r4
 8005772:	4602      	mov	r2, r0
 8005774:	2100      	movs	r1, #0
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7fb fa90 	bl	8000c9c <lfs_bd_read>
 800577c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <lfs_file_flushedread+0x164>
                return err;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	e018      	b.n	80057ba <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	441a      	add	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	441a      	add	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	4413      	add	r3, r2
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f47f af56 	bne.w	8005664 <lfs_file_flushedread+0x40>
    }

    return size;
 80057b8:	683b      	ldr	r3, [r7, #0]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3728      	adds	r7, #40	@ 0x28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bdb0      	pop	{r4, r5, r7, pc}
 80057c2:	bf00      	nop
 80057c4:	fff7fc00 	.word	0xfff7fc00

080057c8 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <lfs_file_rawread+0x28>
 80057e2:	4b11      	ldr	r3, [pc, #68]	@ (8005828 <lfs_file_rawread+0x60>)
 80057e4:	4a11      	ldr	r2, [pc, #68]	@ (800582c <lfs_file_rawread+0x64>)
 80057e6:	f640 41ea 	movw	r1, #3306	@ 0xcea
 80057ea:	4811      	ldr	r0, [pc, #68]	@ (8005830 <lfs_file_rawread+0x68>)
 80057ec:	f004 f9d0 	bl	8009b90 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fdb0 	bl	8005364 <lfs_file_flush>
 8005804:	6178      	str	r0, [r7, #20]
        if (err) {
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <lfs_file_rawread+0x48>
            return err;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	e006      	b.n	800581e <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff ff04 	bl	8005624 <lfs_file_flushedread>
 800581c:	4603      	mov	r3, r0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	0800aef0 	.word	0x0800aef0
 800582c:	0800b5bc 	.word	0x0800b5bc
 8005830:	0800abd4 	.word	0x0800abd4

08005834 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005834:	b5b0      	push	{r4, r5, r7, lr}
 8005836:	b090      	sub	sp, #64	@ 0x40
 8005838:	af04      	add	r7, sp, #16
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 810c 	beq.w	8005a70 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	441a      	add	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7fb f92c 	bl	8000ac4 <lfs_max>
 800586c:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                (lfs->cfg->metadata_max ?
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 8005884:	08db      	lsrs	r3, r3, #3
 8005886:	e003      	b.n	8005890 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800588c:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 800588e:	08db      	lsrs	r3, r3, #3
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fb f926 	bl	8000ae4 <lfs_min>
 8005898:	4603      	mov	r3, r0
 800589a:	4619      	mov	r1, r3
 800589c:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 80058a0:	f7fb f920 	bl	8000ae4 <lfs_min>
 80058a4:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80058a6:	429c      	cmp	r4, r3
 80058a8:	f240 80e2 	bls.w	8005a70 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff fd36 	bl	8005320 <lfs_file_outline>
 80058b4:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80d9 	beq.w	8005a70 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	e0d5      	b.n	8005a7a <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058e2:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d16b      	bne.n	80059c0 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d157      	bne.n	80059a4 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d12d      	bne.n	800595c <lfs_file_flushedwrite+0x128>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005904:	2b00      	cmp	r3, #0
 8005906:	d029      	beq.n	800595c <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800591a:	3a01      	subs	r2, #1
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	3138      	adds	r1, #56	@ 0x38
 8005920:	68b8      	ldr	r0, [r7, #8]
 8005922:	303c      	adds	r0, #60	@ 0x3c
 8005924:	9003      	str	r0, [sp, #12]
 8005926:	9102      	str	r1, [sp, #8]
 8005928:	9201      	str	r2, [sp, #4]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	462b      	mov	r3, r5
 800592e:	4622      	mov	r2, r4
 8005930:	2100      	movs	r1, #0
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff f83d 	bl	80049b2 <lfs_ctz_find>
 8005938:	6238      	str	r0, [r7, #32]
                    if (err) {
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	e094      	b.n	8005a7a <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	3340      	adds	r3, #64	@ 0x40
 8005954:	4619      	mov	r1, r3
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7fb f989 	bl	8000c6e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f7fb ffd1 	bl	8001904 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8005968:	68fc      	ldr	r4, [r7, #12]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	3238      	adds	r2, #56	@ 0x38
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	313c      	adds	r1, #60	@ 0x3c
 800597a:	9102      	str	r1, [sp, #8]
 800597c:	9201      	str	r2, [sp, #4]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	462b      	mov	r3, r5
 8005982:	4622      	mov	r2, r4
 8005984:	4601      	mov	r1, r0
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff f87e 	bl	8004a88 <lfs_ctz_extend>
 800598c:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00f      	beq.n	80059b4 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	e06a      	b.n	8005a7a <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f06f 0201 	mvn.w	r2, #1
 80059aa:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059d0:	f7fb f888 	bl	8000ae4 <lfs_min>
 80059d4:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80059dc:	68fc      	ldr	r4, [r7, #12]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	9103      	str	r1, [sp, #12]
 80059ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ec:	9102      	str	r1, [sp, #8]
 80059ee:	9201      	str	r2, [sp, #4]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	4622      	mov	r2, r4
 80059f6:	4601      	mov	r1, r0
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7fb fb95 	bl	8001128 <lfs_bd_prog>
 80059fe:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01c      	beq.n	8005a40 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005a0c:	d007      	beq.n	8005a1e <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	e02d      	b.n	8005a7a <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8005a1e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff fba2 	bl	800516c <lfs_file_relocate>
 8005a28:	6178      	str	r0, [r7, #20]
            if (err) {
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0d2      	beq.n	80059d6 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	e01c      	b.n	8005a7a <lfs_file_flushedwrite+0x246>
            break;
 8005a40:	bf00      	nop
            }
        }

        file->pos += diff;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	441a      	add	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	441a      	add	r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8005a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	4413      	add	r3, r2
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8005a62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ack(lfs);
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7fb ff4a 	bl	8001904 <lfs_alloc_ack>
    while (nsize > 0) {
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f47f af2b 	bne.w	80058ce <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005a78:	683b      	ldr	r3, [r7, #0]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3730      	adds	r7, #48	@ 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bdb0      	pop	{r4, r5, r7, pc}

08005a82 <lfs_file_rawseek>:
    return nsize;
}
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b08c      	sub	sp, #48	@ 0x30
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <lfs_file_rawseek+0x20>
        npos = off;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aa0:	e025      	b.n	8005aee <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10f      	bne.n	8005ac8 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aac:	461a      	mov	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da02      	bge.n	8005abc <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8005ab6:	f06f 0315 	mvn.w	r3, #21
 8005aba:	e067      	b.n	8005b8c <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ac6:	e012      	b.n	8005aee <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d10f      	bne.n	8005aee <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f875 	bl	8005bc0 <lfs_file_rawsize>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da02      	bge.n	8005aea <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8005ae4:	f06f 0315 	mvn.w	r3, #21
 8005ae8:	e050      	b.n	8005b8c <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d902      	bls.n	8005afe <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8005af8:	f06f 0315 	mvn.w	r3, #21
 8005afc:	e046      	b.n	8005b8c <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d101      	bne.n	8005b0c <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	e03f      	b.n	8005b8c <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d12b      	bne.n	8005b70 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	f107 0318 	add.w	r3, r7, #24
 8005b22:	4619      	mov	r1, r3
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7fe ff0c 	bl	8004942 <lfs_ctz_index>
 8005b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2e:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8005b30:	f107 0314 	add.w	r3, r7, #20
 8005b34:	4619      	mov	r1, r3
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7fe ff03 	bl	8004942 <lfs_ctz_index>
 8005b3c:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8005b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d114      	bne.n	8005b70 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d80f      	bhi.n	8005b70 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b58:	441a      	add	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d907      	bls.n	8005b70 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8005b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6e:	e00d      	b.n	8005b8c <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff fbf6 	bl	8005364 <lfs_file_flush>
 8005b78:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <lfs_file_rawseek+0x102>
        return err;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	e003      	b.n	8005b8c <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b88:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8005b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3730      	adds	r7, #48	@ 0x30
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff6c 	bl	8005a82 <lfs_file_rawseek>
 8005baa:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da01      	bge.n	8005bb6 <lfs_file_rawrewind+0x22>
        return (int)res;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	e000      	b.n	8005bb8 <lfs_file_rawrewind+0x24>
    }

    return 0;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7fa ff6f 	bl	8000ac4 <lfs_max>
 8005be6:	4603      	mov	r3, r0
 8005be8:	e001      	b.n	8005bee <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <lfs_rawremove>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b0a0      	sub	sp, #128	@ 0x80
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 f8f0 	bl	8006de8 <lfs_fs_forceconsistency>
 8005c08:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8005c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <lfs_rawremove+0x1c>
        return err;
 8005c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c12:	e0c4      	b.n	8005d9e <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8005c14:	463a      	mov	r2, r7
 8005c16:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7fd f963 	bl	8002ee8 <lfs_dir_find>
 8005c22:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8005c24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	db09      	blt.n	8005c3e <lfs_rawremove+0x46>
 8005c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fb fc71 	bl	8001514 <lfs_tag_id>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d107      	bne.n	8005c4e <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8005c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da01      	bge.n	8005c48 <lfs_rawremove+0x50>
 8005c44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c46:	e0aa      	b.n	8005d9e <lfs_rawremove+0x1a6>
 8005c48:	f06f 0315 	mvn.w	r3, #21
 8005c4c:	e0a7      	b.n	8005d9e <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8005c54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fb fc32 	bl	80014c0 <lfs_tag_type3>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d14a      	bne.n	8005cf8 <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8005c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fb fc55 	bl	8001514 <lfs_tag_id>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8005c6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c72:	f043 0308 	orr.w	r3, r3, #8
 8005c76:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005c7a:	f107 020c 	add.w	r2, r7, #12
 8005c7e:	9200      	str	r2, [sp, #0]
 8005c80:	4a49      	ldr	r2, [pc, #292]	@ (8005da8 <lfs_rawremove+0x1b0>)
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb fff8 	bl	8001c78 <lfs_dir_get>
 8005c88:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8005c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	da01      	bge.n	8005c94 <lfs_rawremove+0x9c>
            return (int)res;
 8005c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c92:	e084      	b.n	8005d9e <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8005c94:	f107 030c 	add.w	r3, r7, #12
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fb fbac 	bl	80013f6 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8005c9e:	f107 020c 	add.w	r2, r7, #12
 8005ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fd f884 	bl	8002db8 <lfs_dir_fetch>
 8005cb0:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <lfs_rawremove+0xc4>
            return err;
 8005cb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cba:	e070      	b.n	8005d9e <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8005cbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <lfs_rawremove+0xd4>
 8005cc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8005ccc:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8005cd0:	e065      	b.n	8005d9e <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fe09 	bl	80068ec <lfs_fs_preporphans>
 8005cda:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <lfs_rawremove+0xee>
            return err;
 8005ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce4:	e05b      	b.n	8005d9e <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8005cf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fb fc0a 	bl	8001514 <lfs_tag_id>
 8005d00:	4603      	mov	r3, r0
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005d08:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	f107 021c 	add.w	r2, r7, #28
 8005d16:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fe fdeb 	bl	80048f8 <lfs_dir_commit>
 8005d22:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8005d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8005d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d32:	e034      	b.n	8005d9e <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8005d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8005d3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fb fbbf 	bl	80014c0 <lfs_tag_type3>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d129      	bne.n	8005d9c <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8005d48:	f04f 31ff 	mov.w	r1, #4294967295
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fdcd 	bl	80068ec <lfs_fs_preporphans>
 8005d52:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <lfs_rawremove+0x166>
            return err;
 8005d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d5c:	e01f      	b.n	8005d9e <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8005d5e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8005d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d66:	3308      	adds	r3, #8
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fcde 	bl	800672c <lfs_fs_pred>
 8005d70:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <lfs_rawremove+0x184>
            return err;
 8005d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d7a:	e010      	b.n	8005d9e <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8005d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d80:	f103 0208 	add.w	r2, r3, #8
 8005d84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fd fc12 	bl	80035b4 <lfs_dir_drop>
 8005d90:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8005d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <lfs_rawremove+0x1a4>
            return err;
 8005d98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d9a:	e000      	b.n	8005d9e <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3778      	adds	r7, #120	@ 0x78
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	700ffc00 	.word	0x700ffc00

08005dac <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	@ 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	669a      	str	r2, [r3, #104]	@ 0x68
    int err = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <lfs_init+0x2c>
 8005dca:	4b92      	ldr	r3, [pc, #584]	@ (8006014 <lfs_init+0x268>)
 8005dcc:	4a92      	ldr	r2, [pc, #584]	@ (8006018 <lfs_init+0x26c>)
 8005dce:	f640 7146 	movw	r1, #3910	@ 0xf46
 8005dd2:	4892      	ldr	r0, [pc, #584]	@ (800601c <lfs_init+0x270>)
 8005dd4:	f003 fedc 	bl	8009b90 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <lfs_init+0x44>
 8005de2:	4b8f      	ldr	r3, [pc, #572]	@ (8006020 <lfs_init+0x274>)
 8005de4:	4a8c      	ldr	r2, [pc, #560]	@ (8006018 <lfs_init+0x26c>)
 8005de6:	f640 7147 	movw	r1, #3911	@ 0xf47
 8005dea:	488c      	ldr	r0, [pc, #560]	@ (800601c <lfs_init+0x270>)
 8005dec:	f003 fed0 	bl	8009b90 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <lfs_init+0x5c>
 8005dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8006024 <lfs_init+0x278>)
 8005dfc:	4a86      	ldr	r2, [pc, #536]	@ (8006018 <lfs_init+0x26c>)
 8005dfe:	f640 7148 	movw	r1, #3912	@ 0xf48
 8005e02:	4886      	ldr	r0, [pc, #536]	@ (800601c <lfs_init+0x270>)
 8005e04:	f003 fec4 	bl	8009b90 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e12:	6952      	ldr	r2, [r2, #20]
 8005e14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e18:	fb01 f202 	mul.w	r2, r1, r2
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <lfs_init+0x84>
 8005e22:	4b81      	ldr	r3, [pc, #516]	@ (8006028 <lfs_init+0x27c>)
 8005e24:	4a7c      	ldr	r2, [pc, #496]	@ (8006018 <lfs_init+0x26c>)
 8005e26:	f640 714c 	movw	r1, #3916	@ 0xf4c
 8005e2a:	487c      	ldr	r0, [pc, #496]	@ (800601c <lfs_init+0x270>)
 8005e2c:	f003 feb0 	bl	8009b90 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e3a:	6992      	ldr	r2, [r2, #24]
 8005e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e40:	fb01 f202 	mul.w	r2, r1, r2
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d006      	beq.n	8005e58 <lfs_init+0xac>
 8005e4a:	4b78      	ldr	r3, [pc, #480]	@ (800602c <lfs_init+0x280>)
 8005e4c:	4a72      	ldr	r2, [pc, #456]	@ (8006018 <lfs_init+0x26c>)
 8005e4e:	f640 714d 	movw	r1, #3917	@ 0xf4d
 8005e52:	4872      	ldr	r0, [pc, #456]	@ (800601c <lfs_init+0x270>)
 8005e54:	f003 fe9c 	bl	8009b90 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e62:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e68:	fb01 f202 	mul.w	r2, r1, r2
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d006      	beq.n	8005e80 <lfs_init+0xd4>
 8005e72:	4b6f      	ldr	r3, [pc, #444]	@ (8006030 <lfs_init+0x284>)
 8005e74:	4a68      	ldr	r2, [pc, #416]	@ (8006018 <lfs_init+0x26c>)
 8005e76:	f640 714e 	movw	r1, #3918	@ 0xf4e
 8005e7a:	4868      	ldr	r0, [pc, #416]	@ (800601c <lfs_init+0x270>)
 8005e7c:	f003 fe88 	bl	8009b90 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	3b08      	subs	r3, #8
 8005e88:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fa fe5e 	bl	8000b52 <lfs_npw2>
 8005e96:	4603      	mov	r3, r0
 8005e98:	009a      	lsls	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d906      	bls.n	8005eb2 <lfs_init+0x106>
 8005ea4:	4b63      	ldr	r3, [pc, #396]	@ (8006034 <lfs_init+0x288>)
 8005ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8006018 <lfs_init+0x26c>)
 8005ea8:	f640 7151 	movw	r1, #3921	@ 0xf51
 8005eac:	485b      	ldr	r0, [pc, #364]	@ (800601c <lfs_init+0x270>)
 8005eae:	f003 fe6f 	bl	8009b90 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <lfs_init+0x11e>
 8005ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8006038 <lfs_init+0x28c>)
 8005ebe:	4a56      	ldr	r2, [pc, #344]	@ (8006018 <lfs_init+0x26c>)
 8005ec0:	f640 715a 	movw	r1, #3930	@ 0xf5a
 8005ec4:	4855      	ldr	r0, [pc, #340]	@ (800601c <lfs_init+0x270>)
 8005ec6:	f003 fe63 	bl	8009b90 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]
 8005ede:	e010      	b.n	8005f02 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa fe9b 	bl	8000c22 <lfs_malloc>
 8005eec:	4602      	mov	r2, r0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8005efa:	f06f 030b 	mvn.w	r3, #11
 8005efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8005f00:	e0fd      	b.n	80060fe <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	61da      	str	r2, [r3, #28]
 8005f16:	e010      	b.n	8005f3a <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fa fe7f 	bl	8000c22 <lfs_malloc>
 8005f24:	4602      	mov	r2, r0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8005f32:	f06f 030b 	mvn.w	r3, #11
 8005f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8005f38:	e0e1      	b.n	80060fe <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fa fe95 	bl	8000c6e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3310      	adds	r3, #16
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fa fe8f 	bl	8000c6e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <lfs_init+0x1bc>
 8005f5a:	4b38      	ldr	r3, [pc, #224]	@ (800603c <lfs_init+0x290>)
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <lfs_init+0x26c>)
 8005f5e:	f640 7178 	movw	r1, #3960	@ 0xf78
 8005f62:	482e      	ldr	r0, [pc, #184]	@ (800601c <lfs_init+0x270>)
 8005f64:	f003 fe14 	bl	8009b90 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <lfs_init+0x1d8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <lfs_init+0x1e6>
 8005f84:	4b2e      	ldr	r3, [pc, #184]	@ (8006040 <lfs_init+0x294>)
 8005f86:	4a24      	ldr	r2, [pc, #144]	@ (8006018 <lfs_init+0x26c>)
 8005f88:	f640 7179 	movw	r1, #3961	@ 0xf79
 8005f8c:	4823      	ldr	r0, [pc, #140]	@ (800601c <lfs_init+0x270>)
 8005f8e:	f003 fdff 	bl	8009b90 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	665a      	str	r2, [r3, #100]	@ 0x64
 8005fa6:	e010      	b.n	8005fca <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fa fe37 	bl	8000c22 <lfs_malloc>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->free.buffer) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8005fc2:	f06f 030b 	mvn.w	r3, #11
 8005fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8005fc8:	e099      	b.n	80060fe <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd0:	2bff      	cmp	r3, #255	@ 0xff
 8005fd2:	d906      	bls.n	8005fe2 <lfs_init+0x236>
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006044 <lfs_init+0x298>)
 8005fd6:	4a10      	ldr	r2, [pc, #64]	@ (8006018 <lfs_init+0x26c>)
 8005fd8:	f640 7186 	movw	r1, #3974	@ 0xf86
 8005fdc:	480f      	ldr	r0, [pc, #60]	@ (800601c <lfs_init+0x270>)
 8005fde:	f003 fdd7 	bl	8009b90 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (!lfs->name_max) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	22ff      	movs	r2, #255	@ 0xff
 8005ff8:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	da23      	bge.n	800604c <lfs_init+0x2a0>
 8006004:	4b10      	ldr	r3, [pc, #64]	@ (8006048 <lfs_init+0x29c>)
 8006006:	4a04      	ldr	r2, [pc, #16]	@ (8006018 <lfs_init+0x26c>)
 8006008:	f640 718c 	movw	r1, #3980	@ 0xf8c
 800600c:	4803      	ldr	r0, [pc, #12]	@ (800601c <lfs_init+0x270>)
 800600e:	f003 fdbf 	bl	8009b90 <__assert_func>
 8006012:	bf00      	nop
 8006014:	0800af50 	.word	0x0800af50
 8006018:	0800b5d0 	.word	0x0800b5d0
 800601c:	0800abd4 	.word	0x0800abd4
 8006020:	0800af6c 	.word	0x0800af6c
 8006024:	0800af88 	.word	0x0800af88
 8006028:	0800afa4 	.word	0x0800afa4
 800602c:	0800afd4 	.word	0x0800afd4
 8006030:	0800b004 	.word	0x0800b004
 8006034:	0800b038 	.word	0x0800b038
 8006038:	0800b084 	.word	0x0800b084
 800603c:	0800b0a0 	.word	0x0800b0a0
 8006040:	0800b0c0 	.word	0x0800b0c0
 8006044:	0800b114 	.word	0x0800b114
 8006048:	0800b130 	.word	0x0800b130
    lfs->file_max = lfs->cfg->file_max;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->file_max) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006064:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800606a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8006070:	4293      	cmp	r3, r2
 8006072:	d906      	bls.n	8006082 <lfs_init+0x2d6>
 8006074:	4b26      	ldr	r3, [pc, #152]	@ (8006110 <lfs_init+0x364>)
 8006076:	4a27      	ldr	r2, [pc, #156]	@ (8006114 <lfs_init+0x368>)
 8006078:	f640 7192 	movw	r1, #3986	@ 0xf92
 800607c:	4826      	ldr	r0, [pc, #152]	@ (8006118 <lfs_init+0x36c>)
 800607e:	f003 fd87 	bl	8009b90 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006086:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->attr_max) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800609a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d906      	bls.n	80060ba <lfs_init+0x30e>
 80060ac:	4b1b      	ldr	r3, [pc, #108]	@ (800611c <lfs_init+0x370>)
 80060ae:	4a19      	ldr	r2, [pc, #100]	@ (8006114 <lfs_init+0x368>)
 80060b0:	f640 7198 	movw	r1, #3992	@ 0xf98
 80060b4:	4818      	ldr	r0, [pc, #96]	@ (8006118 <lfs_init+0x36c>)
 80060b6:	f003 fd6b 	bl	8009b90 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f04f 32ff 	mov.w	r2, #4294967295
 80060c8:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	333c      	adds	r3, #60	@ 0x3c
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	605a      	str	r2, [r3, #4]
 80060e0:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3330      	adds	r3, #48	@ 0x30
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3348      	adds	r3, #72	@ 0x48
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	605a      	str	r2, [r3, #4]
 80060f8:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e003      	b.n	8006106 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f80e 	bl	8006120 <lfs_deinit>
    return err;
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006106:	4618      	mov	r0, r3
 8006108:	3730      	adds	r7, #48	@ 0x30
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	0800b154 	.word	0x0800b154
 8006114:	0800b5d0 	.word	0x0800b5d0
 8006118:	0800abd4 	.word	0x0800abd4
 800611c:	0800b170 	.word	0x0800b170

08006120 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa fd7f 	bl	8000c3a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fa fd75 	bl	8000c3a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800615e:	4618      	mov	r0, r3
 8006160:	f7fa fd6b 	bl	8000c3a <lfs_free>
    }

    return 0;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <lfs_rawmount>:
    return err;

}
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b09c      	sub	sp, #112	@ 0x70
 8006174:	af04      	add	r7, sp, #16
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fe15 	bl	8005dac <lfs_init>
 8006182:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (err) {
 8006184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <lfs_rawmount+0x1e>
        return err;
 800618a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800618c:	e192      	b.n	80064b4 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800618e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006192:	2220      	movs	r2, #32
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f003 ff0f 	bl	8009fba <memset>
 800619c:	2301      	movs	r3, #1
 800619e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    lfs_block_t cycle = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 80061a4:	e10b      	b.n	80063be <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d303      	bcc.n	80061bc <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 80061b4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80061b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80061ba:	e177      	b.n	80064ac <lfs_rawmount+0x33c>
        }
        cycle += 1;
 80061bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061be:	3301      	adds	r3, #1
 80061c0:	65bb      	str	r3, [r7, #88]	@ 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c6:	4b8a      	ldr	r3, [pc, #552]	@ (80063f0 <lfs_rawmount+0x280>)
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ca:	2308      	movs	r3, #8
 80061cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80061ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80061d2:	f103 0218 	add.w	r2, r3, #24
 80061d6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80061da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061de:	9303      	str	r3, [sp, #12]
 80061e0:	4b84      	ldr	r3, [pc, #528]	@ (80063f4 <lfs_rawmount+0x284>)
 80061e2:	9302      	str	r3, [sp, #8]
 80061e4:	2300      	movs	r3, #0
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	4b83      	ldr	r3, [pc, #524]	@ (80063f8 <lfs_rawmount+0x288>)
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	4b83      	ldr	r3, [pc, #524]	@ (80063fc <lfs_rawmount+0x28c>)
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fc fa74 	bl	80026dc <lfs_dir_fetchmatch>
 80061f4:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80061f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da02      	bge.n	8006202 <lfs_rawmount+0x92>
            err = tag;
 80061fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8006200:	e154      	b.n	80064ac <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8006202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80cd 	beq.w	80063a4 <lfs_rawmount+0x234>
 800620a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620c:	4618      	mov	r0, r3
 800620e:	f7fb f934 	bl	800147a <lfs_tag_isdelete>
 8006212:	4603      	mov	r3, r0
 8006214:	f083 0301 	eor.w	r3, r3, #1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80c2 	beq.w	80063a4 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8006220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800622c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8006230:	f107 030c 	add.w	r3, r7, #12
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	4b72      	ldr	r3, [pc, #456]	@ (8006400 <lfs_rawmount+0x290>)
 8006238:	4a70      	ldr	r2, [pc, #448]	@ (80063fc <lfs_rawmount+0x28c>)
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fb fd1c 	bl	8001c78 <lfs_dir_get>
 8006240:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006244:	2b00      	cmp	r3, #0
 8006246:	da02      	bge.n	800624e <lfs_rawmount+0xde>
                err = tag;
 8006248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800624a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800624c:	e12e      	b.n	80064ac <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 800624e:	f107 030c 	add.w	r3, r7, #12
 8006252:	4618      	mov	r0, r3
 8006254:	f7fb fa96 	bl	8001784 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8006266:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800626a:	2b02      	cmp	r3, #2
 800626c:	d103      	bne.n	8006276 <lfs_rawmount+0x106>
 800626e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8006276:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800627a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800627e:	4961      	ldr	r1, [pc, #388]	@ (8006404 <lfs_rawmount+0x294>)
 8006280:	9101      	str	r1, [sp, #4]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	f241 0233 	movw	r2, #4147	@ 0x1033
 800628a:	495f      	ldr	r1, [pc, #380]	@ (8006408 <lfs_rawmount+0x298>)
 800628c:	485f      	ldr	r0, [pc, #380]	@ (800640c <lfs_rawmount+0x29c>)
 800628e:	f003 fe2f 	bl	8009ef0 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8006292:	f06f 0315 	mvn.w	r3, #21
 8006296:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8006298:	e083      	b.n	80063a2 <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d018      	beq.n	80062d2 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d910      	bls.n	80062cc <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b0:	4954      	ldr	r1, [pc, #336]	@ (8006404 <lfs_rawmount+0x294>)
 80062b2:	9101      	str	r1, [sp, #4]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	f241 023c 	movw	r2, #4156	@ 0x103c
 80062bc:	4952      	ldr	r1, [pc, #328]	@ (8006408 <lfs_rawmount+0x298>)
 80062be:	4854      	ldr	r0, [pc, #336]	@ (8006410 <lfs_rawmount+0x2a0>)
 80062c0:	f003 fe16 	bl	8009ef0 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80062c4:	f06f 0315 	mvn.w	r3, #21
 80062c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 80062ca:	e06a      	b.n	80063a2 <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            if (superblock.file_max) {
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d018      	beq.n	800630a <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062de:	429a      	cmp	r2, r3
 80062e0:	d910      	bls.n	8006304 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e8:	4946      	ldr	r1, [pc, #280]	@ (8006404 <lfs_rawmount+0x294>)
 80062ea:	9101      	str	r1, [sp, #4]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	f241 0247 	movw	r2, #4167	@ 0x1047
 80062f4:	4944      	ldr	r1, [pc, #272]	@ (8006408 <lfs_rawmount+0x298>)
 80062f6:	4847      	ldr	r0, [pc, #284]	@ (8006414 <lfs_rawmount+0x2a4>)
 80062f8:	f003 fdfa 	bl	8009ef0 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80062fc:	f06f 0315 	mvn.w	r3, #21
 8006300:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 8006302:	e04e      	b.n	80063a2 <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.attr_max) {
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d018      	beq.n	8006342 <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006316:	429a      	cmp	r2, r3
 8006318:	d910      	bls.n	800633c <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006320:	4938      	ldr	r1, [pc, #224]	@ (8006404 <lfs_rawmount+0x294>)
 8006322:	9101      	str	r1, [sp, #4]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	f241 0252 	movw	r2, #4178	@ 0x1052
 800632c:	4936      	ldr	r1, [pc, #216]	@ (8006408 <lfs_rawmount+0x298>)
 800632e:	483a      	ldr	r0, [pc, #232]	@ (8006418 <lfs_rawmount+0x2a8>)
 8006330:	f003 fdde 	bl	8009ef0 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006334:	f06f 0315 	mvn.w	r3, #21
 8006338:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 800633a:	e032      	b.n	80063a2 <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	429a      	cmp	r2, r3
 800634c:	d011      	beq.n	8006372 <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	492b      	ldr	r1, [pc, #172]	@ (8006404 <lfs_rawmount+0x294>)
 8006358:	9101      	str	r1, [sp, #4]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	4613      	mov	r3, r2
 800635e:	f241 025c 	movw	r2, #4188	@ 0x105c
 8006362:	4929      	ldr	r1, [pc, #164]	@ (8006408 <lfs_rawmount+0x298>)
 8006364:	482d      	ldr	r0, [pc, #180]	@ (800641c <lfs_rawmount+0x2ac>)
 8006366:	f003 fdc3 	bl	8009ef0 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800636a:	f06f 0315 	mvn.w	r3, #21
 800636e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8006370:	e017      	b.n	80063a2 <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	429a      	cmp	r2, r3
 800637c:	d012      	beq.n	80063a4 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	491f      	ldr	r1, [pc, #124]	@ (8006404 <lfs_rawmount+0x294>)
 8006388:	9101      	str	r1, [sp, #4]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	f241 0263 	movw	r2, #4195	@ 0x1063
 8006392:	491d      	ldr	r1, [pc, #116]	@ (8006408 <lfs_rawmount+0x298>)
 8006394:	4822      	ldr	r0, [pc, #136]	@ (8006420 <lfs_rawmount+0x2b0>)
 8006396:	f003 fdab 	bl	8009ef0 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 800639a:	f06f 0315 	mvn.w	r3, #21
 800639e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80063a0:	bf00      	nop
            goto cleanup;
 80063a2:	e083      	b.n	80064ac <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fc fd1d 	bl	8002df0 <lfs_dir_getgstate>
 80063b6:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err) {
 80063b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d175      	bne.n	80064aa <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 80063be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063c2:	3318      	adds	r3, #24
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fa ffa4 	bl	8001312 <lfs_pair_isnull>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f083 0301 	eor.w	r3, r3, #1
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f47f aee7 	bne.w	80061a6 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3320      	adds	r3, #32
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fa ff98 	bl	8001312 <lfs_pair_isnull>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01d      	beq.n	8006424 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 80063e8:	f06f 0315 	mvn.w	r3, #21
 80063ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 80063ee:	e05d      	b.n	80064ac <lfs_rawmount+0x33c>
 80063f0:	0800b1a0 	.word	0x0800b1a0
 80063f4:	08002e55 	.word	0x08002e55
 80063f8:	0ff00008 	.word	0x0ff00008
 80063fc:	7ffffc00 	.word	0x7ffffc00
 8006400:	20100018 	.word	0x20100018
 8006404:	0800acc8 	.word	0x0800acc8
 8006408:	0800abd4 	.word	0x0800abd4
 800640c:	0800b1ac 	.word	0x0800b1ac
 8006410:	0800b1d8 	.word	0x0800b1d8
 8006414:	0800b20c 	.word	0x0800b20c
 8006418:	0800b240 	.word	0x0800b240
 800641c:	0800b274 	.word	0x0800b274
 8006420:	0800b2a8 	.word	0x0800b2a8
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3330      	adds	r3, #48	@ 0x30
 8006428:	4618      	mov	r0, r3
 800642a:	f7fb f8c9 	bl	80015c0 <lfs_gstate_iszero>
 800642e:	4603      	mov	r3, r0
 8006430:	f083 0301 	eor.w	r3, r3, #1
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d010      	beq.n	800645c <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006446:	481d      	ldr	r0, [pc, #116]	@ (80064bc <lfs_rawmount+0x34c>)
 8006448:	9002      	str	r0, [sp, #8]
 800644a:	9201      	str	r2, [sp, #4]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	460b      	mov	r3, r1
 8006450:	f241 0279 	movw	r2, #4217	@ 0x1079
 8006454:	491a      	ldr	r1, [pc, #104]	@ (80064c0 <lfs_rawmount+0x350>)
 8006456:	481b      	ldr	r0, [pc, #108]	@ (80064c4 <lfs_rawmount+0x354>)
 8006458:	f003 fd4a 	bl	8009ef0 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	4618      	mov	r0, r3
 8006462:	f7fa fffc 	bl	800145e <lfs_tag_isvalid>
 8006466:	4603      	mov	r3, r0
 8006468:	f083 0301 	eor.w	r3, r3, #1
 800646c:	b2db      	uxtb	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006474:	441a      	add	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	333c      	adds	r3, #60	@ 0x3c
 8006480:	3230      	adds	r2, #48	@ 0x30
 8006482:	ca07      	ldmia	r2, {r0, r1, r2}
 8006484:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006490:	6a12      	ldr	r2, [r2, #32]
 8006492:	fbb3 f1f2 	udiv	r1, r3, r2
 8006496:	fb01 f202 	mul.w	r2, r1, r2
 800649a:	1a9a      	subs	r2, r3, r2
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fb fa3e 	bl	8001922 <lfs_alloc_drop>

    return 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e004      	b.n	80064b4 <lfs_rawmount+0x344>
            goto cleanup;
 80064aa:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f80b 	bl	80064c8 <lfs_rawunmount>
    return err;
 80064b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3760      	adds	r7, #96	@ 0x60
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	0800acc8 	.word	0x0800acc8
 80064c0:	0800abd4 	.word	0x0800abd4
 80064c4:	0800b2d8 	.word	0x0800b2d8

080064c8 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fe25 	bl	8006120 <lfs_deinit>
 80064d6:	4603      	mov	r3, r0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b09d      	sub	sp, #116	@ 0x74
 80064e4:	af04      	add	r7, sp, #16
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80064ee:	f107 0318 	add.w	r3, r7, #24
 80064f2:	2220      	movs	r2, #32
 80064f4:	2100      	movs	r1, #0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f003 fd5f 	bl	8009fba <memset>
 80064fc:	2301      	movs	r3, #1
 80064fe:	637b      	str	r3, [r7, #52]	@ 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006504:	e0a7      	b.n	8006656 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006514:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006518:	e102      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800651a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800651c:	3301      	adds	r3, #1
 800651e:	65fb      	str	r3, [r7, #92]	@ 0x5c

        for (int i = 0; i < 2; i++) {
 8006520:	2300      	movs	r3, #0
 8006522:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006524:	e013      	b.n	800654e <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8006526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006528:	3306      	adds	r3, #6
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	3360      	adds	r3, #96	@ 0x60
 800652e:	443b      	add	r3, r7
 8006530:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4611      	mov	r1, r2
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
 800653c:	63b8      	str	r0, [r7, #56]	@ 0x38
            if (err) {
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <lfs_fs_rawtraverse+0x68>
                return err;
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	e0eb      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8006548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800654a:	3301      	adds	r3, #1
 800654c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800654e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006550:	2b01      	cmp	r3, #1
 8006552:	dde8      	ble.n	8006526 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006554:	f107 0318 	add.w	r3, r7, #24
 8006558:	f103 0218 	add.w	r2, r3, #24
 800655c:	f107 0318 	add.w	r3, r7, #24
 8006560:	4619      	mov	r1, r3
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7fc fc28 	bl	8002db8 <lfs_dir_fetch>
 8006568:	6438      	str	r0, [r7, #64]	@ 0x40
        if (err) {
 800656a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <lfs_fs_rawtraverse+0x94>
            return err;
 8006570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006572:	e0d5      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006574:	2300      	movs	r3, #0
 8006576:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800657a:	e067      	b.n	800664c <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800657c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006580:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006582:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006586:	f043 0308 	orr.w	r3, r3, #8
 800658a:	f107 0118 	add.w	r1, r7, #24
 800658e:	f107 0210 	add.w	r2, r7, #16
 8006592:	9200      	str	r2, [sp, #0]
 8006594:	4a64      	ldr	r2, [pc, #400]	@ (8006728 <lfs_fs_rawtraverse+0x248>)
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7fb fb6e 	bl	8001c78 <lfs_dir_get>
 800659c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            if (tag < 0) {
 800659e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	da05      	bge.n	80065b0 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 80065a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a6:	f113 0f02 	cmn.w	r3, #2
 80065aa:	d049      	beq.n	8006640 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 80065ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ae:	e0b7      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 80065b0:	f107 0310 	add.w	r3, r7, #16
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fb f8b5 	bl	8001724 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80065ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fa ff7f 	bl	80014c0 <lfs_tag_type3>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	f240 2302 	movw	r3, #514	@ 0x202
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d113      	bne.n	80065f6 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	6938      	ldr	r0, [r7, #16]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	9202      	str	r2, [sp, #8]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	9201      	str	r2, [sp, #4]
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	4603      	mov	r3, r0
 80065e0:	460a      	mov	r2, r1
 80065e2:	2100      	movs	r1, #0
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7fe fb57 	bl	8004c98 <lfs_ctz_traverse>
 80065ea:	6438      	str	r0, [r7, #64]	@ 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80065ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d027      	beq.n	8006642 <lfs_fs_rawtraverse+0x162>
                    return err;
 80065f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f4:	e094      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d022      	beq.n	8006642 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80065fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fa ff5e 	bl	80014c0 <lfs_tag_type3>
 8006604:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800660a:	d11a      	bne.n	8006642 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 800660c:	2300      	movs	r3, #0
 800660e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006610:	e012      	b.n	8006638 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8006612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	f107 0210 	add.w	r2, r7, #16
 800661a:	4413      	add	r3, r2
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4611      	mov	r1, r2
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
 8006626:	6438      	str	r0, [r7, #64]	@ 0x40
                    if (err) {
 8006628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <lfs_fs_rawtraverse+0x152>
                        return err;
 800662e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006630:	e076      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8006632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006634:	3301      	adds	r3, #1
 8006636:	653b      	str	r3, [r7, #80]	@ 0x50
 8006638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800663a:	2b01      	cmp	r3, #1
 800663c:	dde9      	ble.n	8006612 <lfs_fs_rawtraverse+0x132>
 800663e:	e000      	b.n	8006642 <lfs_fs_rawtraverse+0x162>
                    continue;
 8006640:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006642:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006646:	3301      	adds	r3, #1
 8006648:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800664c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800664e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8006652:	429a      	cmp	r2, r3
 8006654:	d392      	bcc.n	800657c <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8006656:	f107 0318 	add.w	r3, r7, #24
 800665a:	3318      	adds	r3, #24
 800665c:	4618      	mov	r0, r3
 800665e:	f7fa fe58 	bl	8001312 <lfs_pair_isnull>
 8006662:	4603      	mov	r3, r0
 8006664:	f083 0301 	eor.w	r3, r3, #1
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	f47f af4b 	bne.w	8006506 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006676:	e04f      	b.n	8006718 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8006678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800667a:	799b      	ldrb	r3, [r3, #6]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d147      	bne.n	8006710 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01d      	beq.n	80066c8 <lfs_fs_rawtraverse+0x1e8>
 800668c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800668e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d117      	bne.n	80066c8 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80066a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	9201      	str	r2, [sp, #4]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	4623      	mov	r3, r4
 80066b4:	4602      	mov	r2, r0
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7fe faee 	bl	8004c98 <lfs_ctz_traverse>
 80066bc:	64b8      	str	r0, [r7, #72]	@ 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80066be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <lfs_fs_rawtraverse+0x1e8>
                return err;
 80066c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c6:	e02b      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80066c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01e      	beq.n	8006712 <lfs_fs_rawtraverse+0x232>
 80066d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d118      	bne.n	8006712 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80066e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ea:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80066ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	9202      	str	r2, [sp, #8]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	9201      	str	r2, [sp, #4]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	4623      	mov	r3, r4
 80066fc:	4602      	mov	r2, r0
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7fe faca 	bl	8004c98 <lfs_ctz_traverse>
 8006704:	6478      	str	r0, [r7, #68]	@ 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8006706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <lfs_fs_rawtraverse+0x232>
                return err;
 800670c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800670e:	e007      	b.n	8006720 <lfs_fs_rawtraverse+0x240>
            continue;
 8006710:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1ac      	bne.n	8006678 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3764      	adds	r7, #100	@ 0x64
 8006724:	46bd      	mov	sp, r7
 8006726:	bd90      	pop	{r4, r7, pc}
 8006728:	700ffc00 	.word	0x700ffc00

0800672c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006748:	e024      	b.n	8006794 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	085b      	lsrs	r3, r3, #1
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006758:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800675c:	e027      	b.n	80067ae <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	3301      	adds	r3, #1
 8006762:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3318      	adds	r3, #24
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f7fa fdec 	bl	8001348 <lfs_pair_cmp>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <lfs_fs_pred+0x4e>
            return 0;
 8006776:	2300      	movs	r3, #0
 8006778:	e019      	b.n	80067ae <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3318      	adds	r3, #24
 800677e:	461a      	mov	r2, r3
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7fc fb18 	bl	8002db8 <lfs_dir_fetch>
 8006788:	6138      	str	r0, [r7, #16]
        if (err) {
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <lfs_fs_pred+0x68>
            return err;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	e00c      	b.n	80067ae <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3318      	adds	r3, #24
 8006798:	4618      	mov	r0, r3
 800679a:	f7fa fdba 	bl	8001312 <lfs_pair_isnull>
 800679e:	4603      	mov	r3, r0
 80067a0:	f083 0301 	eor.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1cf      	bne.n	800674a <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80067aa:	f06f 0301 	mvn.w	r3, #1
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80067b6:	b5b0      	push	{r4, r5, r7, lr}
 80067b8:	b08e      	sub	sp, #56	@ 0x38
 80067ba:	af04      	add	r7, sp, #16
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80067d6:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067dc:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 80067e6:	2108      	movs	r1, #8
 80067e8:	9103      	str	r1, [sp, #12]
 80067ea:	f107 0110 	add.w	r1, r7, #16
 80067ee:	9102      	str	r1, [sp, #8]
 80067f0:	9201      	str	r2, [sp, #4]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	462b      	mov	r3, r5
 80067f6:	4622      	mov	r2, r4
 80067f8:	4601      	mov	r1, r0
 80067fa:	6a38      	ldr	r0, [r7, #32]
 80067fc:	f7fa fa4e 	bl	8000c9c <lfs_bd_read>
 8006800:	61b8      	str	r0, [r7, #24]
    if (err) {
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <lfs_fs_parent_match+0x56>
        return err;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	e012      	b.n	8006832 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800680c:	f107 0310 	add.w	r3, r7, #16
 8006810:	4618      	mov	r0, r3
 8006812:	f7fa fdf0 	bl	80013f6 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	1d1a      	adds	r2, r3, #4
 800681a:	f107 0310 	add.w	r3, r7, #16
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7fa fd91 	bl	8001348 <lfs_pair_cmp>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
}
 8006832:	4618      	mov	r0, r3
 8006834:	3728      	adds	r7, #40	@ 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800683c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	@ 0x38
 8006840:	af04      	add	r7, sp, #16
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8006858:	e030      	b.n	80068bc <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006868:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800686c:	e033      	b.n	80068d6 <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	3301      	adds	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006882:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	3304      	adds	r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800688a:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800688c:	f107 0314 	add.w	r3, r7, #20
 8006890:	9303      	str	r3, [sp, #12]
 8006892:	4b13      	ldr	r3, [pc, #76]	@ (80068e0 <lfs_fs_parent+0xa4>)
 8006894:	9302      	str	r3, [sp, #8]
 8006896:	2300      	movs	r3, #0
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	4b12      	ldr	r3, [pc, #72]	@ (80068e4 <lfs_fs_parent+0xa8>)
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4b12      	ldr	r3, [pc, #72]	@ (80068e8 <lfs_fs_parent+0xac>)
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7fb ff1a 	bl	80026dc <lfs_dir_fetchmatch>
 80068a8:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <lfs_fs_parent+0x80>
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	f113 0f02 	cmn.w	r3, #2
 80068b6:	d001      	beq.n	80068bc <lfs_fs_parent+0x80>
            return tag;
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	e00c      	b.n	80068d6 <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3318      	adds	r3, #24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fa fd26 	bl	8001312 <lfs_pair_isnull>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f083 0301 	eor.w	r3, r3, #1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1c3      	bne.n	800685a <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80068d2:	f06f 0301 	mvn.w	r3, #1
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3728      	adds	r7, #40	@ 0x28
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	080067b7 	.word	0x080067b7
 80068e4:	20000008 	.word	0x20000008
 80068e8:	7ff003ff 	.word	0x7ff003ff

080068ec <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80068ec:	b590      	push	{r4, r7, lr}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fa fe19 	bl	8001534 <lfs_tag_size>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <lfs_fs_preporphans+0x32>
 8006908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da06      	bge.n	800691e <lfs_fs_preporphans+0x32>
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <lfs_fs_preporphans+0x68>)
 8006912:	4a11      	ldr	r2, [pc, #68]	@ (8006958 <lfs_fs_preporphans+0x6c>)
 8006914:	f241 114c 	movw	r1, #4428	@ 0x114c
 8006918:	4810      	ldr	r0, [pc, #64]	@ (800695c <lfs_fs_preporphans+0x70>)
 800691a:	f003 f939 	bl	8009b90 <__assert_func>
    lfs->gstate.tag += orphans;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3330      	adds	r3, #48	@ 0x30
 8006938:	4618      	mov	r0, r3
 800693a:	f7fa fe5e 	bl	80015fa <lfs_gstate_hasorphans>
 800693e:	4603      	mov	r3, r0
 8006940:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006942:	ea44 0203 	orr.w	r2, r4, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	bd90      	pop	{r4, r7, pc}
 8006954:	0800b310 	.word	0x0800b310
 8006958:	0800b5dc 	.word	0x0800b5dc
 800695c:	0800abd4 	.word	0x0800abd4

08006960 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	460b      	mov	r3, r1
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006972:	4a17      	ldr	r2, [pc, #92]	@ (80069d0 <lfs_fs_prepmove+0x70>)
 8006974:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006976:	897b      	ldrh	r3, [r7, #10]
 8006978:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800697c:	428b      	cmp	r3, r1
 800697e:	d006      	beq.n	800698e <lfs_fs_prepmove+0x2e>
 8006980:	897b      	ldrh	r3, [r7, #10]
 8006982:	029b      	lsls	r3, r3, #10
 8006984:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006988:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800698c:	e000      	b.n	8006990 <lfs_fs_prepmove+0x30>
 800698e:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006996:	897b      	ldrh	r3, [r7, #10]
 8006998:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800699c:	4293      	cmp	r3, r2
 800699e:	d002      	beq.n	80069a6 <lfs_fs_prepmove+0x46>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	e000      	b.n	80069a8 <lfs_fs_prepmove+0x48>
 80069a6:	2300      	movs	r3, #0
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80069ac:	897b      	ldrh	r3, [r7, #10]
 80069ae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d003      	beq.n	80069be <lfs_fs_prepmove+0x5e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	e000      	b.n	80069c0 <lfs_fs_prepmove+0x60>
 80069be:	2300      	movs	r3, #0
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80069c4:	bf00      	nop
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	800003ff 	.word	0x800003ff

080069d4 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80069d4:	b5b0      	push	{r4, r5, r7, lr}
 80069d6:	b094      	sub	sp, #80	@ 0x50
 80069d8:	af04      	add	r7, sp, #16
 80069da:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	333c      	adds	r3, #60	@ 0x3c
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fa fe2c 	bl	800163e <lfs_gstate_hasmove>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f083 0301 	eor.w	r3, r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <lfs_fs_demove+0x22>
        return 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e049      	b.n	8006a8a <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fa fd86 	bl	8001514 <lfs_tag_id>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4b21      	ldr	r3, [pc, #132]	@ (8006a94 <lfs_fs_demove+0xc0>)
 8006a0e:	9302      	str	r3, [sp, #8]
 8006a10:	9201      	str	r2, [sp, #4]
 8006a12:	9400      	str	r4, [sp, #0]
 8006a14:	462b      	mov	r3, r5
 8006a16:	f241 1266 	movw	r2, #4454	@ 0x1166
 8006a1a:	491f      	ldr	r1, [pc, #124]	@ (8006a98 <lfs_fs_demove+0xc4>)
 8006a1c:	481f      	ldr	r0, [pc, #124]	@ (8006a9c <lfs_fs_demove+0xc8>)
 8006a1e:	f003 fa67 	bl	8009ef0 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006a28:	f107 0318 	add.w	r3, r7, #24
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fc f9c2 	bl	8002db8 <lfs_dir_fetch>
 8006a34:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8006a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <lfs_fs_demove+0x6c>
        return err;
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3e:	e024      	b.n	8006a8a <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fa fd65 	bl	8001514 <lfs_tag_id>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff83 	bl	8006960 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006a5a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a5c:	029b      	lsls	r3, r3, #10
 8006a5e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006a62:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	f107 0210 	add.w	r2, r7, #16
 8006a70:	f107 0118 	add.w	r1, r7, #24
 8006a74:	2301      	movs	r3, #1
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fd ff3e 	bl	80048f8 <lfs_dir_commit>
 8006a7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <lfs_fs_demove+0xb4>
        return err;
 8006a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a86:	e000      	b.n	8006a8a <lfs_fs_demove+0xb6>
    }

    return 0;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3740      	adds	r7, #64	@ 0x40
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bdb0      	pop	{r4, r5, r7, pc}
 8006a92:	bf00      	nop
 8006a94:	0800acc8 	.word	0x0800acc8
 8006a98:	0800abd4 	.word	0x0800abd4
 8006a9c:	0800b344 	.word	0x0800b344

08006aa0 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006aa0:	b5b0      	push	{r4, r5, r7, lr}
 8006aa2:	b0b2      	sub	sp, #200	@ 0xc8
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3330      	adds	r3, #48	@ 0x30
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fa fda2 	bl	80015fa <lfs_gstate_hasorphans>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f083 0301 	eor.w	r3, r3, #1
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <lfs_fs_deorphan+0x26>
        return 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e17c      	b.n	8006dc0 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006acc:	f107 030c 	add.w	r3, r7, #12
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f003 fa70 	bl	8009fba <memset>
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006ae4:	e148      	b.n	8006d78 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006ae6:	f107 030c 	add.w	r3, r7, #12
 8006aea:	f103 0218 	add.w	r2, r3, #24
 8006aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fc f95f 	bl	8002db8 <lfs_dir_fetch>
 8006afa:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
            if (err) {
 8006afe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <lfs_fs_deorphan+0x6c>
                return err;
 8006b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b0a:	e159      	b.n	8006dc0 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b10:	f083 0301 	eor.w	r3, r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8122 	beq.w	8006d60 <lfs_fs_deorphan+0x2c0>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006b1c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8006b20:	f107 030c 	add.w	r3, r7, #12
 8006b24:	3318      	adds	r3, #24
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff fe87 	bl	800683c <lfs_fs_parent>
 8006b2e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da07      	bge.n	8006b4a <lfs_fs_deorphan+0xaa>
 8006b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b3e:	f113 0f02 	cmn.w	r3, #2
 8006b42:	d002      	beq.n	8006b4a <lfs_fs_deorphan+0xaa>
                    return tag;
 8006b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b48:	e13a      	b.n	8006dc0 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8006b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b4e:	f113 0f02 	cmn.w	r3, #2
 8006b52:	d157      	bne.n	8006c04 <lfs_fs_deorphan+0x164>
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d054      	beq.n	8006c04 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	499a      	ldr	r1, [pc, #616]	@ (8006dc8 <lfs_fs_deorphan+0x328>)
 8006b60:	9101      	str	r1, [sp, #4]
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	f241 12a1 	movw	r2, #4513	@ 0x11a1
 8006b6a:	4998      	ldr	r1, [pc, #608]	@ (8006dcc <lfs_fs_deorphan+0x32c>)
 8006b6c:	4898      	ldr	r0, [pc, #608]	@ (8006dd0 <lfs_fs_deorphan+0x330>)
 8006b6e:	f003 f9bf 	bl	8009ef0 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8006b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fc f936 	bl	8002df0 <lfs_dir_getgstate>
 8006b84:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
                    if (err) {
 8006b88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <lfs_fs_deorphan+0xf6>
                        return err;
 8006b90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b94:	e114      	b.n	8006dc0 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fa fc44 	bl	800142a <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ba6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8006baa:	051a      	lsls	r2, r3, #20
 8006bac:	4b89      	ldr	r3, [pc, #548]	@ (8006dd4 <lfs_fs_deorphan+0x334>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006bb8:	3318      	adds	r3, #24
 8006bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bbe:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8006bc2:	f107 010c 	add.w	r1, r7, #12
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fd fb9b 	bl	8004304 <lfs_dir_orphaningcommit>
 8006bce:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fa fc0c 	bl	80013f6 <lfs_pair_fromle32>
                    if (state < 0) {
 8006bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da02      	bge.n	8006bec <lfs_fs_deorphan+0x14c>
                        return state;
 8006be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                    return tag;
 8006bea:	e0e9      	b.n	8006dc0 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8006bec:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	f040 80ba 	bne.w	8006d76 <lfs_fs_deorphan+0x2d6>
                        goto restart;
 8006c02:	e763      	b.n	8006acc <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8006c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c08:	f113 0f02 	cmn.w	r3, #2
 8006c0c:	f000 80a8 	beq.w	8006d60 <lfs_fs_deorphan+0x2c0>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006c10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c14:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8006c18:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	4a6d      	ldr	r2, [pc, #436]	@ (8006dd8 <lfs_fs_deorphan+0x338>)
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fb f828 	bl	8001c78 <lfs_dir_get>
 8006c28:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006c2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da02      	bge.n	8006c3a <lfs_fs_deorphan+0x19a>
                        return state;
 8006c34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c38:	e0c2      	b.n	8006dc0 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 8006c3a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fa fbd9 	bl	80013f6 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8006c44:	f107 030c 	add.w	r3, r7, #12
 8006c48:	f103 0218 	add.w	r2, r3, #24
 8006c4c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c50:	4611      	mov	r1, r2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fa fba2 	bl	800139c <lfs_pair_sync>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f083 0301 	eor.w	r3, r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d07d      	beq.n	8006d60 <lfs_fs_deorphan+0x2c0>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006c64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8006c6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c70:	4c55      	ldr	r4, [pc, #340]	@ (8006dc8 <lfs_fs_deorphan+0x328>)
 8006c72:	9403      	str	r4, [sp, #12]
 8006c74:	9102      	str	r1, [sp, #8]
 8006c76:	9201      	str	r2, [sp, #4]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f241 12ca 	movw	r2, #4554	@ 0x11ca
 8006c80:	4952      	ldr	r1, [pc, #328]	@ (8006dcc <lfs_fs_deorphan+0x32c>)
 8006c82:	4856      	ldr	r0, [pc, #344]	@ (8006ddc <lfs_fs_deorphan+0x33c>)
 8006c84:	f003 f934 	bl	8009ef0 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006c88:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8006c8c:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3330      	adds	r3, #48	@ 0x30
 8006c94:	f107 020c 	add.w	r2, r7, #12
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fa fce2 	bl	8001664 <lfs_gstate_hasmovehere>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01c      	beq.n	8006ce0 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fa fc32 	bl	8001514 <lfs_tag_id>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8006cbe:	4842      	ldr	r0, [pc, #264]	@ (8006dc8 <lfs_fs_deorphan+0x328>)
 8006cc0:	9002      	str	r0, [sp, #8]
 8006cc2:	9201      	str	r2, [sp, #4]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	f241 12d5 	movw	r2, #4565	@ 0x11d5
 8006ccc:	493f      	ldr	r1, [pc, #252]	@ (8006dcc <lfs_fs_deorphan+0x32c>)
 8006cce:	4844      	ldr	r0, [pc, #272]	@ (8006de0 <lfs_fs_deorphan+0x340>)
 8006cd0:	f003 f90e 	bl	8009ef0 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fe40 	bl	8006960 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006ce0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fa fba0 	bl	800142a <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006cea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8006cee:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d007      	beq.n	8006d06 <lfs_fs_deorphan+0x266>
 8006cf6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8006cfa:	029b      	lsls	r3, r3, #10
 8006cfc:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006d00:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8006d04:	e000      	b.n	8006d08 <lfs_fs_deorphan+0x268>
 8006d06:	2300      	movs	r3, #0
 8006d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d10:	4b34      	ldr	r3, [pc, #208]	@ (8006de4 <lfs_fs_deorphan+0x344>)
 8006d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d16:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d1e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8006d22:	f107 010c 	add.w	r1, r7, #12
 8006d26:	2302      	movs	r3, #2
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fd faeb 	bl	8004304 <lfs_dir_orphaningcommit>
 8006d2e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006d32:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fa fb5d 	bl	80013f6 <lfs_pair_fromle32>
                        if (state < 0) {
 8006d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da02      	bge.n	8006d4a <lfs_fs_deorphan+0x2aa>
                            return state;
 8006d44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 8006d48:	e03a      	b.n	8006dc0 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 8006d4a:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8006d4e:	3301      	adds	r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006d56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d10c      	bne.n	8006d78 <lfs_fs_deorphan+0x2d8>
 8006d5e:	e6b5      	b.n	8006acc <lfs_fs_deorphan+0x2c>
                        continue;
                    }
                }
            }

            pdir = dir;
 8006d60:	f107 040c 	add.w	r4, r7, #12
 8006d64:	f107 052c 	add.w	r5, r7, #44	@ 0x2c
 8006d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006d74:	e000      	b.n	8006d78 <lfs_fs_deorphan+0x2d8>
                    continue;
 8006d76:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8006d78:	f107 030c 	add.w	r3, r7, #12
 8006d7c:	3318      	adds	r3, #24
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fa fac7 	bl	8001312 <lfs_pair_isnull>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f083 0301 	eor.w	r3, r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f47f aeaa 	bne.w	8006ae6 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3330      	adds	r3, #48	@ 0x30
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fa fc42 	bl	8001620 <lfs_gstate_getorphans>
 8006d9c:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f7f9 fe9c 	bl	8000ae4 <lfs_min>
 8006dac:	4603      	mov	r3, r0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	425b      	negs	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fd97 	bl	80068ec <lfs_fs_preporphans>
 8006dbe:	4603      	mov	r3, r0
            found));
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	37b8      	adds	r7, #184	@ 0xb8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc8:	0800acc8 	.word	0x0800acc8
 8006dcc:	0800abd4 	.word	0x0800abd4
 8006dd0:	0800b378 	.word	0x0800b378
 8006dd4:	000ffc08 	.word	0x000ffc08
 8006dd8:	7ffffc00 	.word	0x7ffffc00
 8006ddc:	0800b3a8 	.word	0x0800b3a8
 8006de0:	0800b3ec 	.word	0x0800b3ec
 8006de4:	600ffc08 	.word	0x600ffc08

08006de8 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff fdef 	bl	80069d4 <lfs_fs_demove>
 8006df6:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <lfs_fs_forceconsistency+0x1a>
        return err;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	e00a      	b.n	8006e18 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fe4b 	bl	8006aa0 <lfs_fs_deorphan>
 8006e0a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <lfs_fs_forceconsistency+0x2e>
        return err;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	e000      	b.n	8006e18 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	601a      	str	r2, [r3, #0]
    return 0;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8006e54:	f107 0208 	add.w	r2, r7, #8
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4907      	ldr	r1, [pc, #28]	@ (8006e78 <lfs_fs_rawsize+0x30>)
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff fb3f 	bl	80064e0 <lfs_fs_rawtraverse>
 8006e62:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <lfs_fs_rawsize+0x26>
        return err;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	e000      	b.n	8006e70 <lfs_fs_rawsize+0x28>
    }

    return size;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	08006e21 	.word	0x08006e21

08006e7c <lfs_mount>:
    LFS_UNLOCK(cfg);
    return err;
}
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <lfs_mount+0x18>
        return err;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	e005      	b.n	8006ea0 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff f96a 	bl	8006170 <lfs_rawmount>
 8006e9c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <lfs_remove+0x18>
        return err;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	e005      	b.n	8006ecc <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe fe98 	bl	8005bf8 <lfs_rawremove>
 8006ec8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006eca:	68fb      	ldr	r3, [r7, #12]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
    if (err) {
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <lfs_file_opencfg+0x1c>
        return err;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	e01c      	b.n	8006f2a <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fa fc7c 	bl	80017f4 <lfs_mlist_isopen>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f083 0301 	eor.w	r3, r3, #1
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <lfs_file_opencfg+0x42>
 8006f08:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <lfs_file_opencfg+0x60>)
 8006f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8006f38 <lfs_file_opencfg+0x64>)
 8006f0c:	f241 517b 	movw	r1, #5499	@ 0x157b
 8006f10:	480a      	ldr	r0, [pc, #40]	@ (8006f3c <lfs_file_opencfg+0x68>)
 8006f12:	f002 fe3d 	bl	8009b90 <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7fd ff35 	bl	8004d90 <lfs_file_rawopencfg>
 8006f26:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f28:	697b      	ldr	r3, [r7, #20]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	0800b434 	.word	0x0800b434
 8006f38:	0800b5f0 	.word	0x0800b5f0
 8006f3c:	0800abd4 	.word	0x0800abd4

08006f40 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <lfs_file_close+0x18>
        return err;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	e015      	b.n	8006f84 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fa fc48 	bl	80017f4 <lfs_mlist_isopen>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <lfs_file_close+0x38>
 8006f6a:	4b08      	ldr	r3, [pc, #32]	@ (8006f8c <lfs_file_close+0x4c>)
 8006f6c:	4a08      	ldr	r2, [pc, #32]	@ (8006f90 <lfs_file_close+0x50>)
 8006f6e:	f241 518a 	movw	r1, #5514	@ 0x158a
 8006f72:	4808      	ldr	r0, [pc, #32]	@ (8006f94 <lfs_file_close+0x54>)
 8006f74:	f002 fe0c 	bl	8009b90 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fe f8d8 	bl	8005130 <lfs_file_rawclose>
 8006f80:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	0800b46c 	.word	0x0800b46c
 8006f90:	0800b604 	.word	0x0800b604
 8006f94:	0800abd4 	.word	0x0800abd4

08006f98 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]
    if (err) {
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <lfs_file_read+0x1c>
        return err;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	e017      	b.n	8006fe4 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fa fc1a 	bl	80017f4 <lfs_mlist_isopen>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <lfs_file_read+0x3c>
 8006fc6:	4b09      	ldr	r3, [pc, #36]	@ (8006fec <lfs_file_read+0x54>)
 8006fc8:	4a09      	ldr	r2, [pc, #36]	@ (8006ff0 <lfs_file_read+0x58>)
 8006fca:	f241 51ac 	movw	r1, #5548	@ 0x15ac
 8006fce:	4809      	ldr	r0, [pc, #36]	@ (8006ff4 <lfs_file_read+0x5c>)
 8006fd0:	f002 fdde 	bl	8009b90 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7fe fbf4 	bl	80057c8 <lfs_file_rawread>
 8006fe0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8006fe2:	693b      	ldr	r3, [r7, #16]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	0800b46c 	.word	0x0800b46c
 8006ff0:	0800b614 	.word	0x0800b614
 8006ff4:	0800abd4 	.word	0x0800abd4

08006ff8 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <lfs_file_rewind+0x18>
        return err;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e005      	b.n	800701c <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fe fdbe 	bl	8005b94 <lfs_file_rawrewind>
 8007018:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 8007032:	f107 0310 	add.w	r3, r7, #16
 8007036:	4618      	mov	r0, r3
 8007038:	f7f9 faf8 	bl	800062c <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 800703c:	8abb      	ldrh	r3, [r7, #20]
 800703e:	461a      	mov	r2, r3
 8007040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007042:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 8007044:	8afb      	ldrh	r3, [r7, #22]
 8007046:	461a      	mov	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 800704c:	8b3b      	ldrh	r3, [r7, #24]
 800704e:	461a      	mov	r2, r3
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 8007054:	8bbb      	ldrh	r3, [r7, #28]
 8007056:	461a      	mov	r2, r3
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 800705c:	887a      	ldrh	r2, [r7, #2]
 800705e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007060:	62da      	str	r2, [r3, #44]	@ 0x2c
    cfg->cache_size     = buffers_size;
 8007062:	887a      	ldrh	r2, [r7, #2]
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
    cfg->read_buffer = lfsReadBuff;
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	631a      	str	r2, [r3, #48]	@ 0x30
    cfg->prog_buffer = lfsWriteBuff;
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	635a      	str	r2, [r3, #52]	@ 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38

    cfg->read   = block_device_read;
 800707a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707c:	4a11      	ldr	r2, [pc, #68]	@ (80070c4 <io_fs_init+0xa0>)
 800707e:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 8007080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007082:	4a11      	ldr	r2, [pc, #68]	@ (80070c8 <io_fs_init+0xa4>)
 8007084:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	4a10      	ldr	r2, [pc, #64]	@ (80070cc <io_fs_init+0xa8>)
 800708a:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	4a10      	ldr	r2, [pc, #64]	@ (80070d0 <io_fs_init+0xac>)
 8007090:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007098:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	22ff      	movs	r2, #255	@ 0xff
 800709e:	63da      	str	r2, [r3, #60]	@ 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80070a6:	641a      	str	r2, [r3, #64]	@ 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80070ae:	645a      	str	r2, [r3, #68]	@ 0x44
    cfg->metadata_max	= flash_info.erase_size;
 80070b0:	8b3b      	ldrh	r3, [r7, #24]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	649a      	str	r2, [r3, #72]	@ 0x48

    return 0;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	08007171 	.word	0x08007171
 80070cc:	08007129 	.word	0x08007129
 80070d0:	080071c5 	.word	0x080071c5

080070d4 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d305      	bcc.n	80070f8 <block_device_read+0x24>
 80070ec:	4b0b      	ldr	r3, [pc, #44]	@ (800711c <block_device_read+0x48>)
 80070ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007120 <block_device_read+0x4c>)
 80070f0:	2148      	movs	r1, #72	@ 0x48
 80070f2:	480c      	ldr	r0, [pc, #48]	@ (8007124 <block_device_read+0x50>)
 80070f4:	f002 fd4c 	bl	8009b90 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	fb03 f202 	mul.w	r2, r3, r2
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	b292      	uxth	r2, r2
 800710a:	4619      	mov	r1, r3
 800710c:	6838      	ldr	r0, [r7, #0]
 800710e:	f7f9 fc35 	bl	800097c <sFLASH_ReadBuffer>
	return 0;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	0800b4dc 	.word	0x0800b4dc
 8007120:	0800b624 	.word	0x0800b624
 8007124:	0800b4f4 	.word	0x0800b4f4

08007128 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d305      	bcc.n	8007148 <block_device_erase+0x20>
 800713c:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <block_device_erase+0x3c>)
 800713e:	4a0a      	ldr	r2, [pc, #40]	@ (8007168 <block_device_erase+0x40>)
 8007140:	2150      	movs	r1, #80	@ 0x50
 8007142:	480a      	ldr	r0, [pc, #40]	@ (800716c <block_device_erase+0x44>)
 8007144:	f002 fd24 	bl	8009b90 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 fb10 	bl	8000778 <sFLASH_EraseSector>
	return 0;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	0800b4dc 	.word	0x0800b4dc
 8007168:	0800b638 	.word	0x0800b638
 800716c:	0800b4f4 	.word	0x0800b4f4

08007170 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	429a      	cmp	r2, r3
 8007186:	d305      	bcc.n	8007194 <block_device_prog+0x24>
 8007188:	4b0b      	ldr	r3, [pc, #44]	@ (80071b8 <block_device_prog+0x48>)
 800718a:	4a0c      	ldr	r2, [pc, #48]	@ (80071bc <block_device_prog+0x4c>)
 800718c:	2158      	movs	r1, #88	@ 0x58
 800718e:	480c      	ldr	r0, [pc, #48]	@ (80071c0 <block_device_prog+0x50>)
 8007190:	f002 fcfe 	bl	8009b90 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	fb03 f202 	mul.w	r2, r3, r2
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	b292      	uxth	r2, r2
 80071a6:	4619      	mov	r1, r3
 80071a8:	6838      	ldr	r0, [r7, #0]
 80071aa:	f7f9 fb3e 	bl	800082a <sFLASH_WriteBuffer>
	return 0;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	0800b4dc 	.word	0x0800b4dc
 80071bc:	0800b64c 	.word	0x0800b64c
 80071c0:	0800b4f4 	.word	0x0800b4f4

080071c4 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	return 0;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e024      	b.n	800723c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	091a      	lsrs	r2, r3, #4
 80071f6:	6939      	ldr	r1, [r7, #16]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	440b      	add	r3, r1
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	4619      	mov	r1, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	404b      	eors	r3, r1
 8007204:	f003 030f 	and.w	r3, r3, #15
 8007208:	4912      	ldr	r1, [pc, #72]	@ (8007254 <lfs_crc+0x78>)
 800720a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800720e:	4053      	eors	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	091a      	lsrs	r2, r3, #4
 8007216:	6939      	ldr	r1, [r7, #16]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	440b      	add	r3, r1
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	091b      	lsrs	r3, r3, #4
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	404b      	eors	r3, r1
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	4909      	ldr	r1, [pc, #36]	@ (8007254 <lfs_crc+0x78>)
 800722e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007232:	4053      	eors	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	3301      	adds	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d3d6      	bcc.n	80071f2 <lfs_crc+0x16>
    }

    return crc;
 8007244:	68fb      	ldr	r3, [r7, #12]
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	0800b660 	.word	0x0800b660

08007258 <SPI_flash_read_byte>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t SPI_flash_read_byte(void){
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&hspi1, &byte, 1, 5000);
 800725e:	1df9      	adds	r1, r7, #7
 8007260:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007264:	2201      	movs	r2, #1
 8007266:	4804      	ldr	r0, [pc, #16]	@ (8007278 <SPI_flash_read_byte+0x20>)
 8007268:	f002 f888 	bl	800937c <HAL_SPI_Receive>
	return byte;
 800726c:	79fb      	ldrb	r3, [r7, #7]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	200000a8 	.word	0x200000a8

0800727c <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 5000);
 8007286:	1df9      	adds	r1, r7, #7
 8007288:	f241 3388 	movw	r3, #5000	@ 0x1388
 800728c:	2201      	movs	r2, #1
 800728e:	4803      	ldr	r0, [pc, #12]	@ (800729c <SPI_flash_send_byte+0x20>)
 8007290:	f001 ff31 	bl	80090f6 <HAL_SPI_Transmit>

}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	200000a8 	.word	0x200000a8

080072a0 <SPI_flash_select>:

void SPI_flash_select(void){
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2110      	movs	r1, #16
 80072a8:	4802      	ldr	r0, [pc, #8]	@ (80072b4 <SPI_flash_select+0x14>)
 80072aa:	f001 fa5d 	bl	8008768 <HAL_GPIO_WritePin>
}
 80072ae:	bf00      	nop
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40020000 	.word	0x40020000

080072b8 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80072bc:	2201      	movs	r2, #1
 80072be:	2110      	movs	r1, #16
 80072c0:	4802      	ldr	r0, [pc, #8]	@ (80072cc <SPI_flash_deselect+0x14>)
 80072c2:	f001 fa51 	bl	8008768 <HAL_GPIO_WritePin>
}
 80072c6:	bf00      	nop
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40020000 	.word	0x40020000

080072d0 <jumpToApp>:

void jumpToApp(const uint32_t address)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

	 typedef void(*pFunction)(void);//объявляем пользовательский тип
	 /* Устанавливаем адрес перехода на основную программу */
	 /* Переход производится выполнением функции, адрес которой указывается вручную */
	 /* +4 байта потому, что в самом начале расположен указатель на вектор прерывания */
	 uint32_t jumpAddress = *(__IO uint32_t*) (MAIN_PROGRAM_START_ADDRESS + 4);
 80072d8:	4b16      	ldr	r3, [pc, #88]	@ (8007334 <jumpToApp+0x64>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	617b      	str	r3, [r7, #20]
	 pFunction Jump_To_Application = (pFunction) jumpAddress;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	613b      	str	r3, [r7, #16]

	 /*Сбрасываем всю периферию на APB1 */
	 RCC->APB1RSTR = 0xFFFFFFFF; RCC->APB1RSTR = 0x0;
 80072e2:	4b15      	ldr	r3, [pc, #84]	@ (8007338 <jumpToApp+0x68>)
 80072e4:	f04f 32ff 	mov.w	r2, #4294967295
 80072e8:	621a      	str	r2, [r3, #32]
 80072ea:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <jumpToApp+0x68>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	621a      	str	r2, [r3, #32]
	/*Сбрасываем всю периферию на APB2 */
	 RCC->APB2RSTR = 0xFFFFFFFF; RCC->APB2RSTR = 0x0;
 80072f0:	4b11      	ldr	r3, [pc, #68]	@ (8007338 <jumpToApp+0x68>)
 80072f2:	f04f 32ff 	mov.w	r2, #4294967295
 80072f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80072f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007338 <jumpToApp+0x68>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	625a      	str	r2, [r3, #36]	@ 0x24
	 RCC->APB1ENR = 0x0; /* Выключаем всю периферию на APB1 */
 80072fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007338 <jumpToApp+0x68>)
 8007300:	2200      	movs	r2, #0
 8007302:	641a      	str	r2, [r3, #64]	@ 0x40
	 RCC->APB2ENR = 0x0; /* Выключаем всю периферию на APB2 */
 8007304:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <jumpToApp+0x68>)
 8007306:	2200      	movs	r2, #0
 8007308:	645a      	str	r2, [r3, #68]	@ 0x44
	 //RCC->AHBENR = 0x0; /* Выключаем всю периферию на AHB */
	 /* Сбрасываем все источники тактования по умолчанию, переходим на HSI*/
	 //RCC_DeInit();
	 HAL_DeInit();
 800730a:	f000 fc09 	bl	8007b20 <HAL_DeInit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800730e:	b672      	cpsid	i
}
 8007310:	bf00      	nop
	 /* Выключаем прерывания */
	 __disable_irq();
	 /* Переносим адрес вектора прерываний */
	 //NVIC_SetVectorTable(NVIC_VectTab_FLASH, MAIN_PROGRAM_START_ADDRESS);
	 //NVIC_SetVector((uint32_t)0x08000000, MAIN_PROGRAM_START_ADDRESS);
	 SCB->VTOR = (uint32_t)0x08000000 | (MAIN_PROGRAM_START_ADDRESS & (uint32_t)0x1FFFFF80);
 8007312:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <jumpToApp+0x6c>)
 8007314:	4a0a      	ldr	r2, [pc, #40]	@ (8007340 <jumpToApp+0x70>)
 8007316:	609a      	str	r2, [r3, #8]
	 //0x08000000 VECT_TAB_OFFSET
	 /* Переносим адрес стэка */
	  __set_MSP(*(__IO uint32_t*) MAIN_PROGRAM_START_ADDRESS);
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <jumpToApp+0x70>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f383 8808 	msr	MSP, r3
}
 8007324:	bf00      	nop
	  /* Переходим в основную программу */
	  Jump_To_Application();
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	4798      	blx	r3

	// let's do The Jump!
    // Jump, used asm to avoid stack optimization
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
   */
}
 800732a:	bf00      	nop
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	08010004 	.word	0x08010004
 8007338:	40023800 	.word	0x40023800
 800733c:	e000ed00 	.word	0xe000ed00
 8007340:	08010000 	.word	0x08010000

08007344 <FLASH_EraseSector>:
		ms--;
	}
}

int FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
  int status = 9; //FLASH_COMPLETE;
 8007354:	2309      	movs	r3, #9
 8007356:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if(VoltageRange == VoltageRange_1)
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d102      	bne.n	8007364 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e010      	b.n	8007386 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d103      	bne.n	8007372 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800736a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e009      	b.n	8007386 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d103      	bne.n	8007380 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007378:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e002      	b.n	8007386 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007380:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007384:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8007386:	f04f 30ff 	mov.w	r0, #4294967295
 800738a:	f000 fe9b 	bl	80080c4 <FLASH_WaitForLastOperation>
 800738e:	4603      	mov	r3, r0
 8007390:	60bb      	str	r3, [r7, #8]

  if(status == HAL_OK)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d131      	bne.n	80073fc <FLASH_EraseSector+0xb8>
  {
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8007398:	4b1b      	ldr	r3, [pc, #108]	@ (8007408 <FLASH_EraseSector+0xc4>)
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	4a1a      	ldr	r2, [pc, #104]	@ (8007408 <FLASH_EraseSector+0xc4>)
 800739e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 80073a4:	4b18      	ldr	r3, [pc, #96]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	4917      	ldr	r1, [pc, #92]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 80073b0:	4b15      	ldr	r3, [pc, #84]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	4a14      	ldr	r2, [pc, #80]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80073ba:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80073bc:	4b12      	ldr	r3, [pc, #72]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	4a10      	ldr	r2, [pc, #64]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073c6:	f043 0302 	orr.w	r3, r3, #2
 80073ca:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80073cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	4a0d      	ldr	r2, [pc, #52]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d6:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	f000 fe72 	bl	80080c4 <FLASH_WaitForLastOperation>
 80073e0:	4603      	mov	r3, r0
 80073e2:	60bb      	str	r3, [r7, #8]

    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80073e4:	4b08      	ldr	r3, [pc, #32]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	4a07      	ldr	r2, [pc, #28]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073ea:	f023 0302 	bic.w	r3, r3, #2
 80073ee:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK;
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	4a04      	ldr	r2, [pc, #16]	@ (8007408 <FLASH_EraseSector+0xc4>)
 80073f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80073fa:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 80073fc:	68bb      	ldr	r3, [r7, #8]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40023c00 	.word	0x40023c00

0800740c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800740c:	b5b0      	push	{r4, r5, r7, lr}
 800740e:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8007412:	af02      	add	r7, sp, #8
	uint8_t 						lfsWriteBuff[256];
	uint8_t 						lfslookaheadBuff[256];
	uint8_t							lfs_file_buf[512];
	struct SPI_flash_info			flash_parameters;
	int 							err;
	uint32_t 						addr = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
	uint8_t 						res,data = 0;
 800741a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800741e:	f2a3 531d 	subw	r3, r3, #1309	@ 0x51d
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007426:	f000 fb59 	bl	8007adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800742a:	f000 f8bd 	bl	80075a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800742e:	f000 f951 	bl	80076d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8007432:	f000 f919 	bl	8007668 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8007436:	4b51      	ldr	r3, [pc, #324]	@ (800757c <main+0x170>)
 8007438:	4a51      	ldr	r2, [pc, #324]	@ (8007580 <main+0x174>)
 800743a:	4952      	ldr	r1, [pc, #328]	@ (8007584 <main+0x178>)
 800743c:	4852      	ldr	r0, [pc, #328]	@ (8007588 <main+0x17c>)
 800743e:	f7f9 f8bb 	bl	80005b8 <SPI_flash_reg_cb>

  flash_parameters = sFLASH_GetInfo();
 8007442:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8007446:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800744a:	4618      	mov	r0, r3
 800744c:	f7f9 f8ee 	bl	800062c <sFLASH_GetInfo>

  if (flash_parameters.flash_id == 0x0) return -1; // jump to APP
 8007450:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8007454:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <main+0x58>
 800745e:	f04f 33ff 	mov.w	r3, #4294967295
 8007462:	e085      	b.n	8007570 <main+0x164>

  io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, 256, &cfg);
 8007464:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8007468:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 800746c:	f207 4014 	addw	r0, r7, #1044	@ 0x414
 8007470:	4b46      	ldr	r3, [pc, #280]	@ (800758c <main+0x180>)
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007478:	f7ff fdd4 	bl	8007024 <io_fs_init>
	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 800747c:	220c      	movs	r2, #12
 800747e:	2100      	movs	r1, #0
 8007480:	4843      	ldr	r0, [pc, #268]	@ (8007590 <main+0x184>)
 8007482:	f002 fd9a 	bl	8009fba <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 8007486:	4a42      	ldr	r2, [pc, #264]	@ (8007590 <main+0x184>)
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	6013      	str	r3, [r2, #0]
	fileConf.attr_count = 0;
 800748e:	4b40      	ldr	r3, [pc, #256]	@ (8007590 <main+0x184>)
 8007490:	2200      	movs	r2, #0
 8007492:	609a      	str	r2, [r3, #8]

	err = lfs_mount(&lfs, &cfg);
 8007494:	493d      	ldr	r1, [pc, #244]	@ (800758c <main+0x180>)
 8007496:	483f      	ldr	r0, [pc, #252]	@ (8007594 <main+0x188>)
 8007498:	f7ff fcf0 	bl	8006e7c <lfs_mount>
 800749c:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	if(err < 0){
 80074a0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da02      	bge.n	80074ae <main+0xa2>
	    jumpToApp(APP_START);
 80074a8:	483b      	ldr	r0, [pc, #236]	@ (8007598 <main+0x18c>)
 80074aa:	f7ff ff11 	bl	80072d0 <jumpToApp>
	}

	err = lfs_file_opencfg(&lfs, &file, FIRMWARE_FILE, LFS_O_RDONLY, &fileConf);
 80074ae:	4b38      	ldr	r3, [pc, #224]	@ (8007590 <main+0x184>)
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	2301      	movs	r3, #1
 80074b4:	4a39      	ldr	r2, [pc, #228]	@ (800759c <main+0x190>)
 80074b6:	493a      	ldr	r1, [pc, #232]	@ (80075a0 <main+0x194>)
 80074b8:	4836      	ldr	r0, [pc, #216]	@ (8007594 <main+0x188>)
 80074ba:	f7ff fd0b 	bl	8006ed4 <lfs_file_opencfg>
 80074be:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	if (err >= 0){
 80074c2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	db4c      	blt.n	8007564 <main+0x158>
		HAL_FLASH_Unlock();
 80074ca:	f000 fdc9 	bl	8008060 <HAL_FLASH_Unlock>
		FLASH_EraseSector(FLASH_Sector_5,VoltageRange_3);
 80074ce:	2102      	movs	r1, #2
 80074d0:	2028      	movs	r0, #40	@ 0x28
 80074d2:	f7ff ff37 	bl	8007344 <FLASH_EraseSector>
		FLASH_EraseSector(FLASH_Sector_4,VoltageRange_3);
 80074d6:	2102      	movs	r1, #2
 80074d8:	2020      	movs	r0, #32
 80074da:	f7ff ff33 	bl	8007344 <FLASH_EraseSector>
		FLASH_EraseSector(FLASH_Sector_3,VoltageRange_3);
 80074de:	2102      	movs	r1, #2
 80074e0:	2018      	movs	r0, #24
 80074e2:	f7ff ff2f 	bl	8007344 <FLASH_EraseSector>

		lfs_file_rewind(&lfs,&file);
 80074e6:	492e      	ldr	r1, [pc, #184]	@ (80075a0 <main+0x194>)
 80074e8:	482a      	ldr	r0, [pc, #168]	@ (8007594 <main+0x188>)
 80074ea:	f7ff fd85 	bl	8006ff8 <lfs_file_rewind>

		for ( addr = APP_START ; addr < APP_END ; addr = addr + sizeof(data) ){
 80074ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007598 <main+0x18c>)
 80074f0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 80074f4:	e021      	b.n	800753a <main+0x12e>
			res = lfs_file_read(&lfs, &file, &data, sizeof(data));
 80074f6:	1cfa      	adds	r2, r7, #3
 80074f8:	2301      	movs	r3, #1
 80074fa:	4929      	ldr	r1, [pc, #164]	@ (80075a0 <main+0x194>)
 80074fc:	4825      	ldr	r0, [pc, #148]	@ (8007594 <main+0x188>)
 80074fe:	f7ff fd4b 	bl	8006f98 <lfs_file_read>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
			if (res <= 0 ) break; //из файла считалось 0 байт или ошибка, выходим
 8007508:	f897 3517 	ldrb.w	r3, [r7, #1303]	@ 0x517
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01a      	beq.n	8007546 <main+0x13a>
			//FLASH_Program_Byte(addr,data);
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr,data);
 8007510:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8007514:	f2a3 531d 	subw	r3, r3, #1309	@ 0x51d
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2200      	movs	r2, #0
 800751e:	461c      	mov	r4, r3
 8007520:	4615      	mov	r5, r2
 8007522:	4622      	mov	r2, r4
 8007524:	462b      	mov	r3, r5
 8007526:	f8d7 151c 	ldr.w	r1, [r7, #1308]	@ 0x51c
 800752a:	2000      	movs	r0, #0
 800752c:	f000 fc90 	bl	8007e50 <HAL_FLASH_Program>
		for ( addr = APP_START ; addr < APP_END ; addr = addr + sizeof(data) ){
 8007530:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8007534:	3301      	adds	r3, #1
 8007536:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 800753a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800753e:	4a19      	ldr	r2, [pc, #100]	@ (80075a4 <main+0x198>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d9d8      	bls.n	80074f6 <main+0xea>
 8007544:	e000      	b.n	8007548 <main+0x13c>
			if (res <= 0 ) break; //из файла считалось 0 байт или ошибка, выходим
 8007546:	bf00      	nop
		}

	    lfs_file_close(&lfs, &file);
 8007548:	4915      	ldr	r1, [pc, #84]	@ (80075a0 <main+0x194>)
 800754a:	4812      	ldr	r0, [pc, #72]	@ (8007594 <main+0x188>)
 800754c:	f7ff fcf8 	bl	8006f40 <lfs_file_close>

	    lfs_remove(&lfs, FIRMWARE_FILE);
 8007550:	4912      	ldr	r1, [pc, #72]	@ (800759c <main+0x190>)
 8007552:	4810      	ldr	r0, [pc, #64]	@ (8007594 <main+0x188>)
 8007554:	f7ff fca8 	bl	8006ea8 <lfs_remove>

	    HAL_FLASH_Lock();
 8007558:	f000 fda4 	bl	80080a4 <HAL_FLASH_Lock>
	    jumpToApp(APP_START);
 800755c:	480e      	ldr	r0, [pc, #56]	@ (8007598 <main+0x18c>)
 800755e:	f7ff feb7 	bl	80072d0 <jumpToApp>
 8007562:	e003      	b.n	800756c <main+0x160>

	}else{
		jumpToApp(APP_START);
 8007564:	480c      	ldr	r0, [pc, #48]	@ (8007598 <main+0x18c>)
 8007566:	f7ff feb3 	bl	80072d0 <jumpToApp>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <main+0x160>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8007570:	4618      	mov	r0, r3
 8007572:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8007576:	46bd      	mov	sp, r7
 8007578:	bdb0      	pop	{r4, r5, r7, pc}
 800757a:	bf00      	nop
 800757c:	0800727d 	.word	0x0800727d
 8007580:	08007259 	.word	0x08007259
 8007584:	080072b9 	.word	0x080072b9
 8007588:	080072a1 	.word	0x080072a1
 800758c:	200001cc 	.word	0x200001cc
 8007590:	20000218 	.word	0x20000218
 8007594:	20000100 	.word	0x20000100
 8007598:	08010000 	.word	0x08010000
 800759c:	0800b510 	.word	0x0800b510
 80075a0:	20000178 	.word	0x20000178
 80075a4:	0803ffef 	.word	0x0803ffef

080075a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b094      	sub	sp, #80	@ 0x50
 80075ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075ae:	f107 0320 	add.w	r3, r7, #32
 80075b2:	2230      	movs	r2, #48	@ 0x30
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f002 fcff 	bl	8009fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075bc:	f107 030c 	add.w	r3, r7, #12
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	609a      	str	r2, [r3, #8]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80075cc:	2300      	movs	r3, #0
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	4b23      	ldr	r3, [pc, #140]	@ (8007660 <SystemClock_Config+0xb8>)
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	4a22      	ldr	r2, [pc, #136]	@ (8007660 <SystemClock_Config+0xb8>)
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075da:	6413      	str	r3, [r2, #64]	@ 0x40
 80075dc:	4b20      	ldr	r3, [pc, #128]	@ (8007660 <SystemClock_Config+0xb8>)
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80075e8:	2300      	movs	r3, #0
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007664 <SystemClock_Config+0xbc>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80075f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007664 <SystemClock_Config+0xbc>)
 80075f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4b19      	ldr	r3, [pc, #100]	@ (8007664 <SystemClock_Config+0xbc>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007608:	2302      	movs	r3, #2
 800760a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800760c:	2301      	movs	r3, #1
 800760e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007610:	2310      	movs	r3, #16
 8007612:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007614:	2300      	movs	r3, #0
 8007616:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007618:	f107 0320 	add.w	r3, r7, #32
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f8bd 	bl	800879c <HAL_RCC_OscConfig>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8007628:	f000 f896 	bl	8007758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800762c:	230f      	movs	r3, #15
 800762e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007640:	f107 030c 	add.w	r3, r7, #12
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f001 fb20 	bl	8008c8c <HAL_RCC_ClockConfig>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8007652:	f000 f881 	bl	8007758 <Error_Handler>
  }
}
 8007656:	bf00      	nop
 8007658:	3750      	adds	r7, #80	@ 0x50
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40023800 	.word	0x40023800
 8007664:	40007000 	.word	0x40007000

08007668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800766c:	4b17      	ldr	r3, [pc, #92]	@ (80076cc <MX_SPI1_Init+0x64>)
 800766e:	4a18      	ldr	r2, [pc, #96]	@ (80076d0 <MX_SPI1_Init+0x68>)
 8007670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007672:	4b16      	ldr	r3, [pc, #88]	@ (80076cc <MX_SPI1_Init+0x64>)
 8007674:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800767a:	4b14      	ldr	r3, [pc, #80]	@ (80076cc <MX_SPI1_Init+0x64>)
 800767c:	2200      	movs	r2, #0
 800767e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007680:	4b12      	ldr	r3, [pc, #72]	@ (80076cc <MX_SPI1_Init+0x64>)
 8007682:	2200      	movs	r2, #0
 8007684:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007686:	4b11      	ldr	r3, [pc, #68]	@ (80076cc <MX_SPI1_Init+0x64>)
 8007688:	2200      	movs	r2, #0
 800768a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800768c:	4b0f      	ldr	r3, [pc, #60]	@ (80076cc <MX_SPI1_Init+0x64>)
 800768e:	2200      	movs	r2, #0
 8007690:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007692:	4b0e      	ldr	r3, [pc, #56]	@ (80076cc <MX_SPI1_Init+0x64>)
 8007694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007698:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800769a:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <MX_SPI1_Init+0x64>)
 800769c:	2200      	movs	r2, #0
 800769e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80076a0:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <MX_SPI1_Init+0x64>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80076a6:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <MX_SPI1_Init+0x64>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076ac:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <MX_SPI1_Init+0x64>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80076b2:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <MX_SPI1_Init+0x64>)
 80076b4:	220a      	movs	r2, #10
 80076b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80076b8:	4804      	ldr	r0, [pc, #16]	@ (80076cc <MX_SPI1_Init+0x64>)
 80076ba:	f001 fc93 	bl	8008fe4 <HAL_SPI_Init>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80076c4:	f000 f848 	bl	8007758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80076c8:	bf00      	nop
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	200000a8 	.word	0x200000a8
 80076d0:	40013000 	.word	0x40013000

080076d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	605a      	str	r2, [r3, #4]
 80076e4:	609a      	str	r2, [r3, #8]
 80076e6:	60da      	str	r2, [r3, #12]
 80076e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076ea:	2300      	movs	r3, #0
 80076ec:	60bb      	str	r3, [r7, #8]
 80076ee:	4b18      	ldr	r3, [pc, #96]	@ (8007750 <MX_GPIO_Init+0x7c>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	4a17      	ldr	r2, [pc, #92]	@ (8007750 <MX_GPIO_Init+0x7c>)
 80076f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80076fa:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <MX_GPIO_Init+0x7c>)
 80076fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007702:	60bb      	str	r3, [r7, #8]
 8007704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
 800770a:	4b11      	ldr	r3, [pc, #68]	@ (8007750 <MX_GPIO_Init+0x7c>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770e:	4a10      	ldr	r2, [pc, #64]	@ (8007750 <MX_GPIO_Init+0x7c>)
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	6313      	str	r3, [r2, #48]	@ 0x30
 8007716:	4b0e      	ldr	r3, [pc, #56]	@ (8007750 <MX_GPIO_Init+0x7c>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8007722:	2201      	movs	r2, #1
 8007724:	2110      	movs	r1, #16
 8007726:	480b      	ldr	r0, [pc, #44]	@ (8007754 <MX_GPIO_Init+0x80>)
 8007728:	f001 f81e 	bl	8008768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800772c:	2310      	movs	r3, #16
 800772e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007730:	2301      	movs	r3, #1
 8007732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007738:	2302      	movs	r3, #2
 800773a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	4619      	mov	r1, r3
 8007742:	4804      	ldr	r0, [pc, #16]	@ (8007754 <MX_GPIO_Init+0x80>)
 8007744:	f000 fe8c 	bl	8008460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007748:	bf00      	nop
 800774a:	3720      	adds	r7, #32
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40023800 	.word	0x40023800
 8007754:	40020000 	.word	0x40020000

08007758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800775c:	b672      	cpsid	i
}
 800775e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007760:	bf00      	nop
 8007762:	e7fd      	b.n	8007760 <Error_Handler+0x8>

08007764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	4b17      	ldr	r3, [pc, #92]	@ (80077cc <HAL_MspInit+0x68>)
 8007770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007772:	4a16      	ldr	r2, [pc, #88]	@ (80077cc <HAL_MspInit+0x68>)
 8007774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007778:	6453      	str	r3, [r2, #68]	@ 0x44
 800777a:	4b14      	ldr	r3, [pc, #80]	@ (80077cc <HAL_MspInit+0x68>)
 800777c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007786:	2300      	movs	r3, #0
 8007788:	603b      	str	r3, [r7, #0]
 800778a:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <HAL_MspInit+0x68>)
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	4a0f      	ldr	r2, [pc, #60]	@ (80077cc <HAL_MspInit+0x68>)
 8007790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007794:	6413      	str	r3, [r2, #64]	@ 0x40
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <HAL_MspInit+0x68>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80077a2:	2200      	movs	r2, #0
 80077a4:	2100      	movs	r1, #0
 80077a6:	2004      	movs	r0, #4
 80077a8:	f000 fb1b 	bl	8007de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80077ac:	2004      	movs	r0, #4
 80077ae:	f000 fb34 	bl	8007e1a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80077b2:	2200      	movs	r2, #0
 80077b4:	2100      	movs	r1, #0
 80077b6:	2005      	movs	r0, #5
 80077b8:	f000 fb13 	bl	8007de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80077bc:	2005      	movs	r0, #5
 80077be:	f000 fb2c 	bl	8007e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800

080077d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08a      	sub	sp, #40	@ 0x28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d8:	f107 0314 	add.w	r3, r7, #20
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	60da      	str	r2, [r3, #12]
 80077e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a19      	ldr	r2, [pc, #100]	@ (8007854 <HAL_SPI_MspInit+0x84>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d12b      	bne.n	800784a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	4b18      	ldr	r3, [pc, #96]	@ (8007858 <HAL_SPI_MspInit+0x88>)
 80077f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fa:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <HAL_SPI_MspInit+0x88>)
 80077fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007800:	6453      	str	r3, [r2, #68]	@ 0x44
 8007802:	4b15      	ldr	r3, [pc, #84]	@ (8007858 <HAL_SPI_MspInit+0x88>)
 8007804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	4b11      	ldr	r3, [pc, #68]	@ (8007858 <HAL_SPI_MspInit+0x88>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	4a10      	ldr	r2, [pc, #64]	@ (8007858 <HAL_SPI_MspInit+0x88>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	6313      	str	r3, [r2, #48]	@ 0x30
 800781e:	4b0e      	ldr	r3, [pc, #56]	@ (8007858 <HAL_SPI_MspInit+0x88>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800782a:	23e0      	movs	r3, #224	@ 0xe0
 800782c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800782e:	2302      	movs	r3, #2
 8007830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007836:	2303      	movs	r3, #3
 8007838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800783a:	2305      	movs	r3, #5
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800783e:	f107 0314 	add.w	r3, r7, #20
 8007842:	4619      	mov	r1, r3
 8007844:	4805      	ldr	r0, [pc, #20]	@ (800785c <HAL_SPI_MspInit+0x8c>)
 8007846:	f000 fe0b 	bl	8008460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800784a:	bf00      	nop
 800784c:	3728      	adds	r7, #40	@ 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40013000 	.word	0x40013000
 8007858:	40023800 	.word	0x40023800
 800785c:	40020000 	.word	0x40020000

08007860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <NMI_Handler+0x4>

08007868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800786c:	bf00      	nop
 800786e:	e7fd      	b.n	800786c <HardFault_Handler+0x4>

08007870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <MemManage_Handler+0x4>

08007878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800787c:	bf00      	nop
 800787e:	e7fd      	b.n	800787c <BusFault_Handler+0x4>

08007880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <UsageFault_Handler+0x4>

08007888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800788c:	bf00      	nop
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007896:	b480      	push	{r7}
 8007898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800789a:	bf00      	nop
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078a8:	bf00      	nop
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078b6:	f000 f999 	bl	8007bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078ba:	bf00      	nop
 80078bc:	bd80      	pop	{r7, pc}

080078be <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80078c2:	f000 fb19 	bl	8007ef8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}

080078ca <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80078ca:	b480      	push	{r7}
 80078cc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80078ce:	bf00      	nop
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
  return 1;
 80078dc:	2301      	movs	r3, #1
}
 80078de:	4618      	mov	r0, r3
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <_kill>:

int _kill(int pid, int sig)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80078f2:	f002 fbef 	bl	800a0d4 <__errno>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2216      	movs	r2, #22
 80078fa:	601a      	str	r2, [r3, #0]
  return -1;
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <_exit>:

void _exit (int status)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007910:	f04f 31ff 	mov.w	r1, #4294967295
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ffe7 	bl	80078e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <_exit+0x12>

0800791e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	e00a      	b.n	8007946 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007930:	f3af 8000 	nop.w
 8007934:	4601      	mov	r1, r0
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	60ba      	str	r2, [r7, #8]
 800793c:	b2ca      	uxtb	r2, r1
 800793e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3301      	adds	r3, #1
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	429a      	cmp	r2, r3
 800794c:	dbf0      	blt.n	8007930 <_read+0x12>
  }

  return len;
 800794e:	687b      	ldr	r3, [r7, #4]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e009      	b.n	800797e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	60ba      	str	r2, [r7, #8]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3301      	adds	r3, #1
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	dbf1      	blt.n	800796a <_write+0x12>
  }
  return len;
 8007986:	687b      	ldr	r3, [r7, #4]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <_close>:

int _close(int file)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80079b8:	605a      	str	r2, [r3, #4]
  return 0;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <_isatty>:

int _isatty(int file)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80079d0:	2301      	movs	r3, #1
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a00:	4a14      	ldr	r2, [pc, #80]	@ (8007a54 <_sbrk+0x5c>)
 8007a02:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <_sbrk+0x60>)
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a0c:	4b13      	ldr	r3, [pc, #76]	@ (8007a5c <_sbrk+0x64>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a14:	4b11      	ldr	r3, [pc, #68]	@ (8007a5c <_sbrk+0x64>)
 8007a16:	4a12      	ldr	r2, [pc, #72]	@ (8007a60 <_sbrk+0x68>)
 8007a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a1a:	4b10      	ldr	r3, [pc, #64]	@ (8007a5c <_sbrk+0x64>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4413      	add	r3, r2
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d207      	bcs.n	8007a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a28:	f002 fb54 	bl	800a0d4 <__errno>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	220c      	movs	r2, #12
 8007a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a32:	f04f 33ff 	mov.w	r3, #4294967295
 8007a36:	e009      	b.n	8007a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a38:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <_sbrk+0x64>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a3e:	4b07      	ldr	r3, [pc, #28]	@ (8007a5c <_sbrk+0x64>)
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4413      	add	r3, r2
 8007a46:	4a05      	ldr	r2, [pc, #20]	@ (8007a5c <_sbrk+0x64>)
 8007a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20010000 	.word	0x20010000
 8007a58:	00000400 	.word	0x00000400
 8007a5c:	20000224 	.word	0x20000224
 8007a60:	20000398 	.word	0x20000398

08007a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a68:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <SystemInit+0x20>)
 8007a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a6e:	4a05      	ldr	r2, [pc, #20]	@ (8007a84 <SystemInit+0x20>)
 8007a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a78:	bf00      	nop
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	e000ed00 	.word	0xe000ed00

08007a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007ac0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007a8c:	f7ff ffea 	bl	8007a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007a90:	480c      	ldr	r0, [pc, #48]	@ (8007ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007a92:	490d      	ldr	r1, [pc, #52]	@ (8007ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007a94:	4a0d      	ldr	r2, [pc, #52]	@ (8007acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a98:	e002      	b.n	8007aa0 <LoopCopyDataInit>

08007a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a9e:	3304      	adds	r3, #4

08007aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007aa4:	d3f9      	bcc.n	8007a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8007ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007aac:	e001      	b.n	8007ab2 <LoopFillZerobss>

08007aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ab0:	3204      	adds	r2, #4

08007ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ab4:	d3fb      	bcc.n	8007aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007ab6:	f002 fb13 	bl	800a0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007aba:	f7ff fca7 	bl	800740c <main>
  bx  lr    
 8007abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ac0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ac8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8007acc:	0800b730 	.word	0x0800b730
  ldr r2, =_sbss
 8007ad0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8007ad4:	20000398 	.word	0x20000398

08007ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ad8:	e7fe      	b.n	8007ad8 <ADC_IRQHandler>
	...

08007adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8007b1c <HAL_Init+0x40>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8007b1c <HAL_Init+0x40>)
 8007ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007aec:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <HAL_Init+0x40>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	@ (8007b1c <HAL_Init+0x40>)
 8007af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007af8:	4b08      	ldr	r3, [pc, #32]	@ (8007b1c <HAL_Init+0x40>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a07      	ldr	r2, [pc, #28]	@ (8007b1c <HAL_Init+0x40>)
 8007afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b04:	2003      	movs	r0, #3
 8007b06:	f000 f961 	bl	8007dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b0a:	200f      	movs	r0, #15
 8007b0c:	f000 f83e 	bl	8007b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b10:	f7ff fe28 	bl	8007764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40023c00 	.word	0x40023c00

08007b20 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8007b24:	4b11      	ldr	r3, [pc, #68]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b26:	4a12      	ldr	r2, [pc, #72]	@ (8007b70 <HAL_DeInit+0x50>)
 8007b28:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8007b2a:	4b10      	ldr	r3, [pc, #64]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8007b30:	4b0e      	ldr	r3, [pc, #56]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b32:	4a10      	ldr	r2, [pc, #64]	@ (8007b74 <HAL_DeInit+0x54>)
 8007b34:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8007b36:	4b0d      	ldr	r3, [pc, #52]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007b78 <HAL_DeInit+0x58>)
 8007b40:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8007b42:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8007b48:	4b08      	ldr	r3, [pc, #32]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b4a:	2280      	movs	r2, #128	@ 0x80
 8007b4c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8007b4e:	4b07      	ldr	r3, [pc, #28]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b56:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8007b5c:	4b03      	ldr	r3, [pc, #12]	@ (8007b6c <HAL_DeInit+0x4c>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8007b62:	f000 f80b 	bl	8007b7c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	10e2c80f 	.word	0x10e2c80f
 8007b74:	00077931 	.word	0x00077931
 8007b78:	0060109f 	.word	0x0060109f

08007b7c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8007b80:	bf00      	nop
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b94:	4b12      	ldr	r3, [pc, #72]	@ (8007be0 <HAL_InitTick+0x54>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <HAL_InitTick+0x58>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 f943 	bl	8007e36 <HAL_SYSTICK_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e00e      	b.n	8007bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b0f      	cmp	r3, #15
 8007bbe:	d80a      	bhi.n	8007bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	f000 f90b 	bl	8007de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007bcc:	4a06      	ldr	r2, [pc, #24]	@ (8007be8 <HAL_InitTick+0x5c>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e000      	b.n	8007bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000000 	.word	0x20000000
 8007be4:	20000008 	.word	0x20000008
 8007be8:	20000004 	.word	0x20000004

08007bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007bf0:	4b06      	ldr	r3, [pc, #24]	@ (8007c0c <HAL_IncTick+0x20>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	4b06      	ldr	r3, [pc, #24]	@ (8007c10 <HAL_IncTick+0x24>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	4a04      	ldr	r2, [pc, #16]	@ (8007c10 <HAL_IncTick+0x24>)
 8007bfe:	6013      	str	r3, [r2, #0]
}
 8007c00:	bf00      	nop
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000008 	.word	0x20000008
 8007c10:	20000228 	.word	0x20000228

08007c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  return uwTick;
 8007c18:	4b03      	ldr	r3, [pc, #12]	@ (8007c28 <HAL_GetTick+0x14>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000228 	.word	0x20000228

08007c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <__NVIC_SetPriorityGrouping+0x44>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007c48:	4013      	ands	r3, r2
 8007c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c5e:	4a04      	ldr	r2, [pc, #16]	@ (8007c70 <__NVIC_SetPriorityGrouping+0x44>)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	60d3      	str	r3, [r2, #12]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	e000ed00 	.word	0xe000ed00

08007c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c78:	4b04      	ldr	r3, [pc, #16]	@ (8007c8c <__NVIC_GetPriorityGrouping+0x18>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	0a1b      	lsrs	r3, r3, #8
 8007c7e:	f003 0307 	and.w	r3, r3, #7
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	e000ed00 	.word	0xe000ed00

08007c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	db0b      	blt.n	8007cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	f003 021f 	and.w	r2, r3, #31
 8007ca8:	4907      	ldr	r1, [pc, #28]	@ (8007cc8 <__NVIC_EnableIRQ+0x38>)
 8007caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	e000e100 	.word	0xe000e100

08007ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	6039      	str	r1, [r7, #0]
 8007cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	db0a      	blt.n	8007cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	490c      	ldr	r1, [pc, #48]	@ (8007d18 <__NVIC_SetPriority+0x4c>)
 8007ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cea:	0112      	lsls	r2, r2, #4
 8007cec:	b2d2      	uxtb	r2, r2
 8007cee:	440b      	add	r3, r1
 8007cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cf4:	e00a      	b.n	8007d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	4908      	ldr	r1, [pc, #32]	@ (8007d1c <__NVIC_SetPriority+0x50>)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	3b04      	subs	r3, #4
 8007d04:	0112      	lsls	r2, r2, #4
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	440b      	add	r3, r1
 8007d0a:	761a      	strb	r2, [r3, #24]
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	e000e100 	.word	0xe000e100
 8007d1c:	e000ed00 	.word	0xe000ed00

08007d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	@ 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	f1c3 0307 	rsb	r3, r3, #7
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	bf28      	it	cs
 8007d3e:	2304      	movcs	r3, #4
 8007d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	3304      	adds	r3, #4
 8007d46:	2b06      	cmp	r3, #6
 8007d48:	d902      	bls.n	8007d50 <NVIC_EncodePriority+0x30>
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	3b03      	subs	r3, #3
 8007d4e:	e000      	b.n	8007d52 <NVIC_EncodePriority+0x32>
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	43da      	mvns	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	401a      	ands	r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d68:	f04f 31ff 	mov.w	r1, #4294967295
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d72:	43d9      	mvns	r1, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d78:	4313      	orrs	r3, r2
         );
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3724      	adds	r7, #36	@ 0x24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d98:	d301      	bcc.n	8007d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e00f      	b.n	8007dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007dc8 <SysTick_Config+0x40>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007da6:	210f      	movs	r1, #15
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	f7ff ff8e 	bl	8007ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007db0:	4b05      	ldr	r3, [pc, #20]	@ (8007dc8 <SysTick_Config+0x40>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007db6:	4b04      	ldr	r3, [pc, #16]	@ (8007dc8 <SysTick_Config+0x40>)
 8007db8:	2207      	movs	r2, #7
 8007dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	e000e010 	.word	0xe000e010

08007dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff ff29 	bl	8007c2c <__NVIC_SetPriorityGrouping>
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b086      	sub	sp, #24
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	4603      	mov	r3, r0
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007df4:	f7ff ff3e 	bl	8007c74 <__NVIC_GetPriorityGrouping>
 8007df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	68b9      	ldr	r1, [r7, #8]
 8007dfe:	6978      	ldr	r0, [r7, #20]
 8007e00:	f7ff ff8e 	bl	8007d20 <NVIC_EncodePriority>
 8007e04:	4602      	mov	r2, r0
 8007e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff ff5d 	bl	8007ccc <__NVIC_SetPriority>
}
 8007e12:	bf00      	nop
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	4603      	mov	r3, r0
 8007e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff ff31 	bl	8007c90 <__NVIC_EnableIRQ>
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff ffa2 	bl	8007d88 <SysTick_Config>
 8007e44:	4603      	mov	r3, r0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007e62:	4b23      	ldr	r3, [pc, #140]	@ (8007ef0 <HAL_FLASH_Program+0xa0>)
 8007e64:	7e1b      	ldrb	r3, [r3, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_FLASH_Program+0x1e>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e03b      	b.n	8007ee6 <HAL_FLASH_Program+0x96>
 8007e6e:	4b20      	ldr	r3, [pc, #128]	@ (8007ef0 <HAL_FLASH_Program+0xa0>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007e78:	f000 f924 	bl	80080c4 <FLASH_WaitForLastOperation>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d12b      	bne.n	8007ede <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d105      	bne.n	8007e98 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007e8c:	783b      	ldrb	r3, [r7, #0]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f000 f9cf 	bl	8008234 <FLASH_Program_Byte>
 8007e96:	e016      	b.n	8007ec6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d105      	bne.n	8007eaa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007e9e:	883b      	ldrh	r3, [r7, #0]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	68b8      	ldr	r0, [r7, #8]
 8007ea4:	f000 f9a2 	bl	80081ec <FLASH_Program_HalfWord>
 8007ea8:	e00d      	b.n	8007ec6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d105      	bne.n	8007ebc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	68b8      	ldr	r0, [r7, #8]
 8007eb6:	f000 f977 	bl	80081a8 <FLASH_Program_Word>
 8007eba:	e004      	b.n	8007ec6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	f000 f93f 	bl	8008144 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ec6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007eca:	f000 f8fb 	bl	80080c4 <FLASH_WaitForLastOperation>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007ed2:	4b08      	ldr	r3, [pc, #32]	@ (8007ef4 <HAL_FLASH_Program+0xa4>)
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	4a07      	ldr	r2, [pc, #28]	@ (8007ef4 <HAL_FLASH_Program+0xa4>)
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ede:	4b04      	ldr	r3, [pc, #16]	@ (8007ef0 <HAL_FLASH_Program+0xa0>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	2000022c 	.word	0x2000022c
 8007ef4:	40023c00 	.word	0x40023c00

08007ef8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007f02:	4b4b      	ldr	r3, [pc, #300]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d020      	beq.n	8007f50 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007f0e:	4b49      	ldr	r3, [pc, #292]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d107      	bne.n	8007f28 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8007f18:	4b46      	ldr	r3, [pc, #280]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8007f1e:	4b45      	ldr	r3, [pc, #276]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f20:	f04f 32ff 	mov.w	r2, #4294967295
 8007f24:	60da      	str	r2, [r3, #12]
 8007f26:	e00b      	b.n	8007f40 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8007f28:	4b42      	ldr	r3, [pc, #264]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d103      	bne.n	8007f3a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8007f32:	4b40      	ldr	r3, [pc, #256]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	607b      	str	r3, [r7, #4]
 8007f38:	e002      	b.n	8007f40 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8007f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8007f40:	f000 f99a 	bl	8008278 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f881 	bl	800804c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007f50:	4b37      	ldr	r3, [pc, #220]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d04a      	beq.n	8007ff2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007f5c:	4b34      	ldr	r3, [pc, #208]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007f62:	4b34      	ldr	r3, [pc, #208]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d12d      	bne.n	8007fc8 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8007f6c:	4b31      	ldr	r3, [pc, #196]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	4a30      	ldr	r2, [pc, #192]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f74:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8007f76:	4b2f      	ldr	r3, [pc, #188]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d015      	beq.n	8007faa <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8007f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f857 	bl	8008038 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	4a28      	ldr	r2, [pc, #160]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f92:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8007f94:	4b27      	ldr	r3, [pc, #156]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8007f9a:	4b26      	ldr	r3, [pc, #152]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007f9c:	7a1b      	ldrb	r3, [r3, #8]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9ce 	bl	8008344 <FLASH_Erase_Sector>
 8007fa8:	e023      	b.n	8007ff2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8007faa:	f04f 33ff 	mov.w	r3, #4294967295
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	4a20      	ldr	r2, [pc, #128]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8007fbc:	f000 fa0a 	bl	80083d4 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f839 	bl	8008038 <HAL_FLASH_EndOfOperationCallback>
 8007fc6:	e014      	b.n	8007ff2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8007fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d107      	bne.n	8007fe2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8007fd2:	f000 f9ff 	bl	80083d4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8007fd6:	4b17      	ldr	r3, [pc, #92]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f82c 	bl	8008038 <HAL_FLASH_EndOfOperationCallback>
 8007fe0:	e004      	b.n	8007fec <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8007fe2:	4b14      	ldr	r3, [pc, #80]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f826 	bl	8008038 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007fec:	4b11      	ldr	r3, [pc, #68]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8007ff2:	4b10      	ldr	r3, [pc, #64]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d114      	bne.n	8008026 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8007ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	4a0b      	ldr	r2, [pc, #44]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 8008002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008006:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8008008:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	4a08      	ldr	r2, [pc, #32]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 800800e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008012:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8008014:	4b06      	ldr	r3, [pc, #24]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	4a05      	ldr	r2, [pc, #20]	@ (8008030 <HAL_FLASH_IRQHandler+0x138>)
 800801a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800801e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8008020:	4b04      	ldr	r3, [pc, #16]	@ (8008034 <HAL_FLASH_IRQHandler+0x13c>)
 8008022:	2200      	movs	r2, #0
 8008024:	761a      	strb	r2, [r3, #24]
  }
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	40023c00 	.word	0x40023c00
 8008034:	2000022c 	.word	0x2000022c

08008038 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800806a:	4b0b      	ldr	r3, [pc, #44]	@ (8008098 <HAL_FLASH_Unlock+0x38>)
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	da0b      	bge.n	800808a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008072:	4b09      	ldr	r3, [pc, #36]	@ (8008098 <HAL_FLASH_Unlock+0x38>)
 8008074:	4a09      	ldr	r2, [pc, #36]	@ (800809c <HAL_FLASH_Unlock+0x3c>)
 8008076:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008078:	4b07      	ldr	r3, [pc, #28]	@ (8008098 <HAL_FLASH_Unlock+0x38>)
 800807a:	4a09      	ldr	r2, [pc, #36]	@ (80080a0 <HAL_FLASH_Unlock+0x40>)
 800807c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800807e:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <HAL_FLASH_Unlock+0x38>)
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	da01      	bge.n	800808a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800808a:	79fb      	ldrb	r3, [r7, #7]
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	40023c00 	.word	0x40023c00
 800809c:	45670123 	.word	0x45670123
 80080a0:	cdef89ab 	.word	0xcdef89ab

080080a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <HAL_FLASH_Lock+0x1c>)
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	4a04      	ldr	r2, [pc, #16]	@ (80080c0 <HAL_FLASH_Lock+0x1c>)
 80080ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080b2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	40023c00 	.word	0x40023c00

080080c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80080d0:	4b1a      	ldr	r3, [pc, #104]	@ (800813c <FLASH_WaitForLastOperation+0x78>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80080d6:	f7ff fd9d 	bl	8007c14 <HAL_GetTick>
 80080da:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80080dc:	e010      	b.n	8008100 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d00c      	beq.n	8008100 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <FLASH_WaitForLastOperation+0x38>
 80080ec:	f7ff fd92 	bl	8007c14 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d201      	bcs.n	8008100 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e019      	b.n	8008134 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008100:	4b0f      	ldr	r3, [pc, #60]	@ (8008140 <FLASH_WaitForLastOperation+0x7c>)
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e8      	bne.n	80080de <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800810c:	4b0c      	ldr	r3, [pc, #48]	@ (8008140 <FLASH_WaitForLastOperation+0x7c>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008118:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <FLASH_WaitForLastOperation+0x7c>)
 800811a:	2201      	movs	r2, #1
 800811c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800811e:	4b08      	ldr	r3, [pc, #32]	@ (8008140 <FLASH_WaitForLastOperation+0x7c>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800812a:	f000 f8a5 	bl	8008278 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008132:	2300      	movs	r3, #0
  
}  
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	2000022c 	.word	0x2000022c
 8008140:	40023c00 	.word	0x40023c00

08008144 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008150:	4b14      	ldr	r3, [pc, #80]	@ (80081a4 <FLASH_Program_DoubleWord+0x60>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	4a13      	ldr	r2, [pc, #76]	@ (80081a4 <FLASH_Program_DoubleWord+0x60>)
 8008156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800815a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800815c:	4b11      	ldr	r3, [pc, #68]	@ (80081a4 <FLASH_Program_DoubleWord+0x60>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	4a10      	ldr	r2, [pc, #64]	@ (80081a4 <FLASH_Program_DoubleWord+0x60>)
 8008162:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008166:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008168:	4b0e      	ldr	r3, [pc, #56]	@ (80081a4 <FLASH_Program_DoubleWord+0x60>)
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	4a0d      	ldr	r2, [pc, #52]	@ (80081a4 <FLASH_Program_DoubleWord+0x60>)
 800816e:	f043 0301 	orr.w	r3, r3, #1
 8008172:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800817a:	f3bf 8f6f 	isb	sy
}
 800817e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008180:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	000a      	movs	r2, r1
 800818e:	2300      	movs	r3, #0
 8008190:	68f9      	ldr	r1, [r7, #12]
 8008192:	3104      	adds	r1, #4
 8008194:	4613      	mov	r3, r2
 8008196:	600b      	str	r3, [r1, #0]
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	40023c00 	.word	0x40023c00

080081a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80081b2:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <FLASH_Program_Word+0x40>)
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	4a0c      	ldr	r2, [pc, #48]	@ (80081e8 <FLASH_Program_Word+0x40>)
 80081b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80081be:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <FLASH_Program_Word+0x40>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4a09      	ldr	r2, [pc, #36]	@ (80081e8 <FLASH_Program_Word+0x40>)
 80081c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80081c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80081ca:	4b07      	ldr	r3, [pc, #28]	@ (80081e8 <FLASH_Program_Word+0x40>)
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	4a06      	ldr	r2, [pc, #24]	@ (80081e8 <FLASH_Program_Word+0x40>)
 80081d0:	f043 0301 	orr.w	r3, r3, #1
 80081d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	601a      	str	r2, [r3, #0]
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	40023c00 	.word	0x40023c00

080081ec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80081f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008230 <FLASH_Program_HalfWord+0x44>)
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008230 <FLASH_Program_HalfWord+0x44>)
 80081fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008202:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008204:	4b0a      	ldr	r3, [pc, #40]	@ (8008230 <FLASH_Program_HalfWord+0x44>)
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	4a09      	ldr	r2, [pc, #36]	@ (8008230 <FLASH_Program_HalfWord+0x44>)
 800820a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800820e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008210:	4b07      	ldr	r3, [pc, #28]	@ (8008230 <FLASH_Program_HalfWord+0x44>)
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	4a06      	ldr	r2, [pc, #24]	@ (8008230 <FLASH_Program_HalfWord+0x44>)
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	887a      	ldrh	r2, [r7, #2]
 8008220:	801a      	strh	r2, [r3, #0]
}
 8008222:	bf00      	nop
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40023c00 	.word	0x40023c00

08008234 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008240:	4b0c      	ldr	r3, [pc, #48]	@ (8008274 <FLASH_Program_Byte+0x40>)
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	4a0b      	ldr	r2, [pc, #44]	@ (8008274 <FLASH_Program_Byte+0x40>)
 8008246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800824a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800824c:	4b09      	ldr	r3, [pc, #36]	@ (8008274 <FLASH_Program_Byte+0x40>)
 800824e:	4a09      	ldr	r2, [pc, #36]	@ (8008274 <FLASH_Program_Byte+0x40>)
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008254:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <FLASH_Program_Byte+0x40>)
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	4a06      	ldr	r2, [pc, #24]	@ (8008274 <FLASH_Program_Byte+0x40>)
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	701a      	strb	r2, [r3, #0]
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40023c00 	.word	0x40023c00

08008278 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800827c:	4b2f      	ldr	r3, [pc, #188]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f003 0310 	and.w	r3, r3, #16
 8008284:	2b00      	cmp	r3, #0
 8008286:	d008      	beq.n	800829a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008288:	4b2d      	ldr	r3, [pc, #180]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f043 0310 	orr.w	r3, r3, #16
 8008290:	4a2b      	ldr	r2, [pc, #172]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 8008292:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008294:	4b29      	ldr	r3, [pc, #164]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 8008296:	2210      	movs	r2, #16
 8008298:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800829a:	4b28      	ldr	r3, [pc, #160]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80082a6:	4b26      	ldr	r3, [pc, #152]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f043 0308 	orr.w	r3, r3, #8
 80082ae:	4a24      	ldr	r2, [pc, #144]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 80082b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80082b2:	4b22      	ldr	r3, [pc, #136]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 80082b4:	2220      	movs	r2, #32
 80082b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80082b8:	4b20      	ldr	r3, [pc, #128]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d008      	beq.n	80082d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80082c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f043 0304 	orr.w	r3, r3, #4
 80082cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 80082ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80082d0:	4b1a      	ldr	r3, [pc, #104]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 80082d2:	2240      	movs	r2, #64	@ 0x40
 80082d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80082d6:	4b19      	ldr	r3, [pc, #100]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d008      	beq.n	80082f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80082e2:	4b17      	ldr	r3, [pc, #92]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f043 0302 	orr.w	r3, r3, #2
 80082ea:	4a15      	ldr	r2, [pc, #84]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 80082ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80082ee:	4b13      	ldr	r3, [pc, #76]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 80082f0:	2280      	movs	r2, #128	@ 0x80
 80082f2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80082f4:	4b11      	ldr	r3, [pc, #68]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d009      	beq.n	8008314 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008300:	4b0f      	ldr	r3, [pc, #60]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f043 0301 	orr.w	r3, r3, #1
 8008308:	4a0d      	ldr	r2, [pc, #52]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 800830a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800830c:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 800830e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008312:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008314:	4b09      	ldr	r3, [pc, #36]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d008      	beq.n	8008332 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008320:	4b07      	ldr	r3, [pc, #28]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f043 0320 	orr.w	r3, r3, #32
 8008328:	4a05      	ldr	r2, [pc, #20]	@ (8008340 <FLASH_SetErrorCode+0xc8>)
 800832a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800832c:	4b03      	ldr	r3, [pc, #12]	@ (800833c <FLASH_SetErrorCode+0xc4>)
 800832e:	2202      	movs	r2, #2
 8008330:	60da      	str	r2, [r3, #12]
  }
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40023c00 	.word	0x40023c00
 8008340:	2000022c 	.word	0x2000022c

08008344 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800835a:	2300      	movs	r3, #0
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	e010      	b.n	8008382 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d103      	bne.n	800836e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	e009      	b.n	8008382 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d103      	bne.n	800837c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e002      	b.n	8008382 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800837c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008380:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008382:	4b13      	ldr	r3, [pc, #76]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	4a12      	ldr	r2, [pc, #72]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 8008388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800838c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800838e:	4b10      	ldr	r3, [pc, #64]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 8008390:	691a      	ldr	r2, [r3, #16]
 8008392:	490f      	ldr	r1, [pc, #60]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	4a0c      	ldr	r2, [pc, #48]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 80083a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80083a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80083a6:	4b0a      	ldr	r3, [pc, #40]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	4a07      	ldr	r2, [pc, #28]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 80083b2:	f043 0302 	orr.w	r3, r3, #2
 80083b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80083b8:	4b05      	ldr	r3, [pc, #20]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	4a04      	ldr	r2, [pc, #16]	@ (80083d0 <FLASH_Erase_Sector+0x8c>)
 80083be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083c2:	6113      	str	r3, [r2, #16]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40023c00 	.word	0x40023c00

080083d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80083d8:	4b20      	ldr	r3, [pc, #128]	@ (800845c <FLASH_FlushCaches+0x88>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d017      	beq.n	8008414 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80083e4:	4b1d      	ldr	r3, [pc, #116]	@ (800845c <FLASH_FlushCaches+0x88>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a1c      	ldr	r2, [pc, #112]	@ (800845c <FLASH_FlushCaches+0x88>)
 80083ea:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80083f0:	4b1a      	ldr	r3, [pc, #104]	@ (800845c <FLASH_FlushCaches+0x88>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a19      	ldr	r2, [pc, #100]	@ (800845c <FLASH_FlushCaches+0x88>)
 80083f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	4b17      	ldr	r3, [pc, #92]	@ (800845c <FLASH_FlushCaches+0x88>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a16      	ldr	r2, [pc, #88]	@ (800845c <FLASH_FlushCaches+0x88>)
 8008402:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008406:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008408:	4b14      	ldr	r3, [pc, #80]	@ (800845c <FLASH_FlushCaches+0x88>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a13      	ldr	r2, [pc, #76]	@ (800845c <FLASH_FlushCaches+0x88>)
 800840e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008412:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008414:	4b11      	ldr	r3, [pc, #68]	@ (800845c <FLASH_FlushCaches+0x88>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800841c:	2b00      	cmp	r3, #0
 800841e:	d017      	beq.n	8008450 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008420:	4b0e      	ldr	r3, [pc, #56]	@ (800845c <FLASH_FlushCaches+0x88>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a0d      	ldr	r2, [pc, #52]	@ (800845c <FLASH_FlushCaches+0x88>)
 8008426:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800842a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800842c:	4b0b      	ldr	r3, [pc, #44]	@ (800845c <FLASH_FlushCaches+0x88>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0a      	ldr	r2, [pc, #40]	@ (800845c <FLASH_FlushCaches+0x88>)
 8008432:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	4b08      	ldr	r3, [pc, #32]	@ (800845c <FLASH_FlushCaches+0x88>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a07      	ldr	r2, [pc, #28]	@ (800845c <FLASH_FlushCaches+0x88>)
 800843e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008442:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008444:	4b05      	ldr	r3, [pc, #20]	@ (800845c <FLASH_FlushCaches+0x88>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a04      	ldr	r2, [pc, #16]	@ (800845c <FLASH_FlushCaches+0x88>)
 800844a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800844e:	6013      	str	r3, [r2, #0]
  }
}
 8008450:	bf00      	nop
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40023c00 	.word	0x40023c00

08008460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008460:	b480      	push	{r7}
 8008462:	b089      	sub	sp, #36	@ 0x24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800846a:	2300      	movs	r3, #0
 800846c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008472:	2300      	movs	r3, #0
 8008474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
 800847a:	e159      	b.n	8008730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800847c:	2201      	movs	r2, #1
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	fa02 f303 	lsl.w	r3, r2, r3
 8008484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4013      	ands	r3, r2
 800848e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	429a      	cmp	r2, r3
 8008496:	f040 8148 	bne.w	800872a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d005      	beq.n	80084b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d130      	bne.n	8008514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	2203      	movs	r2, #3
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43db      	mvns	r3, r3
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	4013      	ands	r3, r2
 80084c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	4313      	orrs	r3, r2
 80084da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80084e8:	2201      	movs	r2, #1
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	43db      	mvns	r3, r3
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	4013      	ands	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	091b      	lsrs	r3, r3, #4
 80084fe:	f003 0201 	and.w	r2, r3, #1
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	4313      	orrs	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	2b03      	cmp	r3, #3
 800851e:	d017      	beq.n	8008550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	2203      	movs	r2, #3
 800852c:	fa02 f303 	lsl.w	r3, r2, r3
 8008530:	43db      	mvns	r3, r3
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	4013      	ands	r3, r2
 8008536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	4313      	orrs	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	2b02      	cmp	r3, #2
 800855a:	d123      	bne.n	80085a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	08da      	lsrs	r2, r3, #3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3208      	adds	r2, #8
 8008564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	220f      	movs	r2, #15
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	43db      	mvns	r3, r3
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	4013      	ands	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	4313      	orrs	r3, r2
 8008594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	08da      	lsrs	r2, r3, #3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3208      	adds	r2, #8
 800859e:	69b9      	ldr	r1, [r7, #24]
 80085a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	2203      	movs	r2, #3
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	43db      	mvns	r3, r3
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	4013      	ands	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f003 0203 	and.w	r2, r3, #3
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 80a2 	beq.w	800872a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	4b57      	ldr	r3, [pc, #348]	@ (8008748 <HAL_GPIO_Init+0x2e8>)
 80085ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ee:	4a56      	ldr	r2, [pc, #344]	@ (8008748 <HAL_GPIO_Init+0x2e8>)
 80085f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80085f6:	4b54      	ldr	r3, [pc, #336]	@ (8008748 <HAL_GPIO_Init+0x2e8>)
 80085f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008602:	4a52      	ldr	r2, [pc, #328]	@ (800874c <HAL_GPIO_Init+0x2ec>)
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	089b      	lsrs	r3, r3, #2
 8008608:	3302      	adds	r3, #2
 800860a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800860e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	220f      	movs	r2, #15
 800861a:	fa02 f303 	lsl.w	r3, r2, r3
 800861e:	43db      	mvns	r3, r3
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	4013      	ands	r3, r2
 8008624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a49      	ldr	r2, [pc, #292]	@ (8008750 <HAL_GPIO_Init+0x2f0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d019      	beq.n	8008662 <HAL_GPIO_Init+0x202>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a48      	ldr	r2, [pc, #288]	@ (8008754 <HAL_GPIO_Init+0x2f4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d013      	beq.n	800865e <HAL_GPIO_Init+0x1fe>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a47      	ldr	r2, [pc, #284]	@ (8008758 <HAL_GPIO_Init+0x2f8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00d      	beq.n	800865a <HAL_GPIO_Init+0x1fa>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a46      	ldr	r2, [pc, #280]	@ (800875c <HAL_GPIO_Init+0x2fc>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d007      	beq.n	8008656 <HAL_GPIO_Init+0x1f6>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a45      	ldr	r2, [pc, #276]	@ (8008760 <HAL_GPIO_Init+0x300>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d101      	bne.n	8008652 <HAL_GPIO_Init+0x1f2>
 800864e:	2304      	movs	r3, #4
 8008650:	e008      	b.n	8008664 <HAL_GPIO_Init+0x204>
 8008652:	2307      	movs	r3, #7
 8008654:	e006      	b.n	8008664 <HAL_GPIO_Init+0x204>
 8008656:	2303      	movs	r3, #3
 8008658:	e004      	b.n	8008664 <HAL_GPIO_Init+0x204>
 800865a:	2302      	movs	r3, #2
 800865c:	e002      	b.n	8008664 <HAL_GPIO_Init+0x204>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <HAL_GPIO_Init+0x204>
 8008662:	2300      	movs	r3, #0
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	f002 0203 	and.w	r2, r2, #3
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	4093      	lsls	r3, r2
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	4313      	orrs	r3, r2
 8008672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008674:	4935      	ldr	r1, [pc, #212]	@ (800874c <HAL_GPIO_Init+0x2ec>)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	089b      	lsrs	r3, r3, #2
 800867a:	3302      	adds	r3, #2
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008682:	4b38      	ldr	r3, [pc, #224]	@ (8008764 <HAL_GPIO_Init+0x304>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	43db      	mvns	r3, r3
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	4013      	ands	r3, r2
 8008690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008764 <HAL_GPIO_Init+0x304>)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80086ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008764 <HAL_GPIO_Init+0x304>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	43db      	mvns	r3, r3
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	4013      	ands	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80086d0:	4a24      	ldr	r2, [pc, #144]	@ (8008764 <HAL_GPIO_Init+0x304>)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80086d6:	4b23      	ldr	r3, [pc, #140]	@ (8008764 <HAL_GPIO_Init+0x304>)
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	43db      	mvns	r3, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4013      	ands	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80086fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008764 <HAL_GPIO_Init+0x304>)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008700:	4b18      	ldr	r3, [pc, #96]	@ (8008764 <HAL_GPIO_Init+0x304>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	43db      	mvns	r3, r3
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4013      	ands	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008724:	4a0f      	ldr	r2, [pc, #60]	@ (8008764 <HAL_GPIO_Init+0x304>)
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	3301      	adds	r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b0f      	cmp	r3, #15
 8008734:	f67f aea2 	bls.w	800847c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	3724      	adds	r7, #36	@ 0x24
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40023800 	.word	0x40023800
 800874c:	40013800 	.word	0x40013800
 8008750:	40020000 	.word	0x40020000
 8008754:	40020400 	.word	0x40020400
 8008758:	40020800 	.word	0x40020800
 800875c:	40020c00 	.word	0x40020c00
 8008760:	40021000 	.word	0x40021000
 8008764:	40013c00 	.word	0x40013c00

08008768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
 8008774:	4613      	mov	r3, r2
 8008776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008778:	787b      	ldrb	r3, [r7, #1]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800877e:	887a      	ldrh	r2, [r7, #2]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008784:	e003      	b.n	800878e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008786:	887b      	ldrh	r3, [r7, #2]
 8008788:	041a      	lsls	r2, r3, #16
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	619a      	str	r2, [r3, #24]
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e267      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d075      	beq.n	80088a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ba:	4b88      	ldr	r3, [pc, #544]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 030c 	and.w	r3, r3, #12
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d00c      	beq.n	80087e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087c6:	4b85      	ldr	r3, [pc, #532]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d112      	bne.n	80087f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087d2:	4b82      	ldr	r3, [pc, #520]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087de:	d10b      	bne.n	80087f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e0:	4b7e      	ldr	r3, [pc, #504]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d05b      	beq.n	80088a4 <HAL_RCC_OscConfig+0x108>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d157      	bne.n	80088a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e242      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008800:	d106      	bne.n	8008810 <HAL_RCC_OscConfig+0x74>
 8008802:	4b76      	ldr	r3, [pc, #472]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a75      	ldr	r2, [pc, #468]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	e01d      	b.n	800884c <HAL_RCC_OscConfig+0xb0>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008818:	d10c      	bne.n	8008834 <HAL_RCC_OscConfig+0x98>
 800881a:	4b70      	ldr	r3, [pc, #448]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a6f      	ldr	r2, [pc, #444]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	4b6d      	ldr	r3, [pc, #436]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a6c      	ldr	r2, [pc, #432]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 800882c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	e00b      	b.n	800884c <HAL_RCC_OscConfig+0xb0>
 8008834:	4b69      	ldr	r3, [pc, #420]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a68      	ldr	r2, [pc, #416]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 800883a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	4b66      	ldr	r3, [pc, #408]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a65      	ldr	r2, [pc, #404]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800884a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d013      	beq.n	800887c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008854:	f7ff f9de 	bl	8007c14 <HAL_GetTick>
 8008858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800885c:	f7ff f9da 	bl	8007c14 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b64      	cmp	r3, #100	@ 0x64
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e207      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800886e:	4b5b      	ldr	r3, [pc, #364]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0xc0>
 800887a:	e014      	b.n	80088a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800887c:	f7ff f9ca 	bl	8007c14 <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008884:	f7ff f9c6 	bl	8007c14 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b64      	cmp	r3, #100	@ 0x64
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e1f3      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008896:	4b51      	ldr	r3, [pc, #324]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f0      	bne.n	8008884 <HAL_RCC_OscConfig+0xe8>
 80088a2:	e000      	b.n	80088a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d063      	beq.n	800897a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088b2:	4b4a      	ldr	r3, [pc, #296]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 030c 	and.w	r3, r3, #12
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088be:	4b47      	ldr	r3, [pc, #284]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d11c      	bne.n	8008904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ca:	4b44      	ldr	r3, [pc, #272]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d116      	bne.n	8008904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088d6:	4b41      	ldr	r3, [pc, #260]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d005      	beq.n	80088ee <HAL_RCC_OscConfig+0x152>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d001      	beq.n	80088ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e1c7      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ee:	4b3b      	ldr	r3, [pc, #236]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	4937      	ldr	r1, [pc, #220]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008902:	e03a      	b.n	800897a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d020      	beq.n	800894e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800890c:	4b34      	ldr	r3, [pc, #208]	@ (80089e0 <HAL_RCC_OscConfig+0x244>)
 800890e:	2201      	movs	r2, #1
 8008910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008912:	f7ff f97f 	bl	8007c14 <HAL_GetTick>
 8008916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008918:	e008      	b.n	800892c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800891a:	f7ff f97b 	bl	8007c14 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d901      	bls.n	800892c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e1a8      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892c:	4b2b      	ldr	r3, [pc, #172]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0f0      	beq.n	800891a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008938:	4b28      	ldr	r3, [pc, #160]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	4925      	ldr	r1, [pc, #148]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008948:	4313      	orrs	r3, r2
 800894a:	600b      	str	r3, [r1, #0]
 800894c:	e015      	b.n	800897a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800894e:	4b24      	ldr	r3, [pc, #144]	@ (80089e0 <HAL_RCC_OscConfig+0x244>)
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008954:	f7ff f95e 	bl	8007c14 <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800895a:	e008      	b.n	800896e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800895c:	f7ff f95a 	bl	8007c14 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e187      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800896e:	4b1b      	ldr	r3, [pc, #108]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1f0      	bne.n	800895c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d036      	beq.n	80089f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d016      	beq.n	80089bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800898e:	4b15      	ldr	r3, [pc, #84]	@ (80089e4 <HAL_RCC_OscConfig+0x248>)
 8008990:	2201      	movs	r2, #1
 8008992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008994:	f7ff f93e 	bl	8007c14 <HAL_GetTick>
 8008998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800899c:	f7ff f93a 	bl	8007c14 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e167      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ae:	4b0b      	ldr	r3, [pc, #44]	@ (80089dc <HAL_RCC_OscConfig+0x240>)
 80089b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0f0      	beq.n	800899c <HAL_RCC_OscConfig+0x200>
 80089ba:	e01b      	b.n	80089f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089bc:	4b09      	ldr	r3, [pc, #36]	@ (80089e4 <HAL_RCC_OscConfig+0x248>)
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089c2:	f7ff f927 	bl	8007c14 <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089c8:	e00e      	b.n	80089e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089ca:	f7ff f923 	bl	8007c14 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d907      	bls.n	80089e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e150      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
 80089dc:	40023800 	.word	0x40023800
 80089e0:	42470000 	.word	0x42470000
 80089e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089e8:	4b88      	ldr	r3, [pc, #544]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 80089ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1ea      	bne.n	80089ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 8097 	beq.w	8008b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a06:	4b81      	ldr	r3, [pc, #516]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10f      	bne.n	8008a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a12:	2300      	movs	r3, #0
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	4b7d      	ldr	r3, [pc, #500]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a22:	4b7a      	ldr	r3, [pc, #488]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a2a:	60bb      	str	r3, [r7, #8]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a32:	4b77      	ldr	r3, [pc, #476]	@ (8008c10 <HAL_RCC_OscConfig+0x474>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d118      	bne.n	8008a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a3e:	4b74      	ldr	r3, [pc, #464]	@ (8008c10 <HAL_RCC_OscConfig+0x474>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a73      	ldr	r2, [pc, #460]	@ (8008c10 <HAL_RCC_OscConfig+0x474>)
 8008a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a4a:	f7ff f8e3 	bl	8007c14 <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a52:	f7ff f8df 	bl	8007c14 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e10c      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a64:	4b6a      	ldr	r3, [pc, #424]	@ (8008c10 <HAL_RCC_OscConfig+0x474>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0f0      	beq.n	8008a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d106      	bne.n	8008a86 <HAL_RCC_OscConfig+0x2ea>
 8008a78:	4b64      	ldr	r3, [pc, #400]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a7c:	4a63      	ldr	r2, [pc, #396]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a84:	e01c      	b.n	8008ac0 <HAL_RCC_OscConfig+0x324>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	d10c      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x30c>
 8008a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a92:	4a5e      	ldr	r2, [pc, #376]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a94:	f043 0304 	orr.w	r3, r3, #4
 8008a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a9e:	4a5b      	ldr	r2, [pc, #364]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008aa0:	f043 0301 	orr.w	r3, r3, #1
 8008aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008aa6:	e00b      	b.n	8008ac0 <HAL_RCC_OscConfig+0x324>
 8008aa8:	4b58      	ldr	r3, [pc, #352]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aac:	4a57      	ldr	r2, [pc, #348]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008aae:	f023 0301 	bic.w	r3, r3, #1
 8008ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ab4:	4b55      	ldr	r3, [pc, #340]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ab8:	4a54      	ldr	r2, [pc, #336]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008aba:	f023 0304 	bic.w	r3, r3, #4
 8008abe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d015      	beq.n	8008af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac8:	f7ff f8a4 	bl	8007c14 <HAL_GetTick>
 8008acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ace:	e00a      	b.n	8008ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ad0:	f7ff f8a0 	bl	8007c14 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e0cb      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae6:	4b49      	ldr	r3, [pc, #292]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0ee      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x334>
 8008af2:	e014      	b.n	8008b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008af4:	f7ff f88e 	bl	8007c14 <HAL_GetTick>
 8008af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008afa:	e00a      	b.n	8008b12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008afc:	f7ff f88a 	bl	8007c14 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d901      	bls.n	8008b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e0b5      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b12:	4b3e      	ldr	r3, [pc, #248]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1ee      	bne.n	8008afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d105      	bne.n	8008b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b24:	4b39      	ldr	r3, [pc, #228]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b28:	4a38      	ldr	r2, [pc, #224]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80a1 	beq.w	8008c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b3a:	4b34      	ldr	r3, [pc, #208]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 030c 	and.w	r3, r3, #12
 8008b42:	2b08      	cmp	r3, #8
 8008b44:	d05c      	beq.n	8008c00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d141      	bne.n	8008bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4e:	4b31      	ldr	r3, [pc, #196]	@ (8008c14 <HAL_RCC_OscConfig+0x478>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b54:	f7ff f85e 	bl	8007c14 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5a:	e008      	b.n	8008b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b5c:	f7ff f85a 	bl	8007c14 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e087      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b6e:	4b27      	ldr	r3, [pc, #156]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f0      	bne.n	8008b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	69da      	ldr	r2, [r3, #28]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b88:	019b      	lsls	r3, r3, #6
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b90:	085b      	lsrs	r3, r3, #1
 8008b92:	3b01      	subs	r3, #1
 8008b94:	041b      	lsls	r3, r3, #16
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9c:	061b      	lsls	r3, r3, #24
 8008b9e:	491b      	ldr	r1, [pc, #108]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8008c14 <HAL_RCC_OscConfig+0x478>)
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008baa:	f7ff f833 	bl	8007c14 <HAL_GetTick>
 8008bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bb0:	e008      	b.n	8008bc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bb2:	f7ff f82f 	bl	8007c14 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d901      	bls.n	8008bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e05c      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bc4:	4b11      	ldr	r3, [pc, #68]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0f0      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x416>
 8008bd0:	e054      	b.n	8008c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd2:	4b10      	ldr	r3, [pc, #64]	@ (8008c14 <HAL_RCC_OscConfig+0x478>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bd8:	f7ff f81c 	bl	8007c14 <HAL_GetTick>
 8008bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be0:	f7ff f818 	bl	8007c14 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e045      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bf2:	4b06      	ldr	r3, [pc, #24]	@ (8008c0c <HAL_RCC_OscConfig+0x470>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f0      	bne.n	8008be0 <HAL_RCC_OscConfig+0x444>
 8008bfe:	e03d      	b.n	8008c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d107      	bne.n	8008c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e038      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	40007000 	.word	0x40007000
 8008c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c18:	4b1b      	ldr	r3, [pc, #108]	@ (8008c88 <HAL_RCC_OscConfig+0x4ec>)
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d028      	beq.n	8008c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d121      	bne.n	8008c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d11a      	bne.n	8008c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008c48:	4013      	ands	r3, r2
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d111      	bne.n	8008c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5e:	085b      	lsrs	r3, r3, #1
 8008c60:	3b01      	subs	r3, #1
 8008c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d107      	bne.n	8008c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d001      	beq.n	8008c7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e000      	b.n	8008c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	40023800 	.word	0x40023800

08008c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e0cc      	b.n	8008e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca0:	4b68      	ldr	r3, [pc, #416]	@ (8008e44 <HAL_RCC_ClockConfig+0x1b8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d90c      	bls.n	8008cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cae:	4b65      	ldr	r3, [pc, #404]	@ (8008e44 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cb6:	4b63      	ldr	r3, [pc, #396]	@ (8008e44 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d001      	beq.n	8008cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0b8      	b.n	8008e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d020      	beq.n	8008d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ce0:	4b59      	ldr	r3, [pc, #356]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	4a58      	ldr	r2, [pc, #352]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0308 	and.w	r3, r3, #8
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cf8:	4b53      	ldr	r3, [pc, #332]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	4a52      	ldr	r2, [pc, #328]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d04:	4b50      	ldr	r3, [pc, #320]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	494d      	ldr	r1, [pc, #308]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d044      	beq.n	8008dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d107      	bne.n	8008d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d2a:	4b47      	ldr	r3, [pc, #284]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d119      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e07f      	b.n	8008e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d003      	beq.n	8008d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d107      	bne.n	8008d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e06f      	b.n	8008e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e067      	b.n	8008e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d6a:	4b37      	ldr	r3, [pc, #220]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f023 0203 	bic.w	r2, r3, #3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	4934      	ldr	r1, [pc, #208]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d7c:	f7fe ff4a 	bl	8007c14 <HAL_GetTick>
 8008d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d82:	e00a      	b.n	8008d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d84:	f7fe ff46 	bl	8007c14 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e04f      	b.n	8008e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 020c 	and.w	r2, r3, #12
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d1eb      	bne.n	8008d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dac:	4b25      	ldr	r3, [pc, #148]	@ (8008e44 <HAL_RCC_ClockConfig+0x1b8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d20c      	bcs.n	8008dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dba:	4b22      	ldr	r3, [pc, #136]	@ (8008e44 <HAL_RCC_ClockConfig+0x1b8>)
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dc2:	4b20      	ldr	r3, [pc, #128]	@ (8008e44 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e032      	b.n	8008e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d008      	beq.n	8008df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008de0:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4916      	ldr	r1, [pc, #88]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dfe:	4b12      	ldr	r3, [pc, #72]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	490e      	ldr	r1, [pc, #56]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e12:	f000 f821 	bl	8008e58 <HAL_RCC_GetSysClockFreq>
 8008e16:	4602      	mov	r2, r0
 8008e18:	4b0b      	ldr	r3, [pc, #44]	@ (8008e48 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	091b      	lsrs	r3, r3, #4
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	490a      	ldr	r1, [pc, #40]	@ (8008e4c <HAL_RCC_ClockConfig+0x1c0>)
 8008e24:	5ccb      	ldrb	r3, [r1, r3]
 8008e26:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2a:	4a09      	ldr	r2, [pc, #36]	@ (8008e50 <HAL_RCC_ClockConfig+0x1c4>)
 8008e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e2e:	4b09      	ldr	r3, [pc, #36]	@ (8008e54 <HAL_RCC_ClockConfig+0x1c8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe feaa 	bl	8007b8c <HAL_InitTick>

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	40023c00 	.word	0x40023c00
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	0800b6a0 	.word	0x0800b6a0
 8008e50:	20000000 	.word	0x20000000
 8008e54:	20000004 	.word	0x20000004

08008e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e5c:	b090      	sub	sp, #64	@ 0x40
 8008e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e64:	2300      	movs	r3, #0
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e68:	2300      	movs	r3, #0
 8008e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e70:	4b59      	ldr	r3, [pc, #356]	@ (8008fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f003 030c 	and.w	r3, r3, #12
 8008e78:	2b08      	cmp	r3, #8
 8008e7a:	d00d      	beq.n	8008e98 <HAL_RCC_GetSysClockFreq+0x40>
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	f200 80a1 	bhi.w	8008fc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <HAL_RCC_GetSysClockFreq+0x34>
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d003      	beq.n	8008e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e8a:	e09b      	b.n	8008fc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e8c:	4b53      	ldr	r3, [pc, #332]	@ (8008fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8008e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008e90:	e09b      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e92:	4b53      	ldr	r3, [pc, #332]	@ (8008fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e96:	e098      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e98:	4b4f      	ldr	r3, [pc, #316]	@ (8008fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ea0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8008fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d028      	beq.n	8008f00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eae:	4b4a      	ldr	r3, [pc, #296]	@ (8008fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	099b      	lsrs	r3, r3, #6
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	623b      	str	r3, [r7, #32]
 8008eb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4b47      	ldr	r3, [pc, #284]	@ (8008fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ec4:	fb03 f201 	mul.w	r2, r3, r1
 8008ec8:	2300      	movs	r3, #0
 8008eca:	fb00 f303 	mul.w	r3, r0, r3
 8008ece:	4413      	add	r3, r2
 8008ed0:	4a43      	ldr	r2, [pc, #268]	@ (8008fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ed2:	fba0 1202 	umull	r1, r2, r0, r2
 8008ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ed8:	460a      	mov	r2, r1
 8008eda:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ede:	4413      	add	r3, r2
 8008ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	61fa      	str	r2, [r7, #28]
 8008eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ef2:	f7f7 f9cd 	bl	8000290 <__aeabi_uldivmod>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4613      	mov	r3, r2
 8008efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008efe:	e053      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f00:	4b35      	ldr	r3, [pc, #212]	@ (8008fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	099b      	lsrs	r3, r3, #6
 8008f06:	2200      	movs	r2, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	617a      	str	r2, [r7, #20]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008f12:	f04f 0b00 	mov.w	fp, #0
 8008f16:	4652      	mov	r2, sl
 8008f18:	465b      	mov	r3, fp
 8008f1a:	f04f 0000 	mov.w	r0, #0
 8008f1e:	f04f 0100 	mov.w	r1, #0
 8008f22:	0159      	lsls	r1, r3, #5
 8008f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f28:	0150      	lsls	r0, r2, #5
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	ebb2 080a 	subs.w	r8, r2, sl
 8008f32:	eb63 090b 	sbc.w	r9, r3, fp
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008f42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008f46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008f4a:	ebb2 0408 	subs.w	r4, r2, r8
 8008f4e:	eb63 0509 	sbc.w	r5, r3, r9
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	00eb      	lsls	r3, r5, #3
 8008f5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f60:	00e2      	lsls	r2, r4, #3
 8008f62:	4614      	mov	r4, r2
 8008f64:	461d      	mov	r5, r3
 8008f66:	eb14 030a 	adds.w	r3, r4, sl
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	eb45 030b 	adc.w	r3, r5, fp
 8008f70:	607b      	str	r3, [r7, #4]
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f7e:	4629      	mov	r1, r5
 8008f80:	028b      	lsls	r3, r1, #10
 8008f82:	4621      	mov	r1, r4
 8008f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f88:	4621      	mov	r1, r4
 8008f8a:	028a      	lsls	r2, r1, #10
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f92:	2200      	movs	r2, #0
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	60fa      	str	r2, [r7, #12]
 8008f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f9c:	f7f7 f978 	bl	8000290 <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	0c1b      	lsrs	r3, r3, #16
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008fb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008fc2:	e002      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8008fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3740      	adds	r7, #64	@ 0x40
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40023800 	.word	0x40023800
 8008fdc:	00f42400 	.word	0x00f42400
 8008fe0:	017d7840 	.word	0x017d7840

08008fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e07b      	b.n	80090ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d108      	bne.n	8009010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009006:	d009      	beq.n	800901c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	61da      	str	r2, [r3, #28]
 800900e:	e005      	b.n	800901c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7fe fbca 	bl	80077d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009064:	431a      	orrs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090a0:	ea42 0103 	orr.w	r1, r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	0c1b      	lsrs	r3, r3, #16
 80090ba:	f003 0104 	and.w	r1, r3, #4
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c2:	f003 0210 	and.w	r2, r3, #16
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b088      	sub	sp, #32
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	4613      	mov	r3, r2
 8009104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_SPI_Transmit+0x22>
 8009114:	2302      	movs	r3, #2
 8009116:	e12d      	b.n	8009374 <HAL_SPI_Transmit+0x27e>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009120:	f7fe fd78 	bl	8007c14 <HAL_GetTick>
 8009124:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b01      	cmp	r3, #1
 8009134:	d002      	beq.n	800913c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009136:	2302      	movs	r3, #2
 8009138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800913a:	e116      	b.n	800936a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_SPI_Transmit+0x52>
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d102      	bne.n	800914e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800914c:	e10d      	b.n	800936a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2203      	movs	r2, #3
 8009152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	88fa      	ldrh	r2, [r7, #6]
 800916c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009194:	d10f      	bne.n	80091b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c0:	2b40      	cmp	r3, #64	@ 0x40
 80091c2:	d007      	beq.n	80091d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091dc:	d14f      	bne.n	800927e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <HAL_SPI_Transmit+0xf6>
 80091e6:	8afb      	ldrh	r3, [r7, #22]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d142      	bne.n	8009272 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f0:	881a      	ldrh	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fc:	1c9a      	adds	r2, r3, #2
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009210:	e02f      	b.n	8009272 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b02      	cmp	r3, #2
 800921e:	d112      	bne.n	8009246 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009224:	881a      	ldrh	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009230:	1c9a      	adds	r2, r3, #2
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009244:	e015      	b.n	8009272 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009246:	f7fe fce5 	bl	8007c14 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	429a      	cmp	r2, r3
 8009254:	d803      	bhi.n	800925e <HAL_SPI_Transmit+0x168>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925c:	d102      	bne.n	8009264 <HAL_SPI_Transmit+0x16e>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d106      	bne.n	8009272 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009270:	e07b      	b.n	800936a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009276:	b29b      	uxth	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1ca      	bne.n	8009212 <HAL_SPI_Transmit+0x11c>
 800927c:	e050      	b.n	8009320 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <HAL_SPI_Transmit+0x196>
 8009286:	8afb      	ldrh	r3, [r7, #22]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d144      	bne.n	8009316 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	7812      	ldrb	r2, [r2, #0]
 8009298:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80092b2:	e030      	b.n	8009316 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d113      	bne.n	80092ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	7812      	ldrb	r2, [r2, #0]
 80092ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80092e8:	e015      	b.n	8009316 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092ea:	f7fe fc93 	bl	8007c14 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d803      	bhi.n	8009302 <HAL_SPI_Transmit+0x20c>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009300:	d102      	bne.n	8009308 <HAL_SPI_Transmit+0x212>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d106      	bne.n	8009316 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009314:	e029      	b.n	800936a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800931a:	b29b      	uxth	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1c9      	bne.n	80092b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fbdf 	bl	8009ae8 <SPI_EndRxTxTransaction>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2220      	movs	r2, #32
 8009334:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	77fb      	strb	r3, [r7, #31]
 8009360:	e003      	b.n	800936a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009372:	7ffb      	ldrb	r3, [r7, #31]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	4613      	mov	r3, r2
 800938a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b01      	cmp	r3, #1
 800939a:	d002      	beq.n	80093a2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800939c:	2302      	movs	r3, #2
 800939e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093a0:	e0fb      	b.n	800959a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093aa:	d112      	bne.n	80093d2 <HAL_SPI_Receive+0x56>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10e      	bne.n	80093d2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2204      	movs	r2, #4
 80093b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80093bc:	88fa      	ldrh	r2, [r7, #6]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	4613      	mov	r3, r2
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 f8ef 	bl	80095ac <HAL_SPI_TransmitReceive>
 80093ce:	4603      	mov	r3, r0
 80093d0:	e0e8      	b.n	80095a4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_SPI_Receive+0x64>
 80093dc:	2302      	movs	r3, #2
 80093de:	e0e1      	b.n	80095a4 <HAL_SPI_Receive+0x228>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093e8:	f7fe fc14 	bl	8007c14 <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <HAL_SPI_Receive+0x7e>
 80093f4:	88fb      	ldrh	r3, [r7, #6]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093fe:	e0cc      	b.n	800959a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2204      	movs	r2, #4
 8009404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	88fa      	ldrh	r2, [r7, #6]
 8009418:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	88fa      	ldrh	r2, [r7, #6]
 800941e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009446:	d10f      	bne.n	8009468 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009456:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009466:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009472:	2b40      	cmp	r3, #64	@ 0x40
 8009474:	d007      	beq.n	8009486 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009484:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d16a      	bne.n	8009564 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800948e:	e032      	b.n	80094f6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b01      	cmp	r3, #1
 800949c:	d115      	bne.n	80094ca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f103 020c 	add.w	r2, r3, #12
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094aa:	7812      	ldrb	r2, [r2, #0]
 80094ac:	b2d2      	uxtb	r2, r2
 80094ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094c8:	e015      	b.n	80094f6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ca:	f7fe fba3 	bl	8007c14 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d803      	bhi.n	80094e2 <HAL_SPI_Receive+0x166>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d102      	bne.n	80094e8 <HAL_SPI_Receive+0x16c>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80094f4:	e051      	b.n	800959a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1c7      	bne.n	8009490 <HAL_SPI_Receive+0x114>
 8009500:	e035      	b.n	800956e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b01      	cmp	r3, #1
 800950e:	d113      	bne.n	8009538 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951a:	b292      	uxth	r2, r2
 800951c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009522:	1c9a      	adds	r2, r3, #2
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800952c:	b29b      	uxth	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009536:	e015      	b.n	8009564 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009538:	f7fe fb6c 	bl	8007c14 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	429a      	cmp	r2, r3
 8009546:	d803      	bhi.n	8009550 <HAL_SPI_Receive+0x1d4>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954e:	d102      	bne.n	8009556 <HAL_SPI_Receive+0x1da>
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009562:	e01a      	b.n	800959a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1c9      	bne.n	8009502 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 fa52 	bl	8009a1c <SPI_EndRxTransaction>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2220      	movs	r2, #32
 8009582:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	75fb      	strb	r3, [r7, #23]
 8009590:	e003      	b.n	800959a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08c      	sub	sp, #48	@ 0x30
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095ba:	2301      	movs	r3, #1
 80095bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d101      	bne.n	80095d2 <HAL_SPI_TransmitReceive+0x26>
 80095ce:	2302      	movs	r3, #2
 80095d0:	e198      	b.n	8009904 <HAL_SPI_TransmitReceive+0x358>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095da:	f7fe fb1b 	bl	8007c14 <HAL_GetTick>
 80095de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80095e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095f0:	887b      	ldrh	r3, [r7, #2]
 80095f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d00f      	beq.n	800961c <HAL_SPI_TransmitReceive+0x70>
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009602:	d107      	bne.n	8009614 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d103      	bne.n	8009614 <HAL_SPI_TransmitReceive+0x68>
 800960c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009610:	2b04      	cmp	r3, #4
 8009612:	d003      	beq.n	800961c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009614:	2302      	movs	r3, #2
 8009616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800961a:	e16d      	b.n	80098f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_SPI_TransmitReceive+0x82>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <HAL_SPI_TransmitReceive+0x82>
 8009628:	887b      	ldrh	r3, [r7, #2]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009634:	e160      	b.n	80098f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b04      	cmp	r3, #4
 8009640:	d003      	beq.n	800964a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2205      	movs	r2, #5
 8009646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	887a      	ldrh	r2, [r7, #2]
 800965a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	887a      	ldrh	r2, [r7, #2]
 8009660:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	887a      	ldrh	r2, [r7, #2]
 800966c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	887a      	ldrh	r2, [r7, #2]
 8009672:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968a:	2b40      	cmp	r3, #64	@ 0x40
 800968c:	d007      	beq.n	800969e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800969c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096a6:	d17c      	bne.n	80097a2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <HAL_SPI_TransmitReceive+0x10a>
 80096b0:	8b7b      	ldrh	r3, [r7, #26]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d16a      	bne.n	800978c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ba:	881a      	ldrh	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c6:	1c9a      	adds	r2, r3, #2
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096da:	e057      	b.n	800978c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d11b      	bne.n	8009722 <HAL_SPI_TransmitReceive+0x176>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d016      	beq.n	8009722 <HAL_SPI_TransmitReceive+0x176>
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d113      	bne.n	8009722 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fe:	881a      	ldrh	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800970a:	1c9a      	adds	r2, r3, #2
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b01      	cmp	r3, #1
 800972e:	d119      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x1b8>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009734:	b29b      	uxth	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d014      	beq.n	8009764 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009744:	b292      	uxth	r2, r2
 8009746:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	1c9a      	adds	r2, r3, #2
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b29a      	uxth	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009760:	2301      	movs	r3, #1
 8009762:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009764:	f7fe fa56 	bl	8007c14 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009770:	429a      	cmp	r2, r3
 8009772:	d80b      	bhi.n	800978c <HAL_SPI_TransmitReceive+0x1e0>
 8009774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d007      	beq.n	800978c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800978a:	e0b5      	b.n	80098f8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009790:	b29b      	uxth	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1a2      	bne.n	80096dc <HAL_SPI_TransmitReceive+0x130>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800979a:	b29b      	uxth	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d19d      	bne.n	80096dc <HAL_SPI_TransmitReceive+0x130>
 80097a0:	e080      	b.n	80098a4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <HAL_SPI_TransmitReceive+0x204>
 80097aa:	8b7b      	ldrh	r3, [r7, #26]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d16f      	bne.n	8009890 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	7812      	ldrb	r2, [r2, #0]
 80097bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097d6:	e05b      	b.n	8009890 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d11c      	bne.n	8009820 <HAL_SPI_TransmitReceive+0x274>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d017      	beq.n	8009820 <HAL_SPI_TransmitReceive+0x274>
 80097f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d114      	bne.n	8009820 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	330c      	adds	r3, #12
 8009800:	7812      	ldrb	r2, [r2, #0]
 8009802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b01      	cmp	r3, #1
 800982c:	d119      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x2b6>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009832:	b29b      	uxth	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	d014      	beq.n	8009862 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800985e:	2301      	movs	r3, #1
 8009860:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009862:	f7fe f9d7 	bl	8007c14 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800986e:	429a      	cmp	r2, r3
 8009870:	d803      	bhi.n	800987a <HAL_SPI_TransmitReceive+0x2ce>
 8009872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d102      	bne.n	8009880 <HAL_SPI_TransmitReceive+0x2d4>
 800987a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987c:	2b00      	cmp	r3, #0
 800987e:	d107      	bne.n	8009890 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800988e:	e033      	b.n	80098f8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009894:	b29b      	uxth	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d19e      	bne.n	80097d8 <HAL_SPI_TransmitReceive+0x22c>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800989e:	b29b      	uxth	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d199      	bne.n	80097d8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f91d 	bl	8009ae8 <SPI_EndRxTxTransaction>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d006      	beq.n	80098c2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2220      	movs	r2, #32
 80098be:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80098c0:	e01a      	b.n	80098f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098ca:	2300      	movs	r3, #0
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ee:	e003      	b.n	80098f8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009900:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009904:	4618      	mov	r0, r3
 8009906:	3730      	adds	r7, #48	@ 0x30
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	4613      	mov	r3, r2
 800991a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800991c:	f7fe f97a 	bl	8007c14 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	1a9b      	subs	r3, r3, r2
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4413      	add	r3, r2
 800992a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800992c:	f7fe f972 	bl	8007c14 <HAL_GetTick>
 8009930:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009932:	4b39      	ldr	r3, [pc, #228]	@ (8009a18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	015b      	lsls	r3, r3, #5
 8009938:	0d1b      	lsrs	r3, r3, #20
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	fb02 f303 	mul.w	r3, r2, r3
 8009940:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009942:	e054      	b.n	80099ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d050      	beq.n	80099ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800994c:	f7fe f962 	bl	8007c14 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	429a      	cmp	r2, r3
 800995a:	d902      	bls.n	8009962 <SPI_WaitFlagStateUntilTimeout+0x56>
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d13d      	bne.n	80099de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800997a:	d111      	bne.n	80099a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009984:	d004      	beq.n	8009990 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800998e:	d107      	bne.n	80099a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800999e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a8:	d10f      	bne.n	80099ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e017      	b.n	8009a0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4013      	ands	r3, r2
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	bf0c      	ite	eq
 80099fe:	2301      	moveq	r3, #1
 8009a00:	2300      	movne	r3, #0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d19b      	bne.n	8009944 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3720      	adds	r7, #32
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000000 	.word	0x20000000

08009a1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a30:	d111      	bne.n	8009a56 <SPI_EndRxTransaction+0x3a>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a3a:	d004      	beq.n	8009a46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a44:	d107      	bne.n	8009a56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a5e:	d12a      	bne.n	8009ab6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a68:	d012      	beq.n	8009a90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2200      	movs	r2, #0
 8009a72:	2180      	movs	r1, #128	@ 0x80
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7ff ff49 	bl	800990c <SPI_WaitFlagStateUntilTimeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d02d      	beq.n	8009adc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a84:	f043 0220 	orr.w	r2, r3, #32
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e026      	b.n	8009ade <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2200      	movs	r2, #0
 8009a98:	2101      	movs	r1, #1
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff ff36 	bl	800990c <SPI_WaitFlagStateUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01a      	beq.n	8009adc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aaa:	f043 0220 	orr.w	r2, r3, #32
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e013      	b.n	8009ade <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2200      	movs	r2, #0
 8009abe:	2101      	movs	r1, #1
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff ff23 	bl	800990c <SPI_WaitFlagStateUntilTimeout>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad0:	f043 0220 	orr.w	r2, r3, #32
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e000      	b.n	8009ade <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2201      	movs	r2, #1
 8009afc:	2102      	movs	r1, #2
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff ff04 	bl	800990c <SPI_WaitFlagStateUntilTimeout>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d007      	beq.n	8009b1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b0e:	f043 0220 	orr.w	r2, r3, #32
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e032      	b.n	8009b80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009b88 <SPI_EndRxTxTransaction+0xa0>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8009b8c <SPI_EndRxTxTransaction+0xa4>)
 8009b20:	fba2 2303 	umull	r2, r3, r2, r3
 8009b24:	0d5b      	lsrs	r3, r3, #21
 8009b26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b2a:	fb02 f303 	mul.w	r3, r2, r3
 8009b2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b38:	d112      	bne.n	8009b60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2200      	movs	r2, #0
 8009b42:	2180      	movs	r1, #128	@ 0x80
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f7ff fee1 	bl	800990c <SPI_WaitFlagStateUntilTimeout>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d016      	beq.n	8009b7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b54:	f043 0220 	orr.w	r2, r3, #32
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e00f      	b.n	8009b80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b76:	2b80      	cmp	r3, #128	@ 0x80
 8009b78:	d0f2      	beq.n	8009b60 <SPI_EndRxTxTransaction+0x78>
 8009b7a:	e000      	b.n	8009b7e <SPI_EndRxTxTransaction+0x96>
        break;
 8009b7c:	bf00      	nop
  }

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000000 	.word	0x20000000
 8009b8c:	165e9f81 	.word	0x165e9f81

08009b90 <__assert_func>:
 8009b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b92:	4614      	mov	r4, r2
 8009b94:	461a      	mov	r2, r3
 8009b96:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <__assert_func+0x2c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	68d8      	ldr	r0, [r3, #12]
 8009b9e:	b954      	cbnz	r4, 8009bb6 <__assert_func+0x26>
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <__assert_func+0x30>)
 8009ba2:	461c      	mov	r4, r3
 8009ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ba8:	9100      	str	r1, [sp, #0]
 8009baa:	462b      	mov	r3, r5
 8009bac:	4905      	ldr	r1, [pc, #20]	@ (8009bc4 <__assert_func+0x34>)
 8009bae:	f000 f96f 	bl	8009e90 <fiprintf>
 8009bb2:	f000 faca 	bl	800a14a <abort>
 8009bb6:	4b04      	ldr	r3, [pc, #16]	@ (8009bc8 <__assert_func+0x38>)
 8009bb8:	e7f4      	b.n	8009ba4 <__assert_func+0x14>
 8009bba:	bf00      	nop
 8009bbc:	20000018 	.word	0x20000018
 8009bc0:	0800b6eb 	.word	0x0800b6eb
 8009bc4:	0800b6bd 	.word	0x0800b6bd
 8009bc8:	0800b6b0 	.word	0x0800b6b0

08009bcc <malloc>:
 8009bcc:	4b02      	ldr	r3, [pc, #8]	@ (8009bd8 <malloc+0xc>)
 8009bce:	4601      	mov	r1, r0
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f000 b82d 	b.w	8009c30 <_malloc_r>
 8009bd6:	bf00      	nop
 8009bd8:	20000018 	.word	0x20000018

08009bdc <free>:
 8009bdc:	4b02      	ldr	r3, [pc, #8]	@ (8009be8 <free+0xc>)
 8009bde:	4601      	mov	r1, r0
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	f000 bab9 	b.w	800a158 <_free_r>
 8009be6:	bf00      	nop
 8009be8:	20000018 	.word	0x20000018

08009bec <sbrk_aligned>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	4e0f      	ldr	r6, [pc, #60]	@ (8009c2c <sbrk_aligned+0x40>)
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	6831      	ldr	r1, [r6, #0]
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	b911      	cbnz	r1, 8009bfe <sbrk_aligned+0x12>
 8009bf8:	f000 fa4a 	bl	800a090 <_sbrk_r>
 8009bfc:	6030      	str	r0, [r6, #0]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	f000 fa45 	bl	800a090 <_sbrk_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d103      	bne.n	8009c12 <sbrk_aligned+0x26>
 8009c0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c0e:	4620      	mov	r0, r4
 8009c10:	bd70      	pop	{r4, r5, r6, pc}
 8009c12:	1cc4      	adds	r4, r0, #3
 8009c14:	f024 0403 	bic.w	r4, r4, #3
 8009c18:	42a0      	cmp	r0, r4
 8009c1a:	d0f8      	beq.n	8009c0e <sbrk_aligned+0x22>
 8009c1c:	1a21      	subs	r1, r4, r0
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f000 fa36 	bl	800a090 <_sbrk_r>
 8009c24:	3001      	adds	r0, #1
 8009c26:	d1f2      	bne.n	8009c0e <sbrk_aligned+0x22>
 8009c28:	e7ef      	b.n	8009c0a <sbrk_aligned+0x1e>
 8009c2a:	bf00      	nop
 8009c2c:	2000024c 	.word	0x2000024c

08009c30 <_malloc_r>:
 8009c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	1ccd      	adds	r5, r1, #3
 8009c36:	f025 0503 	bic.w	r5, r5, #3
 8009c3a:	3508      	adds	r5, #8
 8009c3c:	2d0c      	cmp	r5, #12
 8009c3e:	bf38      	it	cc
 8009c40:	250c      	movcc	r5, #12
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	4606      	mov	r6, r0
 8009c46:	db01      	blt.n	8009c4c <_malloc_r+0x1c>
 8009c48:	42a9      	cmp	r1, r5
 8009c4a:	d904      	bls.n	8009c56 <_malloc_r+0x26>
 8009c4c:	230c      	movs	r3, #12
 8009c4e:	6033      	str	r3, [r6, #0]
 8009c50:	2000      	movs	r0, #0
 8009c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d2c <_malloc_r+0xfc>
 8009c5a:	f000 f869 	bl	8009d30 <__malloc_lock>
 8009c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c62:	461c      	mov	r4, r3
 8009c64:	bb44      	cbnz	r4, 8009cb8 <_malloc_r+0x88>
 8009c66:	4629      	mov	r1, r5
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff ffbf 	bl	8009bec <sbrk_aligned>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	4604      	mov	r4, r0
 8009c72:	d158      	bne.n	8009d26 <_malloc_r+0xf6>
 8009c74:	f8d8 4000 	ldr.w	r4, [r8]
 8009c78:	4627      	mov	r7, r4
 8009c7a:	2f00      	cmp	r7, #0
 8009c7c:	d143      	bne.n	8009d06 <_malloc_r+0xd6>
 8009c7e:	2c00      	cmp	r4, #0
 8009c80:	d04b      	beq.n	8009d1a <_malloc_r+0xea>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	4639      	mov	r1, r7
 8009c86:	4630      	mov	r0, r6
 8009c88:	eb04 0903 	add.w	r9, r4, r3
 8009c8c:	f000 fa00 	bl	800a090 <_sbrk_r>
 8009c90:	4581      	cmp	r9, r0
 8009c92:	d142      	bne.n	8009d1a <_malloc_r+0xea>
 8009c94:	6821      	ldr	r1, [r4, #0]
 8009c96:	1a6d      	subs	r5, r5, r1
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7ff ffa6 	bl	8009bec <sbrk_aligned>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d03a      	beq.n	8009d1a <_malloc_r+0xea>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	442b      	add	r3, r5
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	f8d8 3000 	ldr.w	r3, [r8]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	bb62      	cbnz	r2, 8009d0c <_malloc_r+0xdc>
 8009cb2:	f8c8 7000 	str.w	r7, [r8]
 8009cb6:	e00f      	b.n	8009cd8 <_malloc_r+0xa8>
 8009cb8:	6822      	ldr	r2, [r4, #0]
 8009cba:	1b52      	subs	r2, r2, r5
 8009cbc:	d420      	bmi.n	8009d00 <_malloc_r+0xd0>
 8009cbe:	2a0b      	cmp	r2, #11
 8009cc0:	d917      	bls.n	8009cf2 <_malloc_r+0xc2>
 8009cc2:	1961      	adds	r1, r4, r5
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	6025      	str	r5, [r4, #0]
 8009cc8:	bf18      	it	ne
 8009cca:	6059      	strne	r1, [r3, #4]
 8009ccc:	6863      	ldr	r3, [r4, #4]
 8009cce:	bf08      	it	eq
 8009cd0:	f8c8 1000 	streq.w	r1, [r8]
 8009cd4:	5162      	str	r2, [r4, r5]
 8009cd6:	604b      	str	r3, [r1, #4]
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f82f 	bl	8009d3c <__malloc_unlock>
 8009cde:	f104 000b 	add.w	r0, r4, #11
 8009ce2:	1d23      	adds	r3, r4, #4
 8009ce4:	f020 0007 	bic.w	r0, r0, #7
 8009ce8:	1ac2      	subs	r2, r0, r3
 8009cea:	bf1c      	itt	ne
 8009cec:	1a1b      	subne	r3, r3, r0
 8009cee:	50a3      	strne	r3, [r4, r2]
 8009cf0:	e7af      	b.n	8009c52 <_malloc_r+0x22>
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	bf0c      	ite	eq
 8009cf8:	f8c8 2000 	streq.w	r2, [r8]
 8009cfc:	605a      	strne	r2, [r3, #4]
 8009cfe:	e7eb      	b.n	8009cd8 <_malloc_r+0xa8>
 8009d00:	4623      	mov	r3, r4
 8009d02:	6864      	ldr	r4, [r4, #4]
 8009d04:	e7ae      	b.n	8009c64 <_malloc_r+0x34>
 8009d06:	463c      	mov	r4, r7
 8009d08:	687f      	ldr	r7, [r7, #4]
 8009d0a:	e7b6      	b.n	8009c7a <_malloc_r+0x4a>
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	d1fb      	bne.n	8009d0c <_malloc_r+0xdc>
 8009d14:	2300      	movs	r3, #0
 8009d16:	6053      	str	r3, [r2, #4]
 8009d18:	e7de      	b.n	8009cd8 <_malloc_r+0xa8>
 8009d1a:	230c      	movs	r3, #12
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 f80c 	bl	8009d3c <__malloc_unlock>
 8009d24:	e794      	b.n	8009c50 <_malloc_r+0x20>
 8009d26:	6005      	str	r5, [r0, #0]
 8009d28:	e7d6      	b.n	8009cd8 <_malloc_r+0xa8>
 8009d2a:	bf00      	nop
 8009d2c:	20000250 	.word	0x20000250

08009d30 <__malloc_lock>:
 8009d30:	4801      	ldr	r0, [pc, #4]	@ (8009d38 <__malloc_lock+0x8>)
 8009d32:	f000 b9fa 	b.w	800a12a <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	20000394 	.word	0x20000394

08009d3c <__malloc_unlock>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	@ (8009d44 <__malloc_unlock+0x8>)
 8009d3e:	f000 b9f5 	b.w	800a12c <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	20000394 	.word	0x20000394

08009d48 <std>:
 8009d48:	2300      	movs	r3, #0
 8009d4a:	b510      	push	{r4, lr}
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d56:	6083      	str	r3, [r0, #8]
 8009d58:	8181      	strh	r1, [r0, #12]
 8009d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d5c:	81c2      	strh	r2, [r0, #14]
 8009d5e:	6183      	str	r3, [r0, #24]
 8009d60:	4619      	mov	r1, r3
 8009d62:	2208      	movs	r2, #8
 8009d64:	305c      	adds	r0, #92	@ 0x5c
 8009d66:	f000 f928 	bl	8009fba <memset>
 8009d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009da0 <std+0x58>)
 8009d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009da4 <std+0x5c>)
 8009d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d72:	4b0d      	ldr	r3, [pc, #52]	@ (8009da8 <std+0x60>)
 8009d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d76:	4b0d      	ldr	r3, [pc, #52]	@ (8009dac <std+0x64>)
 8009d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009db0 <std+0x68>)
 8009d7c:	6224      	str	r4, [r4, #32]
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	d006      	beq.n	8009d90 <std+0x48>
 8009d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d86:	4294      	cmp	r4, r2
 8009d88:	d002      	beq.n	8009d90 <std+0x48>
 8009d8a:	33d0      	adds	r3, #208	@ 0xd0
 8009d8c:	429c      	cmp	r4, r3
 8009d8e:	d105      	bne.n	8009d9c <std+0x54>
 8009d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d98:	f000 b9c6 	b.w	800a128 <__retarget_lock_init_recursive>
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	bf00      	nop
 8009da0:	08009f15 	.word	0x08009f15
 8009da4:	08009f37 	.word	0x08009f37
 8009da8:	08009f6f 	.word	0x08009f6f
 8009dac:	08009f93 	.word	0x08009f93
 8009db0:	20000254 	.word	0x20000254

08009db4 <stdio_exit_handler>:
 8009db4:	4a02      	ldr	r2, [pc, #8]	@ (8009dc0 <stdio_exit_handler+0xc>)
 8009db6:	4903      	ldr	r1, [pc, #12]	@ (8009dc4 <stdio_exit_handler+0x10>)
 8009db8:	4803      	ldr	r0, [pc, #12]	@ (8009dc8 <stdio_exit_handler+0x14>)
 8009dba:	f000 b87b 	b.w	8009eb4 <_fwalk_sglue>
 8009dbe:	bf00      	nop
 8009dc0:	2000000c 	.word	0x2000000c
 8009dc4:	0800a895 	.word	0x0800a895
 8009dc8:	2000001c 	.word	0x2000001c

08009dcc <cleanup_stdio>:
 8009dcc:	6841      	ldr	r1, [r0, #4]
 8009dce:	4b0c      	ldr	r3, [pc, #48]	@ (8009e00 <cleanup_stdio+0x34>)
 8009dd0:	4299      	cmp	r1, r3
 8009dd2:	b510      	push	{r4, lr}
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	d001      	beq.n	8009ddc <cleanup_stdio+0x10>
 8009dd8:	f000 fd5c 	bl	800a894 <_fflush_r>
 8009ddc:	68a1      	ldr	r1, [r4, #8]
 8009dde:	4b09      	ldr	r3, [pc, #36]	@ (8009e04 <cleanup_stdio+0x38>)
 8009de0:	4299      	cmp	r1, r3
 8009de2:	d002      	beq.n	8009dea <cleanup_stdio+0x1e>
 8009de4:	4620      	mov	r0, r4
 8009de6:	f000 fd55 	bl	800a894 <_fflush_r>
 8009dea:	68e1      	ldr	r1, [r4, #12]
 8009dec:	4b06      	ldr	r3, [pc, #24]	@ (8009e08 <cleanup_stdio+0x3c>)
 8009dee:	4299      	cmp	r1, r3
 8009df0:	d004      	beq.n	8009dfc <cleanup_stdio+0x30>
 8009df2:	4620      	mov	r0, r4
 8009df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009df8:	f000 bd4c 	b.w	800a894 <_fflush_r>
 8009dfc:	bd10      	pop	{r4, pc}
 8009dfe:	bf00      	nop
 8009e00:	20000254 	.word	0x20000254
 8009e04:	200002bc 	.word	0x200002bc
 8009e08:	20000324 	.word	0x20000324

08009e0c <global_stdio_init.part.0>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e3c <global_stdio_init.part.0+0x30>)
 8009e10:	4c0b      	ldr	r4, [pc, #44]	@ (8009e40 <global_stdio_init.part.0+0x34>)
 8009e12:	4a0c      	ldr	r2, [pc, #48]	@ (8009e44 <global_stdio_init.part.0+0x38>)
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	4620      	mov	r0, r4
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2104      	movs	r1, #4
 8009e1c:	f7ff ff94 	bl	8009d48 <std>
 8009e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e24:	2201      	movs	r2, #1
 8009e26:	2109      	movs	r1, #9
 8009e28:	f7ff ff8e 	bl	8009d48 <std>
 8009e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e30:	2202      	movs	r2, #2
 8009e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e36:	2112      	movs	r1, #18
 8009e38:	f7ff bf86 	b.w	8009d48 <std>
 8009e3c:	2000038c 	.word	0x2000038c
 8009e40:	20000254 	.word	0x20000254
 8009e44:	08009db5 	.word	0x08009db5

08009e48 <__sfp_lock_acquire>:
 8009e48:	4801      	ldr	r0, [pc, #4]	@ (8009e50 <__sfp_lock_acquire+0x8>)
 8009e4a:	f000 b96e 	b.w	800a12a <__retarget_lock_acquire_recursive>
 8009e4e:	bf00      	nop
 8009e50:	20000395 	.word	0x20000395

08009e54 <__sfp_lock_release>:
 8009e54:	4801      	ldr	r0, [pc, #4]	@ (8009e5c <__sfp_lock_release+0x8>)
 8009e56:	f000 b969 	b.w	800a12c <__retarget_lock_release_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20000395 	.word	0x20000395

08009e60 <__sinit>:
 8009e60:	b510      	push	{r4, lr}
 8009e62:	4604      	mov	r4, r0
 8009e64:	f7ff fff0 	bl	8009e48 <__sfp_lock_acquire>
 8009e68:	6a23      	ldr	r3, [r4, #32]
 8009e6a:	b11b      	cbz	r3, 8009e74 <__sinit+0x14>
 8009e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e70:	f7ff bff0 	b.w	8009e54 <__sfp_lock_release>
 8009e74:	4b04      	ldr	r3, [pc, #16]	@ (8009e88 <__sinit+0x28>)
 8009e76:	6223      	str	r3, [r4, #32]
 8009e78:	4b04      	ldr	r3, [pc, #16]	@ (8009e8c <__sinit+0x2c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1f5      	bne.n	8009e6c <__sinit+0xc>
 8009e80:	f7ff ffc4 	bl	8009e0c <global_stdio_init.part.0>
 8009e84:	e7f2      	b.n	8009e6c <__sinit+0xc>
 8009e86:	bf00      	nop
 8009e88:	08009dcd 	.word	0x08009dcd
 8009e8c:	2000038c 	.word	0x2000038c

08009e90 <fiprintf>:
 8009e90:	b40e      	push	{r1, r2, r3}
 8009e92:	b503      	push	{r0, r1, lr}
 8009e94:	4601      	mov	r1, r0
 8009e96:	ab03      	add	r3, sp, #12
 8009e98:	4805      	ldr	r0, [pc, #20]	@ (8009eb0 <fiprintf+0x20>)
 8009e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9e:	6800      	ldr	r0, [r0, #0]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	f000 f9cd 	bl	800a240 <_vfiprintf_r>
 8009ea6:	b002      	add	sp, #8
 8009ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eac:	b003      	add	sp, #12
 8009eae:	4770      	bx	lr
 8009eb0:	20000018 	.word	0x20000018

08009eb4 <_fwalk_sglue>:
 8009eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	4607      	mov	r7, r0
 8009eba:	4688      	mov	r8, r1
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ec8:	d505      	bpl.n	8009ed6 <_fwalk_sglue+0x22>
 8009eca:	6824      	ldr	r4, [r4, #0]
 8009ecc:	2c00      	cmp	r4, #0
 8009ece:	d1f7      	bne.n	8009ec0 <_fwalk_sglue+0xc>
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d907      	bls.n	8009eec <_fwalk_sglue+0x38>
 8009edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	d003      	beq.n	8009eec <_fwalk_sglue+0x38>
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	47c0      	blx	r8
 8009eea:	4306      	orrs	r6, r0
 8009eec:	3568      	adds	r5, #104	@ 0x68
 8009eee:	e7e9      	b.n	8009ec4 <_fwalk_sglue+0x10>

08009ef0 <iprintf>:
 8009ef0:	b40f      	push	{r0, r1, r2, r3}
 8009ef2:	b507      	push	{r0, r1, r2, lr}
 8009ef4:	4906      	ldr	r1, [pc, #24]	@ (8009f10 <iprintf+0x20>)
 8009ef6:	ab04      	add	r3, sp, #16
 8009ef8:	6808      	ldr	r0, [r1, #0]
 8009efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efe:	6881      	ldr	r1, [r0, #8]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	f000 f99d 	bl	800a240 <_vfiprintf_r>
 8009f06:	b003      	add	sp, #12
 8009f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f0c:	b004      	add	sp, #16
 8009f0e:	4770      	bx	lr
 8009f10:	20000018 	.word	0x20000018

08009f14 <__sread>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	460c      	mov	r4, r1
 8009f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1c:	f000 f8a6 	bl	800a06c <_read_r>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	bfab      	itete	ge
 8009f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f26:	89a3      	ldrhlt	r3, [r4, #12]
 8009f28:	181b      	addge	r3, r3, r0
 8009f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f2e:	bfac      	ite	ge
 8009f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f32:	81a3      	strhlt	r3, [r4, #12]
 8009f34:	bd10      	pop	{r4, pc}

08009f36 <__swrite>:
 8009f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f3a:	461f      	mov	r7, r3
 8009f3c:	898b      	ldrh	r3, [r1, #12]
 8009f3e:	05db      	lsls	r3, r3, #23
 8009f40:	4605      	mov	r5, r0
 8009f42:	460c      	mov	r4, r1
 8009f44:	4616      	mov	r6, r2
 8009f46:	d505      	bpl.n	8009f54 <__swrite+0x1e>
 8009f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f000 f87a 	bl	800a048 <_lseek_r>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	4632      	mov	r2, r6
 8009f62:	463b      	mov	r3, r7
 8009f64:	4628      	mov	r0, r5
 8009f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6a:	f000 b8a1 	b.w	800a0b0 <_write_r>

08009f6e <__sseek>:
 8009f6e:	b510      	push	{r4, lr}
 8009f70:	460c      	mov	r4, r1
 8009f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f76:	f000 f867 	bl	800a048 <_lseek_r>
 8009f7a:	1c43      	adds	r3, r0, #1
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	bf15      	itete	ne
 8009f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f8a:	81a3      	strheq	r3, [r4, #12]
 8009f8c:	bf18      	it	ne
 8009f8e:	81a3      	strhne	r3, [r4, #12]
 8009f90:	bd10      	pop	{r4, pc}

08009f92 <__sclose>:
 8009f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f96:	f000 b847 	b.w	800a028 <_close_r>

08009f9a <memcmp>:
 8009f9a:	b510      	push	{r4, lr}
 8009f9c:	3901      	subs	r1, #1
 8009f9e:	4402      	add	r2, r0
 8009fa0:	4290      	cmp	r0, r2
 8009fa2:	d101      	bne.n	8009fa8 <memcmp+0xe>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	e005      	b.n	8009fb4 <memcmp+0x1a>
 8009fa8:	7803      	ldrb	r3, [r0, #0]
 8009faa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009fae:	42a3      	cmp	r3, r4
 8009fb0:	d001      	beq.n	8009fb6 <memcmp+0x1c>
 8009fb2:	1b18      	subs	r0, r3, r4
 8009fb4:	bd10      	pop	{r4, pc}
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	e7f2      	b.n	8009fa0 <memcmp+0x6>

08009fba <memset>:
 8009fba:	4402      	add	r2, r0
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d100      	bne.n	8009fc4 <memset+0xa>
 8009fc2:	4770      	bx	lr
 8009fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc8:	e7f9      	b.n	8009fbe <memset+0x4>

08009fca <strchr>:
 8009fca:	b2c9      	uxtb	r1, r1
 8009fcc:	4603      	mov	r3, r0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd4:	b112      	cbz	r2, 8009fdc <strchr+0x12>
 8009fd6:	428a      	cmp	r2, r1
 8009fd8:	d1f9      	bne.n	8009fce <strchr+0x4>
 8009fda:	4770      	bx	lr
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	bf18      	it	ne
 8009fe0:	2000      	movne	r0, #0
 8009fe2:	4770      	bx	lr

08009fe4 <strcspn>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	461e      	mov	r6, r3
 8009fea:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009fee:	b144      	cbz	r4, 800a002 <strcspn+0x1e>
 8009ff0:	1e4a      	subs	r2, r1, #1
 8009ff2:	e001      	b.n	8009ff8 <strcspn+0x14>
 8009ff4:	42a5      	cmp	r5, r4
 8009ff6:	d004      	beq.n	800a002 <strcspn+0x1e>
 8009ff8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	d1f9      	bne.n	8009ff4 <strcspn+0x10>
 800a000:	e7f2      	b.n	8009fe8 <strcspn+0x4>
 800a002:	1a30      	subs	r0, r6, r0
 800a004:	bd70      	pop	{r4, r5, r6, pc}

0800a006 <strspn>:
 800a006:	b570      	push	{r4, r5, r6, lr}
 800a008:	4603      	mov	r3, r0
 800a00a:	461e      	mov	r6, r3
 800a00c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a010:	b13c      	cbz	r4, 800a022 <strspn+0x1c>
 800a012:	1e4a      	subs	r2, r1, #1
 800a014:	e001      	b.n	800a01a <strspn+0x14>
 800a016:	42a5      	cmp	r5, r4
 800a018:	d0f7      	beq.n	800a00a <strspn+0x4>
 800a01a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a01e:	2d00      	cmp	r5, #0
 800a020:	d1f9      	bne.n	800a016 <strspn+0x10>
 800a022:	1a30      	subs	r0, r6, r0
 800a024:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a028 <_close_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d06      	ldr	r5, [pc, #24]	@ (800a044 <_close_r+0x1c>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7fd fcac 	bl	8007990 <_close>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_close_r+0x1a>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_close_r+0x1a>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	20000390 	.word	0x20000390

0800a048 <_lseek_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d07      	ldr	r5, [pc, #28]	@ (800a068 <_lseek_r+0x20>)
 800a04c:	4604      	mov	r4, r0
 800a04e:	4608      	mov	r0, r1
 800a050:	4611      	mov	r1, r2
 800a052:	2200      	movs	r2, #0
 800a054:	602a      	str	r2, [r5, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	f7fd fcc1 	bl	80079de <_lseek>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d102      	bne.n	800a066 <_lseek_r+0x1e>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	b103      	cbz	r3, 800a066 <_lseek_r+0x1e>
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	20000390 	.word	0x20000390

0800a06c <_read_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4d07      	ldr	r5, [pc, #28]	@ (800a08c <_read_r+0x20>)
 800a070:	4604      	mov	r4, r0
 800a072:	4608      	mov	r0, r1
 800a074:	4611      	mov	r1, r2
 800a076:	2200      	movs	r2, #0
 800a078:	602a      	str	r2, [r5, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	f7fd fc4f 	bl	800791e <_read>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_read_r+0x1e>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_read_r+0x1e>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	20000390 	.word	0x20000390

0800a090 <_sbrk_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4d06      	ldr	r5, [pc, #24]	@ (800a0ac <_sbrk_r+0x1c>)
 800a094:	2300      	movs	r3, #0
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	602b      	str	r3, [r5, #0]
 800a09c:	f7fd fcac 	bl	80079f8 <_sbrk>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_sbrk_r+0x1a>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_sbrk_r+0x1a>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	20000390 	.word	0x20000390

0800a0b0 <_write_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	@ (800a0d0 <_write_r+0x20>)
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	602a      	str	r2, [r5, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f7fd fc4a 	bl	8007958 <_write>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_write_r+0x1e>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_write_r+0x1e>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	20000390 	.word	0x20000390

0800a0d4 <__errno>:
 800a0d4:	4b01      	ldr	r3, [pc, #4]	@ (800a0dc <__errno+0x8>)
 800a0d6:	6818      	ldr	r0, [r3, #0]
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20000018 	.word	0x20000018

0800a0e0 <__libc_init_array>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	4d0d      	ldr	r5, [pc, #52]	@ (800a118 <__libc_init_array+0x38>)
 800a0e4:	4c0d      	ldr	r4, [pc, #52]	@ (800a11c <__libc_init_array+0x3c>)
 800a0e6:	1b64      	subs	r4, r4, r5
 800a0e8:	10a4      	asrs	r4, r4, #2
 800a0ea:	2600      	movs	r6, #0
 800a0ec:	42a6      	cmp	r6, r4
 800a0ee:	d109      	bne.n	800a104 <__libc_init_array+0x24>
 800a0f0:	4d0b      	ldr	r5, [pc, #44]	@ (800a120 <__libc_init_array+0x40>)
 800a0f2:	4c0c      	ldr	r4, [pc, #48]	@ (800a124 <__libc_init_array+0x44>)
 800a0f4:	f000 fd52 	bl	800ab9c <_init>
 800a0f8:	1b64      	subs	r4, r4, r5
 800a0fa:	10a4      	asrs	r4, r4, #2
 800a0fc:	2600      	movs	r6, #0
 800a0fe:	42a6      	cmp	r6, r4
 800a100:	d105      	bne.n	800a10e <__libc_init_array+0x2e>
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	f855 3b04 	ldr.w	r3, [r5], #4
 800a108:	4798      	blx	r3
 800a10a:	3601      	adds	r6, #1
 800a10c:	e7ee      	b.n	800a0ec <__libc_init_array+0xc>
 800a10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a112:	4798      	blx	r3
 800a114:	3601      	adds	r6, #1
 800a116:	e7f2      	b.n	800a0fe <__libc_init_array+0x1e>
 800a118:	0800b728 	.word	0x0800b728
 800a11c:	0800b728 	.word	0x0800b728
 800a120:	0800b728 	.word	0x0800b728
 800a124:	0800b72c 	.word	0x0800b72c

0800a128 <__retarget_lock_init_recursive>:
 800a128:	4770      	bx	lr

0800a12a <__retarget_lock_acquire_recursive>:
 800a12a:	4770      	bx	lr

0800a12c <__retarget_lock_release_recursive>:
 800a12c:	4770      	bx	lr

0800a12e <memcpy>:
 800a12e:	440a      	add	r2, r1
 800a130:	4291      	cmp	r1, r2
 800a132:	f100 33ff 	add.w	r3, r0, #4294967295
 800a136:	d100      	bne.n	800a13a <memcpy+0xc>
 800a138:	4770      	bx	lr
 800a13a:	b510      	push	{r4, lr}
 800a13c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a140:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a144:	4291      	cmp	r1, r2
 800a146:	d1f9      	bne.n	800a13c <memcpy+0xe>
 800a148:	bd10      	pop	{r4, pc}

0800a14a <abort>:
 800a14a:	b508      	push	{r3, lr}
 800a14c:	2006      	movs	r0, #6
 800a14e:	f000 fc85 	bl	800aa5c <raise>
 800a152:	2001      	movs	r0, #1
 800a154:	f7fd fbd8 	bl	8007908 <_exit>

0800a158 <_free_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4605      	mov	r5, r0
 800a15c:	2900      	cmp	r1, #0
 800a15e:	d041      	beq.n	800a1e4 <_free_r+0x8c>
 800a160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a164:	1f0c      	subs	r4, r1, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	bfb8      	it	lt
 800a16a:	18e4      	addlt	r4, r4, r3
 800a16c:	f7ff fde0 	bl	8009d30 <__malloc_lock>
 800a170:	4a1d      	ldr	r2, [pc, #116]	@ (800a1e8 <_free_r+0x90>)
 800a172:	6813      	ldr	r3, [r2, #0]
 800a174:	b933      	cbnz	r3, 800a184 <_free_r+0x2c>
 800a176:	6063      	str	r3, [r4, #4]
 800a178:	6014      	str	r4, [r2, #0]
 800a17a:	4628      	mov	r0, r5
 800a17c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a180:	f7ff bddc 	b.w	8009d3c <__malloc_unlock>
 800a184:	42a3      	cmp	r3, r4
 800a186:	d908      	bls.n	800a19a <_free_r+0x42>
 800a188:	6820      	ldr	r0, [r4, #0]
 800a18a:	1821      	adds	r1, r4, r0
 800a18c:	428b      	cmp	r3, r1
 800a18e:	bf01      	itttt	eq
 800a190:	6819      	ldreq	r1, [r3, #0]
 800a192:	685b      	ldreq	r3, [r3, #4]
 800a194:	1809      	addeq	r1, r1, r0
 800a196:	6021      	streq	r1, [r4, #0]
 800a198:	e7ed      	b.n	800a176 <_free_r+0x1e>
 800a19a:	461a      	mov	r2, r3
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	b10b      	cbz	r3, 800a1a4 <_free_r+0x4c>
 800a1a0:	42a3      	cmp	r3, r4
 800a1a2:	d9fa      	bls.n	800a19a <_free_r+0x42>
 800a1a4:	6811      	ldr	r1, [r2, #0]
 800a1a6:	1850      	adds	r0, r2, r1
 800a1a8:	42a0      	cmp	r0, r4
 800a1aa:	d10b      	bne.n	800a1c4 <_free_r+0x6c>
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	4401      	add	r1, r0
 800a1b0:	1850      	adds	r0, r2, r1
 800a1b2:	4283      	cmp	r3, r0
 800a1b4:	6011      	str	r1, [r2, #0]
 800a1b6:	d1e0      	bne.n	800a17a <_free_r+0x22>
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	6053      	str	r3, [r2, #4]
 800a1be:	4408      	add	r0, r1
 800a1c0:	6010      	str	r0, [r2, #0]
 800a1c2:	e7da      	b.n	800a17a <_free_r+0x22>
 800a1c4:	d902      	bls.n	800a1cc <_free_r+0x74>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	602b      	str	r3, [r5, #0]
 800a1ca:	e7d6      	b.n	800a17a <_free_r+0x22>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	1821      	adds	r1, r4, r0
 800a1d0:	428b      	cmp	r3, r1
 800a1d2:	bf04      	itt	eq
 800a1d4:	6819      	ldreq	r1, [r3, #0]
 800a1d6:	685b      	ldreq	r3, [r3, #4]
 800a1d8:	6063      	str	r3, [r4, #4]
 800a1da:	bf04      	itt	eq
 800a1dc:	1809      	addeq	r1, r1, r0
 800a1de:	6021      	streq	r1, [r4, #0]
 800a1e0:	6054      	str	r4, [r2, #4]
 800a1e2:	e7ca      	b.n	800a17a <_free_r+0x22>
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000250 	.word	0x20000250

0800a1ec <__sfputc_r>:
 800a1ec:	6893      	ldr	r3, [r2, #8]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	b410      	push	{r4}
 800a1f4:	6093      	str	r3, [r2, #8]
 800a1f6:	da08      	bge.n	800a20a <__sfputc_r+0x1e>
 800a1f8:	6994      	ldr	r4, [r2, #24]
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	db01      	blt.n	800a202 <__sfputc_r+0x16>
 800a1fe:	290a      	cmp	r1, #10
 800a200:	d103      	bne.n	800a20a <__sfputc_r+0x1e>
 800a202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a206:	f000 bb6d 	b.w	800a8e4 <__swbuf_r>
 800a20a:	6813      	ldr	r3, [r2, #0]
 800a20c:	1c58      	adds	r0, r3, #1
 800a20e:	6010      	str	r0, [r2, #0]
 800a210:	7019      	strb	r1, [r3, #0]
 800a212:	4608      	mov	r0, r1
 800a214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <__sfputs_r>:
 800a21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21c:	4606      	mov	r6, r0
 800a21e:	460f      	mov	r7, r1
 800a220:	4614      	mov	r4, r2
 800a222:	18d5      	adds	r5, r2, r3
 800a224:	42ac      	cmp	r4, r5
 800a226:	d101      	bne.n	800a22c <__sfputs_r+0x12>
 800a228:	2000      	movs	r0, #0
 800a22a:	e007      	b.n	800a23c <__sfputs_r+0x22>
 800a22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a230:	463a      	mov	r2, r7
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff ffda 	bl	800a1ec <__sfputc_r>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d1f3      	bne.n	800a224 <__sfputs_r+0xa>
 800a23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a240 <_vfiprintf_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	460d      	mov	r5, r1
 800a246:	b09d      	sub	sp, #116	@ 0x74
 800a248:	4614      	mov	r4, r2
 800a24a:	4698      	mov	r8, r3
 800a24c:	4606      	mov	r6, r0
 800a24e:	b118      	cbz	r0, 800a258 <_vfiprintf_r+0x18>
 800a250:	6a03      	ldr	r3, [r0, #32]
 800a252:	b90b      	cbnz	r3, 800a258 <_vfiprintf_r+0x18>
 800a254:	f7ff fe04 	bl	8009e60 <__sinit>
 800a258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a25a:	07d9      	lsls	r1, r3, #31
 800a25c:	d405      	bmi.n	800a26a <_vfiprintf_r+0x2a>
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	059a      	lsls	r2, r3, #22
 800a262:	d402      	bmi.n	800a26a <_vfiprintf_r+0x2a>
 800a264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a266:	f7ff ff60 	bl	800a12a <__retarget_lock_acquire_recursive>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	071b      	lsls	r3, r3, #28
 800a26e:	d501      	bpl.n	800a274 <_vfiprintf_r+0x34>
 800a270:	692b      	ldr	r3, [r5, #16]
 800a272:	b99b      	cbnz	r3, 800a29c <_vfiprintf_r+0x5c>
 800a274:	4629      	mov	r1, r5
 800a276:	4630      	mov	r0, r6
 800a278:	f000 fb72 	bl	800a960 <__swsetup_r>
 800a27c:	b170      	cbz	r0, 800a29c <_vfiprintf_r+0x5c>
 800a27e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a280:	07dc      	lsls	r4, r3, #31
 800a282:	d504      	bpl.n	800a28e <_vfiprintf_r+0x4e>
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	b01d      	add	sp, #116	@ 0x74
 800a28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	0598      	lsls	r0, r3, #22
 800a292:	d4f7      	bmi.n	800a284 <_vfiprintf_r+0x44>
 800a294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a296:	f7ff ff49 	bl	800a12c <__retarget_lock_release_recursive>
 800a29a:	e7f3      	b.n	800a284 <_vfiprintf_r+0x44>
 800a29c:	2300      	movs	r3, #0
 800a29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a0:	2320      	movs	r3, #32
 800a2a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2aa:	2330      	movs	r3, #48	@ 0x30
 800a2ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a45c <_vfiprintf_r+0x21c>
 800a2b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2b4:	f04f 0901 	mov.w	r9, #1
 800a2b8:	4623      	mov	r3, r4
 800a2ba:	469a      	mov	sl, r3
 800a2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c0:	b10a      	cbz	r2, 800a2c6 <_vfiprintf_r+0x86>
 800a2c2:	2a25      	cmp	r2, #37	@ 0x25
 800a2c4:	d1f9      	bne.n	800a2ba <_vfiprintf_r+0x7a>
 800a2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ca:	d00b      	beq.n	800a2e4 <_vfiprintf_r+0xa4>
 800a2cc:	465b      	mov	r3, fp
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ffa1 	bl	800a21a <__sfputs_r>
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f000 80a7 	beq.w	800a42c <_vfiprintf_r+0x1ec>
 800a2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e0:	445a      	add	r2, fp
 800a2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 809f 	beq.w	800a42c <_vfiprintf_r+0x1ec>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2f8:	f10a 0a01 	add.w	sl, sl, #1
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	9307      	str	r3, [sp, #28]
 800a300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a304:	931a      	str	r3, [sp, #104]	@ 0x68
 800a306:	4654      	mov	r4, sl
 800a308:	2205      	movs	r2, #5
 800a30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30e:	4853      	ldr	r0, [pc, #332]	@ (800a45c <_vfiprintf_r+0x21c>)
 800a310:	f7f5 ff6e 	bl	80001f0 <memchr>
 800a314:	9a04      	ldr	r2, [sp, #16]
 800a316:	b9d8      	cbnz	r0, 800a350 <_vfiprintf_r+0x110>
 800a318:	06d1      	lsls	r1, r2, #27
 800a31a:	bf44      	itt	mi
 800a31c:	2320      	movmi	r3, #32
 800a31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a322:	0713      	lsls	r3, r2, #28
 800a324:	bf44      	itt	mi
 800a326:	232b      	movmi	r3, #43	@ 0x2b
 800a328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a32c:	f89a 3000 	ldrb.w	r3, [sl]
 800a330:	2b2a      	cmp	r3, #42	@ 0x2a
 800a332:	d015      	beq.n	800a360 <_vfiprintf_r+0x120>
 800a334:	9a07      	ldr	r2, [sp, #28]
 800a336:	4654      	mov	r4, sl
 800a338:	2000      	movs	r0, #0
 800a33a:	f04f 0c0a 	mov.w	ip, #10
 800a33e:	4621      	mov	r1, r4
 800a340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a344:	3b30      	subs	r3, #48	@ 0x30
 800a346:	2b09      	cmp	r3, #9
 800a348:	d94b      	bls.n	800a3e2 <_vfiprintf_r+0x1a2>
 800a34a:	b1b0      	cbz	r0, 800a37a <_vfiprintf_r+0x13a>
 800a34c:	9207      	str	r2, [sp, #28]
 800a34e:	e014      	b.n	800a37a <_vfiprintf_r+0x13a>
 800a350:	eba0 0308 	sub.w	r3, r0, r8
 800a354:	fa09 f303 	lsl.w	r3, r9, r3
 800a358:	4313      	orrs	r3, r2
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	46a2      	mov	sl, r4
 800a35e:	e7d2      	b.n	800a306 <_vfiprintf_r+0xc6>
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	1d19      	adds	r1, r3, #4
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	9103      	str	r1, [sp, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bfbb      	ittet	lt
 800a36c:	425b      	neglt	r3, r3
 800a36e:	f042 0202 	orrlt.w	r2, r2, #2
 800a372:	9307      	strge	r3, [sp, #28]
 800a374:	9307      	strlt	r3, [sp, #28]
 800a376:	bfb8      	it	lt
 800a378:	9204      	strlt	r2, [sp, #16]
 800a37a:	7823      	ldrb	r3, [r4, #0]
 800a37c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a37e:	d10a      	bne.n	800a396 <_vfiprintf_r+0x156>
 800a380:	7863      	ldrb	r3, [r4, #1]
 800a382:	2b2a      	cmp	r3, #42	@ 0x2a
 800a384:	d132      	bne.n	800a3ec <_vfiprintf_r+0x1ac>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	1d1a      	adds	r2, r3, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	9203      	str	r2, [sp, #12]
 800a38e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a392:	3402      	adds	r4, #2
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a46c <_vfiprintf_r+0x22c>
 800a39a:	7821      	ldrb	r1, [r4, #0]
 800a39c:	2203      	movs	r2, #3
 800a39e:	4650      	mov	r0, sl
 800a3a0:	f7f5 ff26 	bl	80001f0 <memchr>
 800a3a4:	b138      	cbz	r0, 800a3b6 <_vfiprintf_r+0x176>
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	eba0 000a 	sub.w	r0, r0, sl
 800a3ac:	2240      	movs	r2, #64	@ 0x40
 800a3ae:	4082      	lsls	r2, r0
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	3401      	adds	r4, #1
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ba:	4829      	ldr	r0, [pc, #164]	@ (800a460 <_vfiprintf_r+0x220>)
 800a3bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3c0:	2206      	movs	r2, #6
 800a3c2:	f7f5 ff15 	bl	80001f0 <memchr>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d03f      	beq.n	800a44a <_vfiprintf_r+0x20a>
 800a3ca:	4b26      	ldr	r3, [pc, #152]	@ (800a464 <_vfiprintf_r+0x224>)
 800a3cc:	bb1b      	cbnz	r3, 800a416 <_vfiprintf_r+0x1d6>
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	3307      	adds	r3, #7
 800a3d2:	f023 0307 	bic.w	r3, r3, #7
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	9303      	str	r3, [sp, #12]
 800a3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3dc:	443b      	add	r3, r7
 800a3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e0:	e76a      	b.n	800a2b8 <_vfiprintf_r+0x78>
 800a3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	e7a8      	b.n	800a33e <_vfiprintf_r+0xfe>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	3401      	adds	r4, #1
 800a3f0:	9305      	str	r3, [sp, #20]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	f04f 0c0a 	mov.w	ip, #10
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3fe:	3a30      	subs	r2, #48	@ 0x30
 800a400:	2a09      	cmp	r2, #9
 800a402:	d903      	bls.n	800a40c <_vfiprintf_r+0x1cc>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0c6      	beq.n	800a396 <_vfiprintf_r+0x156>
 800a408:	9105      	str	r1, [sp, #20]
 800a40a:	e7c4      	b.n	800a396 <_vfiprintf_r+0x156>
 800a40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a410:	4604      	mov	r4, r0
 800a412:	2301      	movs	r3, #1
 800a414:	e7f0      	b.n	800a3f8 <_vfiprintf_r+0x1b8>
 800a416:	ab03      	add	r3, sp, #12
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	462a      	mov	r2, r5
 800a41c:	4b12      	ldr	r3, [pc, #72]	@ (800a468 <_vfiprintf_r+0x228>)
 800a41e:	a904      	add	r1, sp, #16
 800a420:	4630      	mov	r0, r6
 800a422:	f3af 8000 	nop.w
 800a426:	4607      	mov	r7, r0
 800a428:	1c78      	adds	r0, r7, #1
 800a42a:	d1d6      	bne.n	800a3da <_vfiprintf_r+0x19a>
 800a42c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a42e:	07d9      	lsls	r1, r3, #31
 800a430:	d405      	bmi.n	800a43e <_vfiprintf_r+0x1fe>
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	059a      	lsls	r2, r3, #22
 800a436:	d402      	bmi.n	800a43e <_vfiprintf_r+0x1fe>
 800a438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a43a:	f7ff fe77 	bl	800a12c <__retarget_lock_release_recursive>
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	065b      	lsls	r3, r3, #25
 800a442:	f53f af1f 	bmi.w	800a284 <_vfiprintf_r+0x44>
 800a446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a448:	e71e      	b.n	800a288 <_vfiprintf_r+0x48>
 800a44a:	ab03      	add	r3, sp, #12
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	462a      	mov	r2, r5
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <_vfiprintf_r+0x228>)
 800a452:	a904      	add	r1, sp, #16
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f879 	bl	800a54c <_printf_i>
 800a45a:	e7e4      	b.n	800a426 <_vfiprintf_r+0x1e6>
 800a45c:	0800b6ec 	.word	0x0800b6ec
 800a460:	0800b6f6 	.word	0x0800b6f6
 800a464:	00000000 	.word	0x00000000
 800a468:	0800a21b 	.word	0x0800a21b
 800a46c:	0800b6f2 	.word	0x0800b6f2

0800a470 <_printf_common>:
 800a470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a474:	4616      	mov	r6, r2
 800a476:	4698      	mov	r8, r3
 800a478:	688a      	ldr	r2, [r1, #8]
 800a47a:	690b      	ldr	r3, [r1, #16]
 800a47c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a480:	4293      	cmp	r3, r2
 800a482:	bfb8      	it	lt
 800a484:	4613      	movlt	r3, r2
 800a486:	6033      	str	r3, [r6, #0]
 800a488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a48c:	4607      	mov	r7, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b10a      	cbz	r2, 800a496 <_printf_common+0x26>
 800a492:	3301      	adds	r3, #1
 800a494:	6033      	str	r3, [r6, #0]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	0699      	lsls	r1, r3, #26
 800a49a:	bf42      	ittt	mi
 800a49c:	6833      	ldrmi	r3, [r6, #0]
 800a49e:	3302      	addmi	r3, #2
 800a4a0:	6033      	strmi	r3, [r6, #0]
 800a4a2:	6825      	ldr	r5, [r4, #0]
 800a4a4:	f015 0506 	ands.w	r5, r5, #6
 800a4a8:	d106      	bne.n	800a4b8 <_printf_common+0x48>
 800a4aa:	f104 0a19 	add.w	sl, r4, #25
 800a4ae:	68e3      	ldr	r3, [r4, #12]
 800a4b0:	6832      	ldr	r2, [r6, #0]
 800a4b2:	1a9b      	subs	r3, r3, r2
 800a4b4:	42ab      	cmp	r3, r5
 800a4b6:	dc26      	bgt.n	800a506 <_printf_common+0x96>
 800a4b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	3b00      	subs	r3, #0
 800a4c0:	bf18      	it	ne
 800a4c2:	2301      	movne	r3, #1
 800a4c4:	0692      	lsls	r2, r2, #26
 800a4c6:	d42b      	bmi.n	800a520 <_printf_common+0xb0>
 800a4c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4cc:	4641      	mov	r1, r8
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	47c8      	blx	r9
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	d01e      	beq.n	800a514 <_printf_common+0xa4>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	6922      	ldr	r2, [r4, #16]
 800a4da:	f003 0306 	and.w	r3, r3, #6
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	bf02      	ittt	eq
 800a4e2:	68e5      	ldreq	r5, [r4, #12]
 800a4e4:	6833      	ldreq	r3, [r6, #0]
 800a4e6:	1aed      	subeq	r5, r5, r3
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	bf0c      	ite	eq
 800a4ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4f0:	2500      	movne	r5, #0
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	bfc4      	itt	gt
 800a4f6:	1a9b      	subgt	r3, r3, r2
 800a4f8:	18ed      	addgt	r5, r5, r3
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	341a      	adds	r4, #26
 800a4fe:	42b5      	cmp	r5, r6
 800a500:	d11a      	bne.n	800a538 <_printf_common+0xc8>
 800a502:	2000      	movs	r0, #0
 800a504:	e008      	b.n	800a518 <_printf_common+0xa8>
 800a506:	2301      	movs	r3, #1
 800a508:	4652      	mov	r2, sl
 800a50a:	4641      	mov	r1, r8
 800a50c:	4638      	mov	r0, r7
 800a50e:	47c8      	blx	r9
 800a510:	3001      	adds	r0, #1
 800a512:	d103      	bne.n	800a51c <_printf_common+0xac>
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51c:	3501      	adds	r5, #1
 800a51e:	e7c6      	b.n	800a4ae <_printf_common+0x3e>
 800a520:	18e1      	adds	r1, r4, r3
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	2030      	movs	r0, #48	@ 0x30
 800a526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a52a:	4422      	add	r2, r4
 800a52c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a534:	3302      	adds	r3, #2
 800a536:	e7c7      	b.n	800a4c8 <_printf_common+0x58>
 800a538:	2301      	movs	r3, #1
 800a53a:	4622      	mov	r2, r4
 800a53c:	4641      	mov	r1, r8
 800a53e:	4638      	mov	r0, r7
 800a540:	47c8      	blx	r9
 800a542:	3001      	adds	r0, #1
 800a544:	d0e6      	beq.n	800a514 <_printf_common+0xa4>
 800a546:	3601      	adds	r6, #1
 800a548:	e7d9      	b.n	800a4fe <_printf_common+0x8e>
	...

0800a54c <_printf_i>:
 800a54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a550:	7e0f      	ldrb	r7, [r1, #24]
 800a552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a554:	2f78      	cmp	r7, #120	@ 0x78
 800a556:	4691      	mov	r9, r2
 800a558:	4680      	mov	r8, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	469a      	mov	sl, r3
 800a55e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a562:	d807      	bhi.n	800a574 <_printf_i+0x28>
 800a564:	2f62      	cmp	r7, #98	@ 0x62
 800a566:	d80a      	bhi.n	800a57e <_printf_i+0x32>
 800a568:	2f00      	cmp	r7, #0
 800a56a:	f000 80d2 	beq.w	800a712 <_printf_i+0x1c6>
 800a56e:	2f58      	cmp	r7, #88	@ 0x58
 800a570:	f000 80b9 	beq.w	800a6e6 <_printf_i+0x19a>
 800a574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a57c:	e03a      	b.n	800a5f4 <_printf_i+0xa8>
 800a57e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a582:	2b15      	cmp	r3, #21
 800a584:	d8f6      	bhi.n	800a574 <_printf_i+0x28>
 800a586:	a101      	add	r1, pc, #4	@ (adr r1, 800a58c <_printf_i+0x40>)
 800a588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a58c:	0800a5e5 	.word	0x0800a5e5
 800a590:	0800a5f9 	.word	0x0800a5f9
 800a594:	0800a575 	.word	0x0800a575
 800a598:	0800a575 	.word	0x0800a575
 800a59c:	0800a575 	.word	0x0800a575
 800a5a0:	0800a575 	.word	0x0800a575
 800a5a4:	0800a5f9 	.word	0x0800a5f9
 800a5a8:	0800a575 	.word	0x0800a575
 800a5ac:	0800a575 	.word	0x0800a575
 800a5b0:	0800a575 	.word	0x0800a575
 800a5b4:	0800a575 	.word	0x0800a575
 800a5b8:	0800a6f9 	.word	0x0800a6f9
 800a5bc:	0800a623 	.word	0x0800a623
 800a5c0:	0800a6b3 	.word	0x0800a6b3
 800a5c4:	0800a575 	.word	0x0800a575
 800a5c8:	0800a575 	.word	0x0800a575
 800a5cc:	0800a71b 	.word	0x0800a71b
 800a5d0:	0800a575 	.word	0x0800a575
 800a5d4:	0800a623 	.word	0x0800a623
 800a5d8:	0800a575 	.word	0x0800a575
 800a5dc:	0800a575 	.word	0x0800a575
 800a5e0:	0800a6bb 	.word	0x0800a6bb
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	1d1a      	adds	r2, r3, #4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6032      	str	r2, [r6, #0]
 800a5ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e09d      	b.n	800a734 <_printf_i+0x1e8>
 800a5f8:	6833      	ldr	r3, [r6, #0]
 800a5fa:	6820      	ldr	r0, [r4, #0]
 800a5fc:	1d19      	adds	r1, r3, #4
 800a5fe:	6031      	str	r1, [r6, #0]
 800a600:	0606      	lsls	r6, r0, #24
 800a602:	d501      	bpl.n	800a608 <_printf_i+0xbc>
 800a604:	681d      	ldr	r5, [r3, #0]
 800a606:	e003      	b.n	800a610 <_printf_i+0xc4>
 800a608:	0645      	lsls	r5, r0, #25
 800a60a:	d5fb      	bpl.n	800a604 <_printf_i+0xb8>
 800a60c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a610:	2d00      	cmp	r5, #0
 800a612:	da03      	bge.n	800a61c <_printf_i+0xd0>
 800a614:	232d      	movs	r3, #45	@ 0x2d
 800a616:	426d      	negs	r5, r5
 800a618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a61c:	4859      	ldr	r0, [pc, #356]	@ (800a784 <_printf_i+0x238>)
 800a61e:	230a      	movs	r3, #10
 800a620:	e011      	b.n	800a646 <_printf_i+0xfa>
 800a622:	6821      	ldr	r1, [r4, #0]
 800a624:	6833      	ldr	r3, [r6, #0]
 800a626:	0608      	lsls	r0, r1, #24
 800a628:	f853 5b04 	ldr.w	r5, [r3], #4
 800a62c:	d402      	bmi.n	800a634 <_printf_i+0xe8>
 800a62e:	0649      	lsls	r1, r1, #25
 800a630:	bf48      	it	mi
 800a632:	b2ad      	uxthmi	r5, r5
 800a634:	2f6f      	cmp	r7, #111	@ 0x6f
 800a636:	4853      	ldr	r0, [pc, #332]	@ (800a784 <_printf_i+0x238>)
 800a638:	6033      	str	r3, [r6, #0]
 800a63a:	bf14      	ite	ne
 800a63c:	230a      	movne	r3, #10
 800a63e:	2308      	moveq	r3, #8
 800a640:	2100      	movs	r1, #0
 800a642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a646:	6866      	ldr	r6, [r4, #4]
 800a648:	60a6      	str	r6, [r4, #8]
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	bfa2      	ittt	ge
 800a64e:	6821      	ldrge	r1, [r4, #0]
 800a650:	f021 0104 	bicge.w	r1, r1, #4
 800a654:	6021      	strge	r1, [r4, #0]
 800a656:	b90d      	cbnz	r5, 800a65c <_printf_i+0x110>
 800a658:	2e00      	cmp	r6, #0
 800a65a:	d04b      	beq.n	800a6f4 <_printf_i+0x1a8>
 800a65c:	4616      	mov	r6, r2
 800a65e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a662:	fb03 5711 	mls	r7, r3, r1, r5
 800a666:	5dc7      	ldrb	r7, [r0, r7]
 800a668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a66c:	462f      	mov	r7, r5
 800a66e:	42bb      	cmp	r3, r7
 800a670:	460d      	mov	r5, r1
 800a672:	d9f4      	bls.n	800a65e <_printf_i+0x112>
 800a674:	2b08      	cmp	r3, #8
 800a676:	d10b      	bne.n	800a690 <_printf_i+0x144>
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	07df      	lsls	r7, r3, #31
 800a67c:	d508      	bpl.n	800a690 <_printf_i+0x144>
 800a67e:	6923      	ldr	r3, [r4, #16]
 800a680:	6861      	ldr	r1, [r4, #4]
 800a682:	4299      	cmp	r1, r3
 800a684:	bfde      	ittt	le
 800a686:	2330      	movle	r3, #48	@ 0x30
 800a688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a68c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a690:	1b92      	subs	r2, r2, r6
 800a692:	6122      	str	r2, [r4, #16]
 800a694:	f8cd a000 	str.w	sl, [sp]
 800a698:	464b      	mov	r3, r9
 800a69a:	aa03      	add	r2, sp, #12
 800a69c:	4621      	mov	r1, r4
 800a69e:	4640      	mov	r0, r8
 800a6a0:	f7ff fee6 	bl	800a470 <_printf_common>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d14a      	bne.n	800a73e <_printf_i+0x1f2>
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ac:	b004      	add	sp, #16
 800a6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	f043 0320 	orr.w	r3, r3, #32
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	4833      	ldr	r0, [pc, #204]	@ (800a788 <_printf_i+0x23c>)
 800a6bc:	2778      	movs	r7, #120	@ 0x78
 800a6be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	6831      	ldr	r1, [r6, #0]
 800a6c6:	061f      	lsls	r7, r3, #24
 800a6c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6cc:	d402      	bmi.n	800a6d4 <_printf_i+0x188>
 800a6ce:	065f      	lsls	r7, r3, #25
 800a6d0:	bf48      	it	mi
 800a6d2:	b2ad      	uxthmi	r5, r5
 800a6d4:	6031      	str	r1, [r6, #0]
 800a6d6:	07d9      	lsls	r1, r3, #31
 800a6d8:	bf44      	itt	mi
 800a6da:	f043 0320 	orrmi.w	r3, r3, #32
 800a6de:	6023      	strmi	r3, [r4, #0]
 800a6e0:	b11d      	cbz	r5, 800a6ea <_printf_i+0x19e>
 800a6e2:	2310      	movs	r3, #16
 800a6e4:	e7ac      	b.n	800a640 <_printf_i+0xf4>
 800a6e6:	4827      	ldr	r0, [pc, #156]	@ (800a784 <_printf_i+0x238>)
 800a6e8:	e7e9      	b.n	800a6be <_printf_i+0x172>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	f023 0320 	bic.w	r3, r3, #32
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	e7f6      	b.n	800a6e2 <_printf_i+0x196>
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	e7bd      	b.n	800a674 <_printf_i+0x128>
 800a6f8:	6833      	ldr	r3, [r6, #0]
 800a6fa:	6825      	ldr	r5, [r4, #0]
 800a6fc:	6961      	ldr	r1, [r4, #20]
 800a6fe:	1d18      	adds	r0, r3, #4
 800a700:	6030      	str	r0, [r6, #0]
 800a702:	062e      	lsls	r6, r5, #24
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	d501      	bpl.n	800a70c <_printf_i+0x1c0>
 800a708:	6019      	str	r1, [r3, #0]
 800a70a:	e002      	b.n	800a712 <_printf_i+0x1c6>
 800a70c:	0668      	lsls	r0, r5, #25
 800a70e:	d5fb      	bpl.n	800a708 <_printf_i+0x1bc>
 800a710:	8019      	strh	r1, [r3, #0]
 800a712:	2300      	movs	r3, #0
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	4616      	mov	r6, r2
 800a718:	e7bc      	b.n	800a694 <_printf_i+0x148>
 800a71a:	6833      	ldr	r3, [r6, #0]
 800a71c:	1d1a      	adds	r2, r3, #4
 800a71e:	6032      	str	r2, [r6, #0]
 800a720:	681e      	ldr	r6, [r3, #0]
 800a722:	6862      	ldr	r2, [r4, #4]
 800a724:	2100      	movs	r1, #0
 800a726:	4630      	mov	r0, r6
 800a728:	f7f5 fd62 	bl	80001f0 <memchr>
 800a72c:	b108      	cbz	r0, 800a732 <_printf_i+0x1e6>
 800a72e:	1b80      	subs	r0, r0, r6
 800a730:	6060      	str	r0, [r4, #4]
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	2300      	movs	r3, #0
 800a738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a73c:	e7aa      	b.n	800a694 <_printf_i+0x148>
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	4632      	mov	r2, r6
 800a742:	4649      	mov	r1, r9
 800a744:	4640      	mov	r0, r8
 800a746:	47d0      	blx	sl
 800a748:	3001      	adds	r0, #1
 800a74a:	d0ad      	beq.n	800a6a8 <_printf_i+0x15c>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	079b      	lsls	r3, r3, #30
 800a750:	d413      	bmi.n	800a77a <_printf_i+0x22e>
 800a752:	68e0      	ldr	r0, [r4, #12]
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	4298      	cmp	r0, r3
 800a758:	bfb8      	it	lt
 800a75a:	4618      	movlt	r0, r3
 800a75c:	e7a6      	b.n	800a6ac <_printf_i+0x160>
 800a75e:	2301      	movs	r3, #1
 800a760:	4632      	mov	r2, r6
 800a762:	4649      	mov	r1, r9
 800a764:	4640      	mov	r0, r8
 800a766:	47d0      	blx	sl
 800a768:	3001      	adds	r0, #1
 800a76a:	d09d      	beq.n	800a6a8 <_printf_i+0x15c>
 800a76c:	3501      	adds	r5, #1
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	9903      	ldr	r1, [sp, #12]
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	42ab      	cmp	r3, r5
 800a776:	dcf2      	bgt.n	800a75e <_printf_i+0x212>
 800a778:	e7eb      	b.n	800a752 <_printf_i+0x206>
 800a77a:	2500      	movs	r5, #0
 800a77c:	f104 0619 	add.w	r6, r4, #25
 800a780:	e7f5      	b.n	800a76e <_printf_i+0x222>
 800a782:	bf00      	nop
 800a784:	0800b6fd 	.word	0x0800b6fd
 800a788:	0800b70e 	.word	0x0800b70e

0800a78c <__sflush_r>:
 800a78c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a794:	0716      	lsls	r6, r2, #28
 800a796:	4605      	mov	r5, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	d454      	bmi.n	800a846 <__sflush_r+0xba>
 800a79c:	684b      	ldr	r3, [r1, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dc02      	bgt.n	800a7a8 <__sflush_r+0x1c>
 800a7a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd48      	ble.n	800a83a <__sflush_r+0xae>
 800a7a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	d045      	beq.n	800a83a <__sflush_r+0xae>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7b4:	682f      	ldr	r7, [r5, #0]
 800a7b6:	6a21      	ldr	r1, [r4, #32]
 800a7b8:	602b      	str	r3, [r5, #0]
 800a7ba:	d030      	beq.n	800a81e <__sflush_r+0x92>
 800a7bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	0759      	lsls	r1, r3, #29
 800a7c2:	d505      	bpl.n	800a7d0 <__sflush_r+0x44>
 800a7c4:	6863      	ldr	r3, [r4, #4]
 800a7c6:	1ad2      	subs	r2, r2, r3
 800a7c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7ca:	b10b      	cbz	r3, 800a7d0 <__sflush_r+0x44>
 800a7cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b0      	blx	r6
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	d106      	bne.n	800a7ee <__sflush_r+0x62>
 800a7e0:	6829      	ldr	r1, [r5, #0]
 800a7e2:	291d      	cmp	r1, #29
 800a7e4:	d82b      	bhi.n	800a83e <__sflush_r+0xb2>
 800a7e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a890 <__sflush_r+0x104>)
 800a7e8:	410a      	asrs	r2, r1
 800a7ea:	07d6      	lsls	r6, r2, #31
 800a7ec:	d427      	bmi.n	800a83e <__sflush_r+0xb2>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	6062      	str	r2, [r4, #4]
 800a7f2:	04d9      	lsls	r1, r3, #19
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	6022      	str	r2, [r4, #0]
 800a7f8:	d504      	bpl.n	800a804 <__sflush_r+0x78>
 800a7fa:	1c42      	adds	r2, r0, #1
 800a7fc:	d101      	bne.n	800a802 <__sflush_r+0x76>
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	b903      	cbnz	r3, 800a804 <__sflush_r+0x78>
 800a802:	6560      	str	r0, [r4, #84]	@ 0x54
 800a804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a806:	602f      	str	r7, [r5, #0]
 800a808:	b1b9      	cbz	r1, 800a83a <__sflush_r+0xae>
 800a80a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a80e:	4299      	cmp	r1, r3
 800a810:	d002      	beq.n	800a818 <__sflush_r+0x8c>
 800a812:	4628      	mov	r0, r5
 800a814:	f7ff fca0 	bl	800a158 <_free_r>
 800a818:	2300      	movs	r3, #0
 800a81a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a81c:	e00d      	b.n	800a83a <__sflush_r+0xae>
 800a81e:	2301      	movs	r3, #1
 800a820:	4628      	mov	r0, r5
 800a822:	47b0      	blx	r6
 800a824:	4602      	mov	r2, r0
 800a826:	1c50      	adds	r0, r2, #1
 800a828:	d1c9      	bne.n	800a7be <__sflush_r+0x32>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0c6      	beq.n	800a7be <__sflush_r+0x32>
 800a830:	2b1d      	cmp	r3, #29
 800a832:	d001      	beq.n	800a838 <__sflush_r+0xac>
 800a834:	2b16      	cmp	r3, #22
 800a836:	d11e      	bne.n	800a876 <__sflush_r+0xea>
 800a838:	602f      	str	r7, [r5, #0]
 800a83a:	2000      	movs	r0, #0
 800a83c:	e022      	b.n	800a884 <__sflush_r+0xf8>
 800a83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a842:	b21b      	sxth	r3, r3
 800a844:	e01b      	b.n	800a87e <__sflush_r+0xf2>
 800a846:	690f      	ldr	r7, [r1, #16]
 800a848:	2f00      	cmp	r7, #0
 800a84a:	d0f6      	beq.n	800a83a <__sflush_r+0xae>
 800a84c:	0793      	lsls	r3, r2, #30
 800a84e:	680e      	ldr	r6, [r1, #0]
 800a850:	bf08      	it	eq
 800a852:	694b      	ldreq	r3, [r1, #20]
 800a854:	600f      	str	r7, [r1, #0]
 800a856:	bf18      	it	ne
 800a858:	2300      	movne	r3, #0
 800a85a:	eba6 0807 	sub.w	r8, r6, r7
 800a85e:	608b      	str	r3, [r1, #8]
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	dde9      	ble.n	800a83a <__sflush_r+0xae>
 800a866:	6a21      	ldr	r1, [r4, #32]
 800a868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a86a:	4643      	mov	r3, r8
 800a86c:	463a      	mov	r2, r7
 800a86e:	4628      	mov	r0, r5
 800a870:	47b0      	blx	r6
 800a872:	2800      	cmp	r0, #0
 800a874:	dc08      	bgt.n	800a888 <__sflush_r+0xfc>
 800a876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a888:	4407      	add	r7, r0
 800a88a:	eba8 0800 	sub.w	r8, r8, r0
 800a88e:	e7e7      	b.n	800a860 <__sflush_r+0xd4>
 800a890:	dfbffffe 	.word	0xdfbffffe

0800a894 <_fflush_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	690b      	ldr	r3, [r1, #16]
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	b913      	cbnz	r3, 800a8a4 <_fflush_r+0x10>
 800a89e:	2500      	movs	r5, #0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	b118      	cbz	r0, 800a8ae <_fflush_r+0x1a>
 800a8a6:	6a03      	ldr	r3, [r0, #32]
 800a8a8:	b90b      	cbnz	r3, 800a8ae <_fflush_r+0x1a>
 800a8aa:	f7ff fad9 	bl	8009e60 <__sinit>
 800a8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0f3      	beq.n	800a89e <_fflush_r+0xa>
 800a8b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8b8:	07d0      	lsls	r0, r2, #31
 800a8ba:	d404      	bmi.n	800a8c6 <_fflush_r+0x32>
 800a8bc:	0599      	lsls	r1, r3, #22
 800a8be:	d402      	bmi.n	800a8c6 <_fflush_r+0x32>
 800a8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8c2:	f7ff fc32 	bl	800a12a <__retarget_lock_acquire_recursive>
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	f7ff ff5f 	bl	800a78c <__sflush_r>
 800a8ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8d0:	07da      	lsls	r2, r3, #31
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	d4e4      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	059b      	lsls	r3, r3, #22
 800a8da:	d4e1      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8de:	f7ff fc25 	bl	800a12c <__retarget_lock_release_recursive>
 800a8e2:	e7dd      	b.n	800a8a0 <_fflush_r+0xc>

0800a8e4 <__swbuf_r>:
 800a8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e6:	460e      	mov	r6, r1
 800a8e8:	4614      	mov	r4, r2
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	b118      	cbz	r0, 800a8f6 <__swbuf_r+0x12>
 800a8ee:	6a03      	ldr	r3, [r0, #32]
 800a8f0:	b90b      	cbnz	r3, 800a8f6 <__swbuf_r+0x12>
 800a8f2:	f7ff fab5 	bl	8009e60 <__sinit>
 800a8f6:	69a3      	ldr	r3, [r4, #24]
 800a8f8:	60a3      	str	r3, [r4, #8]
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	071a      	lsls	r2, r3, #28
 800a8fe:	d501      	bpl.n	800a904 <__swbuf_r+0x20>
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	b943      	cbnz	r3, 800a916 <__swbuf_r+0x32>
 800a904:	4621      	mov	r1, r4
 800a906:	4628      	mov	r0, r5
 800a908:	f000 f82a 	bl	800a960 <__swsetup_r>
 800a90c:	b118      	cbz	r0, 800a916 <__swbuf_r+0x32>
 800a90e:	f04f 37ff 	mov.w	r7, #4294967295
 800a912:	4638      	mov	r0, r7
 800a914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	6922      	ldr	r2, [r4, #16]
 800a91a:	1a98      	subs	r0, r3, r2
 800a91c:	6963      	ldr	r3, [r4, #20]
 800a91e:	b2f6      	uxtb	r6, r6
 800a920:	4283      	cmp	r3, r0
 800a922:	4637      	mov	r7, r6
 800a924:	dc05      	bgt.n	800a932 <__swbuf_r+0x4e>
 800a926:	4621      	mov	r1, r4
 800a928:	4628      	mov	r0, r5
 800a92a:	f7ff ffb3 	bl	800a894 <_fflush_r>
 800a92e:	2800      	cmp	r0, #0
 800a930:	d1ed      	bne.n	800a90e <__swbuf_r+0x2a>
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	3b01      	subs	r3, #1
 800a936:	60a3      	str	r3, [r4, #8]
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	6022      	str	r2, [r4, #0]
 800a93e:	701e      	strb	r6, [r3, #0]
 800a940:	6962      	ldr	r2, [r4, #20]
 800a942:	1c43      	adds	r3, r0, #1
 800a944:	429a      	cmp	r2, r3
 800a946:	d004      	beq.n	800a952 <__swbuf_r+0x6e>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	07db      	lsls	r3, r3, #31
 800a94c:	d5e1      	bpl.n	800a912 <__swbuf_r+0x2e>
 800a94e:	2e0a      	cmp	r6, #10
 800a950:	d1df      	bne.n	800a912 <__swbuf_r+0x2e>
 800a952:	4621      	mov	r1, r4
 800a954:	4628      	mov	r0, r5
 800a956:	f7ff ff9d 	bl	800a894 <_fflush_r>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0d9      	beq.n	800a912 <__swbuf_r+0x2e>
 800a95e:	e7d6      	b.n	800a90e <__swbuf_r+0x2a>

0800a960 <__swsetup_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4b29      	ldr	r3, [pc, #164]	@ (800aa08 <__swsetup_r+0xa8>)
 800a964:	4605      	mov	r5, r0
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	460c      	mov	r4, r1
 800a96a:	b118      	cbz	r0, 800a974 <__swsetup_r+0x14>
 800a96c:	6a03      	ldr	r3, [r0, #32]
 800a96e:	b90b      	cbnz	r3, 800a974 <__swsetup_r+0x14>
 800a970:	f7ff fa76 	bl	8009e60 <__sinit>
 800a974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a978:	0719      	lsls	r1, r3, #28
 800a97a:	d422      	bmi.n	800a9c2 <__swsetup_r+0x62>
 800a97c:	06da      	lsls	r2, r3, #27
 800a97e:	d407      	bmi.n	800a990 <__swsetup_r+0x30>
 800a980:	2209      	movs	r2, #9
 800a982:	602a      	str	r2, [r5, #0]
 800a984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	f04f 30ff 	mov.w	r0, #4294967295
 800a98e:	e033      	b.n	800a9f8 <__swsetup_r+0x98>
 800a990:	0758      	lsls	r0, r3, #29
 800a992:	d512      	bpl.n	800a9ba <__swsetup_r+0x5a>
 800a994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a996:	b141      	cbz	r1, 800a9aa <__swsetup_r+0x4a>
 800a998:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a99c:	4299      	cmp	r1, r3
 800a99e:	d002      	beq.n	800a9a6 <__swsetup_r+0x46>
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f7ff fbd9 	bl	800a158 <_free_r>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	f043 0308 	orr.w	r3, r3, #8
 800a9c0:	81a3      	strh	r3, [r4, #12]
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	b94b      	cbnz	r3, 800a9da <__swsetup_r+0x7a>
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9d0:	d003      	beq.n	800a9da <__swsetup_r+0x7a>
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	f000 f883 	bl	800aae0 <__smakebuf_r>
 800a9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9de:	f013 0201 	ands.w	r2, r3, #1
 800a9e2:	d00a      	beq.n	800a9fa <__swsetup_r+0x9a>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	60a2      	str	r2, [r4, #8]
 800a9e8:	6962      	ldr	r2, [r4, #20]
 800a9ea:	4252      	negs	r2, r2
 800a9ec:	61a2      	str	r2, [r4, #24]
 800a9ee:	6922      	ldr	r2, [r4, #16]
 800a9f0:	b942      	cbnz	r2, 800aa04 <__swsetup_r+0xa4>
 800a9f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9f6:	d1c5      	bne.n	800a984 <__swsetup_r+0x24>
 800a9f8:	bd38      	pop	{r3, r4, r5, pc}
 800a9fa:	0799      	lsls	r1, r3, #30
 800a9fc:	bf58      	it	pl
 800a9fe:	6962      	ldrpl	r2, [r4, #20]
 800aa00:	60a2      	str	r2, [r4, #8]
 800aa02:	e7f4      	b.n	800a9ee <__swsetup_r+0x8e>
 800aa04:	2000      	movs	r0, #0
 800aa06:	e7f7      	b.n	800a9f8 <__swsetup_r+0x98>
 800aa08:	20000018 	.word	0x20000018

0800aa0c <_raise_r>:
 800aa0c:	291f      	cmp	r1, #31
 800aa0e:	b538      	push	{r3, r4, r5, lr}
 800aa10:	4605      	mov	r5, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	d904      	bls.n	800aa20 <_raise_r+0x14>
 800aa16:	2316      	movs	r3, #22
 800aa18:	6003      	str	r3, [r0, #0]
 800aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa22:	b112      	cbz	r2, 800aa2a <_raise_r+0x1e>
 800aa24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa28:	b94b      	cbnz	r3, 800aa3e <_raise_r+0x32>
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	f000 f830 	bl	800aa90 <_getpid_r>
 800aa30:	4622      	mov	r2, r4
 800aa32:	4601      	mov	r1, r0
 800aa34:	4628      	mov	r0, r5
 800aa36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa3a:	f000 b817 	b.w	800aa6c <_kill_r>
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d00a      	beq.n	800aa58 <_raise_r+0x4c>
 800aa42:	1c59      	adds	r1, r3, #1
 800aa44:	d103      	bne.n	800aa4e <_raise_r+0x42>
 800aa46:	2316      	movs	r3, #22
 800aa48:	6003      	str	r3, [r0, #0]
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	e7e7      	b.n	800aa1e <_raise_r+0x12>
 800aa4e:	2100      	movs	r1, #0
 800aa50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa54:	4620      	mov	r0, r4
 800aa56:	4798      	blx	r3
 800aa58:	2000      	movs	r0, #0
 800aa5a:	e7e0      	b.n	800aa1e <_raise_r+0x12>

0800aa5c <raise>:
 800aa5c:	4b02      	ldr	r3, [pc, #8]	@ (800aa68 <raise+0xc>)
 800aa5e:	4601      	mov	r1, r0
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	f7ff bfd3 	b.w	800aa0c <_raise_r>
 800aa66:	bf00      	nop
 800aa68:	20000018 	.word	0x20000018

0800aa6c <_kill_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	@ (800aa8c <_kill_r+0x20>)
 800aa70:	2300      	movs	r3, #0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	4611      	mov	r1, r2
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	f7fc ff35 	bl	80078e8 <_kill>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d102      	bne.n	800aa88 <_kill_r+0x1c>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	b103      	cbz	r3, 800aa88 <_kill_r+0x1c>
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	bd38      	pop	{r3, r4, r5, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20000390 	.word	0x20000390

0800aa90 <_getpid_r>:
 800aa90:	f7fc bf22 	b.w	80078d8 <_getpid>

0800aa94 <__swhatbuf_r>:
 800aa94:	b570      	push	{r4, r5, r6, lr}
 800aa96:	460c      	mov	r4, r1
 800aa98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	b096      	sub	sp, #88	@ 0x58
 800aaa0:	4615      	mov	r5, r2
 800aaa2:	461e      	mov	r6, r3
 800aaa4:	da0d      	bge.n	800aac2 <__swhatbuf_r+0x2e>
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aaac:	f04f 0100 	mov.w	r1, #0
 800aab0:	bf14      	ite	ne
 800aab2:	2340      	movne	r3, #64	@ 0x40
 800aab4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aab8:	2000      	movs	r0, #0
 800aaba:	6031      	str	r1, [r6, #0]
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	b016      	add	sp, #88	@ 0x58
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
 800aac2:	466a      	mov	r2, sp
 800aac4:	f000 f848 	bl	800ab58 <_fstat_r>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	dbec      	blt.n	800aaa6 <__swhatbuf_r+0x12>
 800aacc:	9901      	ldr	r1, [sp, #4]
 800aace:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aad2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aad6:	4259      	negs	r1, r3
 800aad8:	4159      	adcs	r1, r3
 800aada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aade:	e7eb      	b.n	800aab8 <__swhatbuf_r+0x24>

0800aae0 <__smakebuf_r>:
 800aae0:	898b      	ldrh	r3, [r1, #12]
 800aae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aae4:	079d      	lsls	r5, r3, #30
 800aae6:	4606      	mov	r6, r0
 800aae8:	460c      	mov	r4, r1
 800aaea:	d507      	bpl.n	800aafc <__smakebuf_r+0x1c>
 800aaec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	6123      	str	r3, [r4, #16]
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	6163      	str	r3, [r4, #20]
 800aaf8:	b003      	add	sp, #12
 800aafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafc:	ab01      	add	r3, sp, #4
 800aafe:	466a      	mov	r2, sp
 800ab00:	f7ff ffc8 	bl	800aa94 <__swhatbuf_r>
 800ab04:	9f00      	ldr	r7, [sp, #0]
 800ab06:	4605      	mov	r5, r0
 800ab08:	4639      	mov	r1, r7
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7ff f890 	bl	8009c30 <_malloc_r>
 800ab10:	b948      	cbnz	r0, 800ab26 <__smakebuf_r+0x46>
 800ab12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab16:	059a      	lsls	r2, r3, #22
 800ab18:	d4ee      	bmi.n	800aaf8 <__smakebuf_r+0x18>
 800ab1a:	f023 0303 	bic.w	r3, r3, #3
 800ab1e:	f043 0302 	orr.w	r3, r3, #2
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	e7e2      	b.n	800aaec <__smakebuf_r+0xc>
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	6020      	str	r0, [r4, #0]
 800ab2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2e:	81a3      	strh	r3, [r4, #12]
 800ab30:	9b01      	ldr	r3, [sp, #4]
 800ab32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab36:	b15b      	cbz	r3, 800ab50 <__smakebuf_r+0x70>
 800ab38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f000 f81d 	bl	800ab7c <_isatty_r>
 800ab42:	b128      	cbz	r0, 800ab50 <__smakebuf_r+0x70>
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	f023 0303 	bic.w	r3, r3, #3
 800ab4a:	f043 0301 	orr.w	r3, r3, #1
 800ab4e:	81a3      	strh	r3, [r4, #12]
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	431d      	orrs	r5, r3
 800ab54:	81a5      	strh	r5, [r4, #12]
 800ab56:	e7cf      	b.n	800aaf8 <__smakebuf_r+0x18>

0800ab58 <_fstat_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	@ (800ab78 <_fstat_r+0x20>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	602b      	str	r3, [r5, #0]
 800ab66:	f7fc ff1f 	bl	80079a8 <_fstat>
 800ab6a:	1c43      	adds	r3, r0, #1
 800ab6c:	d102      	bne.n	800ab74 <_fstat_r+0x1c>
 800ab6e:	682b      	ldr	r3, [r5, #0]
 800ab70:	b103      	cbz	r3, 800ab74 <_fstat_r+0x1c>
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	bd38      	pop	{r3, r4, r5, pc}
 800ab76:	bf00      	nop
 800ab78:	20000390 	.word	0x20000390

0800ab7c <_isatty_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d06      	ldr	r5, [pc, #24]	@ (800ab98 <_isatty_r+0x1c>)
 800ab80:	2300      	movs	r3, #0
 800ab82:	4604      	mov	r4, r0
 800ab84:	4608      	mov	r0, r1
 800ab86:	602b      	str	r3, [r5, #0]
 800ab88:	f7fc ff1e 	bl	80079c8 <_isatty>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_isatty_r+0x1a>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_isatty_r+0x1a>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20000390 	.word	0x20000390

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
